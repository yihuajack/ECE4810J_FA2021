// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
// Version: 2021.1.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hls_ALU_hls_ALU,hls_ip_2021_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.475600,HLS_SYN_LAT=6,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=441,HLS_SYN_LUT=517,HLS_VERSION=2021_1_1}" *)

module hls_ALU (
        ap_clk,
        ap_rst_n,
        s_axi_CRTLS_AWVALID,
        s_axi_CRTLS_AWREADY,
        s_axi_CRTLS_AWADDR,
        s_axi_CRTLS_WVALID,
        s_axi_CRTLS_WREADY,
        s_axi_CRTLS_WDATA,
        s_axi_CRTLS_WSTRB,
        s_axi_CRTLS_ARVALID,
        s_axi_CRTLS_ARREADY,
        s_axi_CRTLS_ARADDR,
        s_axi_CRTLS_RVALID,
        s_axi_CRTLS_RREADY,
        s_axi_CRTLS_RDATA,
        s_axi_CRTLS_RRESP,
        s_axi_CRTLS_BVALID,
        s_axi_CRTLS_BREADY,
        s_axi_CRTLS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_state5 = 25'd16;
parameter    ap_ST_fsm_state6 = 25'd32;
parameter    ap_ST_fsm_state7 = 25'd64;
parameter    ap_ST_fsm_state8 = 25'd128;
parameter    ap_ST_fsm_state9 = 25'd256;
parameter    ap_ST_fsm_state10 = 25'd512;
parameter    ap_ST_fsm_state11 = 25'd1024;
parameter    ap_ST_fsm_state12 = 25'd2048;
parameter    ap_ST_fsm_state13 = 25'd4096;
parameter    ap_ST_fsm_state14 = 25'd8192;
parameter    ap_ST_fsm_state15 = 25'd16384;
parameter    ap_ST_fsm_state16 = 25'd32768;
parameter    ap_ST_fsm_state17 = 25'd65536;
parameter    ap_ST_fsm_state18 = 25'd131072;
parameter    ap_ST_fsm_state19 = 25'd262144;
parameter    ap_ST_fsm_state20 = 25'd524288;
parameter    ap_ST_fsm_state21 = 25'd1048576;
parameter    ap_ST_fsm_state22 = 25'd2097152;
parameter    ap_ST_fsm_state23 = 25'd4194304;
parameter    ap_ST_fsm_state24 = 25'd8388608;
parameter    ap_ST_fsm_state25 = 25'd16777216;
parameter    C_S_AXI_CRTLS_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTLS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CRTLS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_CRTLS_AWVALID;
output   s_axi_CRTLS_AWREADY;
input  [C_S_AXI_CRTLS_ADDR_WIDTH - 1:0] s_axi_CRTLS_AWADDR;
input   s_axi_CRTLS_WVALID;
output   s_axi_CRTLS_WREADY;
input  [C_S_AXI_CRTLS_DATA_WIDTH - 1:0] s_axi_CRTLS_WDATA;
input  [C_S_AXI_CRTLS_WSTRB_WIDTH - 1:0] s_axi_CRTLS_WSTRB;
input   s_axi_CRTLS_ARVALID;
output   s_axi_CRTLS_ARREADY;
input  [C_S_AXI_CRTLS_ADDR_WIDTH - 1:0] s_axi_CRTLS_ARADDR;
output   s_axi_CRTLS_RVALID;
input   s_axi_CRTLS_RREADY;
output  [C_S_AXI_CRTLS_DATA_WIDTH - 1:0] s_axi_CRTLS_RDATA;
output  [1:0] s_axi_CRTLS_RRESP;
output   s_axi_CRTLS_BVALID;
input   s_axi_CRTLS_BREADY;
output  [1:0] s_axi_CRTLS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [15:0] a;
wire   [15:0] b;
wire   [15:0] c;
wire   [15:0] c_read_read_fu_44_p2;
reg   [15:0] c_read_reg_134;
reg   [15:0] b_read_reg_138;
reg   [15:0] a_read_reg_146;
wire    ap_CS_fsm_state21;
wire  signed [31:0] grp_fu_128_p2;
wire    ap_CS_fsm_state24;
wire  signed [31:0] sext_ln8_fu_108_p1;
wire    ap_CS_fsm_state25;
wire   [31:0] zext_ln8_fu_124_p1;
wire   [31:0] zext_ln10_fu_85_p1;
reg   [31:0] ap_phi_mux_phi_ln12_phi_fu_66_p10;
reg   [31:0] phi_ln12_reg_62;
wire    ap_CS_fsm_state20;
wire   [15:0] grp_fu_79_p2;
wire   [16:0] zext_ln8_1_fu_96_p1;
wire   [16:0] zext_ln8_2_fu_99_p1;
wire   [16:0] sub_ln8_fu_102_p2;
wire   [16:0] zext_ln7_1_fu_115_p1;
wire   [16:0] zext_ln7_fu_112_p1;
wire   [16:0] add_ln7_fu_118_p2;
wire   [15:0] grp_fu_128_p0;
wire   [15:0] grp_fu_128_p1;
reg    grp_fu_79_ap_start;
wire    grp_fu_79_ap_done;
reg   [24:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire   [31:0] grp_fu_128_p00;
wire   [31:0] grp_fu_128_p10;
wire    ap_ce_reg;
wire   [31:0] ap_return;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
end

hls_ALU_CRTLS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTLS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTLS_DATA_WIDTH ))
CRTLS_s_axi_U(
    .AWVALID(s_axi_CRTLS_AWVALID),
    .AWREADY(s_axi_CRTLS_AWREADY),
    .AWADDR(s_axi_CRTLS_AWADDR),
    .WVALID(s_axi_CRTLS_WVALID),
    .WREADY(s_axi_CRTLS_WREADY),
    .WDATA(s_axi_CRTLS_WDATA),
    .WSTRB(s_axi_CRTLS_WSTRB),
    .ARVALID(s_axi_CRTLS_ARVALID),
    .ARREADY(s_axi_CRTLS_ARREADY),
    .ARADDR(s_axi_CRTLS_ARADDR),
    .RVALID(s_axi_CRTLS_RVALID),
    .RREADY(s_axi_CRTLS_RREADY),
    .RDATA(s_axi_CRTLS_RDATA),
    .RRESP(s_axi_CRTLS_RRESP),
    .BVALID(s_axi_CRTLS_BVALID),
    .BREADY(s_axi_CRTLS_BREADY),
    .BRESP(s_axi_CRTLS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(ap_phi_mux_phi_ln12_phi_fu_66_p10),
    .a(a),
    .b(b),
    .c(c)
);

hls_ALU_udiv_16ns_16ns_16_20_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 20 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
udiv_16ns_16ns_16_20_seq_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_79_ap_start),
    .done(grp_fu_79_ap_done),
    .din0(a),
    .din1(b),
    .ce(1'b1),
    .dout(grp_fu_79_p2)
);

hls_ALU_mul_mul_16ns_16ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16ns_16ns_32_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_128_p0),
    .din1(grp_fu_128_p1),
    .ce(1'b1),
    .dout(grp_fu_128_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((c_read_reg_134 == 16'd1) & (1'b1 == ap_CS_fsm_state25))) begin
        phi_ln12_reg_62 <= sext_ln8_fu_108_p1;
    end else if (((c_read_reg_134 == 16'd0) & (1'b1 == ap_CS_fsm_state25))) begin
        phi_ln12_reg_62 <= zext_ln8_fu_124_p1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        phi_ln12_reg_62 <= grp_fu_128_p2;
    end else if (((c_read_reg_134 == 16'd3) & (1'b1 == ap_CS_fsm_state20))) begin
        phi_ln12_reg_62 <= zext_ln10_fu_85_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        a_read_reg_146 <= a;
        b_read_reg_138 <= b;
        c_read_reg_134 <= c;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((c_read_reg_134 == 16'd3) & (1'b1 == ap_CS_fsm_state20))) begin
        ap_phi_mux_phi_ln12_phi_fu_66_p10 = zext_ln10_fu_85_p1;
    end else begin
        ap_phi_mux_phi_ln12_phi_fu_66_p10 = phi_ln12_reg_62;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((c_read_read_fu_44_p2 == 16'd3) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_79_ap_start = 1'b1;
    end else begin
        grp_fu_79_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & ((c_read_read_fu_44_p2 == 16'd0) | (c_read_read_fu_44_p2 == 16'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else if (((c_read_read_fu_44_p2 == 16'd2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else if ((~(c_read_read_fu_44_p2 == 16'd2) & ~(c_read_read_fu_44_p2 == 16'd1) & ~(c_read_read_fu_44_p2 == 16'd0) & ~(c_read_read_fu_44_p2 == 16'd3) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else if (((c_read_read_fu_44_p2 == 16'd3) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln7_fu_118_p2 = (zext_ln7_1_fu_115_p1 + zext_ln7_fu_112_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign c_read_read_fu_44_p2 = c;

assign grp_fu_128_p0 = grp_fu_128_p00;

assign grp_fu_128_p00 = b_read_reg_138;

assign grp_fu_128_p1 = grp_fu_128_p10;

assign grp_fu_128_p10 = a_read_reg_146;

assign sext_ln8_fu_108_p1 = $signed(sub_ln8_fu_102_p2);

assign sub_ln8_fu_102_p2 = (zext_ln8_1_fu_96_p1 - zext_ln8_2_fu_99_p1);

assign zext_ln10_fu_85_p1 = grp_fu_79_p2;

assign zext_ln7_1_fu_115_p1 = b_read_reg_138;

assign zext_ln7_fu_112_p1 = a_read_reg_146;

assign zext_ln8_1_fu_96_p1 = a_read_reg_146;

assign zext_ln8_2_fu_99_p1 = b_read_reg_138;

assign zext_ln8_fu_124_p1 = add_ln7_fu_118_p2;

endmodule //hls_ALU

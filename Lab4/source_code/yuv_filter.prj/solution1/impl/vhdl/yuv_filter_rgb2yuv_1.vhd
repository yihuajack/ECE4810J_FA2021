-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
-- Version: 2021.1.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv_filter_rgb2yuv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce0 : OUT STD_LOGIC;
    in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce0 : OUT STD_LOGIC;
    in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce0 : OUT STD_LOGIC;
    in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch1_ce0 : OUT STD_LOGIC;
    out_channels_ch1_we0 : OUT STD_LOGIC;
    out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch2_ce0 : OUT STD_LOGIC;
    out_channels_ch2_we0 : OUT STD_LOGIC;
    out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch3_ce0 : OUT STD_LOGIC;
    out_channels_ch3_we0 : OUT STD_LOGIC;
    out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of yuv_filter_rgb2yuv_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_80 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_const_lv16_FFB6 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110110110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_FFA2 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110100010";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv14_80 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_80 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv13_19 : STD_LOGIC_VECTOR (12 downto 0) := "0000000011001";
    constant ap_const_lv15_7FDA : STD_LOGIC_VECTOR (14 downto 0) := "111111111011010";
    constant ap_const_lv15_7A : STD_LOGIC_VECTOR (14 downto 0) := "000000001111010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal x_6_fu_226_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_6_reg_572 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln54_fu_256_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln54_reg_577 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln49_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_fu_277_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_reg_585 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln54_1_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_1_reg_590 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln52_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal R_reg_613 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_reg_619 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln57_fu_302_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal G_reg_637 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal mul_ln58_1_fu_326_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln58_fu_358_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln58_reg_654 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln59_1_fu_364_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln59_1_fu_397_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln59_1_reg_664 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln_reg_669 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal trunc_ln5_reg_674 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln6_reg_679 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_02_reg_202 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal x_fu_108 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln54_fu_232_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln54_1_fu_244_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_cast_fu_236_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_3_cast_fu_248_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln54_fu_283_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln54_1_fu_287_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln57_4_fu_313_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln57_3_fu_316_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln58_1_fu_326_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln57_3_fu_310_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln58_1_fu_326_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1_fu_332_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln58_1_fu_343_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln58_fu_339_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln58_2_fu_354_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln59_1_fu_364_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln59_1_fu_364_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln58_1_fu_350_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln59_fu_370_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln2_fu_380_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln59_fu_376_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln59_1_fu_387_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln59_1_fu_391_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln_fu_403_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln57_1_fu_414_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln57_2_fu_425_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln57_2_fu_421_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln57_5_fu_432_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln57_fu_436_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln57_1_fu_410_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_523_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln57_8_fu_448_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln57_1_fu_442_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln57_2_fu_451_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_1_fu_467_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_532_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_2_fu_472_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln58_2_fu_472_p2 : signal is "no";
    signal sext_ln59_1_fu_487_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_541_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln59_2_fu_490_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln59_2_fu_490_p2 : signal is "no";
    signal grp_fu_523_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_523_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_523_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_532_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_532_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_541_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_541_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal grp_fu_523_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_523_p20 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component yuv_filter_mul_8ns_8s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component yuv_filter_mac_muladd_8ns_5ns_9ns_13_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component yuv_filter_mac_muladd_8ns_7s_16s_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component yuv_filter_mac_muladd_8ns_7ns_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    mul_8ns_8s_16_1_1_U1 : component yuv_filter_mul_8ns_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln58_1_fu_326_p0,
        din1 => mul_ln58_1_fu_326_p1,
        dout => mul_ln58_1_fu_326_p2);

    mul_8ns_8s_16_1_1_U2 : component yuv_filter_mul_8ns_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln59_1_fu_364_p0,
        din1 => mul_ln59_1_fu_364_p1,
        dout => mul_ln59_1_fu_364_p2);

    mac_muladd_8ns_5ns_9ns_13_4_1_U3 : component yuv_filter_mac_muladd_8ns_5ns_9ns_13_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 5,
        din2_WIDTH => 9,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_523_p0,
        din1 => grp_fu_523_p1,
        din2 => grp_fu_523_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_523_p3);

    mac_muladd_8ns_7s_16s_16_4_1_U4 : component yuv_filter_mac_muladd_8ns_7s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 7,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_532_p0,
        din1 => grp_fu_532_p1,
        din2 => mul_ln58_1_fu_326_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_532_p3);

    mac_muladd_8ns_7ns_16ns_16_4_1_U5 : component yuv_filter_mac_muladd_8ns_7ns_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 7,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_541_p0,
        din1 => grp_fu_541_p1,
        din2 => mul_ln59_1_fu_364_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_541_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    x_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                x_fu_108 <= ap_const_lv16_0;
            elsif (((icmp_ln52_fu_272_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                x_fu_108 <= x_6_reg_572;
            end if; 
        end if;
    end process;

    y_02_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                y_02_reg_202 <= y_reg_585;
            elsif (((icmp_ln49_fu_221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                y_02_reg_202 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                B_reg_619 <= in_channels_ch3_q0;
                R_reg_613 <= in_channels_ch1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                G_reg_637 <= in_channels_ch2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_fu_221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    add_ln54_reg_577(21 downto 8) <= add_ln54_fu_256_p2(21 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    add_ln59_1_reg_664(13 downto 1) <= add_ln59_1_fu_397_p2(13 downto 1);
                    sub_ln58_reg_654(15 downto 4) <= sub_ln58_fu_358_p2(15 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                trunc_ln5_reg_674 <= add_ln58_2_fu_472_p2(15 downto 8);
                trunc_ln6_reg_679 <= add_ln59_2_fu_490_p2(15 downto 8);
                trunc_ln_reg_669 <= add_ln57_2_fu_451_p2(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                x_6_reg_572 <= x_6_fu_226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                y_reg_585 <= y_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_272_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln54_1_reg_590(21 downto 0) <= zext_ln54_1_fu_292_p1(21 downto 0);
            end if;
        end if;
    end process;
    add_ln54_reg_577(7 downto 0) <= "00000000";
    zext_ln54_1_reg_590(63 downto 22) <= "000000000000000000000000000000000000000000";
    sub_ln58_reg_654(3 downto 0) <= "0000";
    add_ln59_1_reg_664(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln49_fu_221_p2, ap_CS_fsm_state3, icmp_ln52_fu_272_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln49_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln52_fu_272_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln54_1_fu_287_p2 <= std_logic_vector(unsigned(add_ln54_reg_577) + unsigned(zext_ln54_fu_283_p1));
    add_ln54_fu_256_p2 <= std_logic_vector(unsigned(tmp_cast_fu_236_p3) + unsigned(tmp_3_cast_fu_248_p3));
    add_ln57_1_fu_442_p2 <= std_logic_vector(unsigned(add_ln57_fu_436_p2) + unsigned(zext_ln57_1_fu_410_p1));
    add_ln57_2_fu_451_p2 <= std_logic_vector(unsigned(zext_ln57_8_fu_448_p1) + unsigned(add_ln57_1_fu_442_p2));
    add_ln57_3_fu_316_p2 <= std_logic_vector(unsigned(zext_ln57_4_fu_313_p1) + unsigned(ap_const_lv9_80));
    add_ln57_fu_436_p2 <= std_logic_vector(unsigned(zext_ln57_2_fu_421_p1) + unsigned(zext_ln57_5_fu_432_p1));
    add_ln58_1_fu_467_p2 <= std_logic_vector(unsigned(sub_ln58_reg_654) + unsigned(ap_const_lv16_80));
    add_ln58_2_fu_472_p2 <= std_logic_vector(unsigned(add_ln58_1_fu_467_p2) + unsigned(grp_fu_532_p3));
    add_ln59_1_fu_397_p2 <= std_logic_vector(unsigned(sub_ln59_1_fu_391_p2) + unsigned(ap_const_lv14_80));
    add_ln59_2_fu_490_p2 <= std_logic_vector(signed(sext_ln59_1_fu_487_p1) + signed(grp_fu_541_p3));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln49_fu_221_p2)
    begin
        if ((((icmp_ln49_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln49_fu_221_p2)
    begin
        if (((icmp_ln49_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= p_read;
    ap_return_1 <= p_read1;
    grp_fu_523_p0 <= grp_fu_523_p00(8 - 1 downto 0);
    grp_fu_523_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_channels_ch3_q0),13));
    grp_fu_523_p1 <= ap_const_lv13_19(5 - 1 downto 0);
    grp_fu_523_p2 <= grp_fu_523_p20(9 - 1 downto 0);
    grp_fu_523_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln57_3_fu_316_p2),13));
    grp_fu_532_p0 <= zext_ln57_fu_302_p1(8 - 1 downto 0);
    grp_fu_532_p1 <= ap_const_lv15_7FDA(7 - 1 downto 0);
    grp_fu_541_p0 <= zext_ln57_fu_302_p1(8 - 1 downto 0);
    grp_fu_541_p1 <= ap_const_lv15_7A(7 - 1 downto 0);
    icmp_ln49_fu_221_p2 <= "1" when (x_fu_108 = p_read) else "0";
    icmp_ln52_fu_272_p2 <= "1" when (y_02_reg_202 = p_read1) else "0";
    in_channels_ch1_address0 <= zext_ln54_1_fu_292_p1(22 - 1 downto 0);

    in_channels_ch1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch2_address0 <= zext_ln54_1_reg_590(22 - 1 downto 0);

    in_channels_ch2_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch3_address0 <= zext_ln54_1_fu_292_p1(22 - 1 downto 0);

    in_channels_ch3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln58_1_fu_326_p0 <= zext_ln57_3_fu_310_p1(8 - 1 downto 0);
    mul_ln58_1_fu_326_p1 <= ap_const_lv16_FFB6(8 - 1 downto 0);
    mul_ln59_1_fu_364_p0 <= zext_ln57_3_fu_310_p1(8 - 1 downto 0);
    mul_ln59_1_fu_364_p1 <= ap_const_lv16_FFA2(8 - 1 downto 0);
    out_channels_ch1_address0 <= zext_ln54_1_reg_590(22 - 1 downto 0);

    out_channels_ch1_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_d0 <= std_logic_vector(unsigned(trunc_ln_reg_669) + unsigned(ap_const_lv8_10));

    out_channels_ch1_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_channels_ch1_we0 <= ap_const_logic_1;
        else 
            out_channels_ch1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_address0 <= zext_ln54_1_reg_590(22 - 1 downto 0);

    out_channels_ch2_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_d0 <= (trunc_ln5_reg_674 xor ap_const_lv8_80);

    out_channels_ch2_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_channels_ch2_we0 <= ap_const_logic_1;
        else 
            out_channels_ch2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_address0 <= zext_ln54_1_reg_590(22 - 1 downto 0);

    out_channels_ch3_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_d0 <= (trunc_ln6_reg_679 xor ap_const_lv8_80);

    out_channels_ch3_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_channels_ch3_we0 <= ap_const_logic_1;
        else 
            out_channels_ch3_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln59_1_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln59_1_reg_664),16));

        sext_ln59_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln59_fu_370_p2),14));

    shl_ln1_fu_332_p3 <= (B_reg_619 & ap_const_lv7_0);
    shl_ln2_fu_380_p3 <= (B_reg_619 & ap_const_lv1_0);
    shl_ln57_1_fu_414_p3 <= (R_reg_613 & ap_const_lv1_0);
    shl_ln57_2_fu_425_p3 <= (G_reg_637 & ap_const_lv7_0);
    shl_ln58_1_fu_343_p3 <= (B_reg_619 & ap_const_lv4_0);
    shl_ln_fu_403_p3 <= (R_reg_613 & ap_const_lv6_0);
    sub_ln58_fu_358_p2 <= std_logic_vector(unsigned(zext_ln58_fu_339_p1) - unsigned(zext_ln58_2_fu_354_p1));
    sub_ln59_1_fu_391_p2 <= std_logic_vector(signed(sext_ln59_fu_376_p1) - signed(zext_ln59_1_fu_387_p1));
    sub_ln59_fu_370_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(zext_ln58_1_fu_350_p1));
    tmp_3_cast_fu_248_p3 <= (trunc_ln54_1_fu_244_p1 & ap_const_lv8_0);
    tmp_cast_fu_236_p3 <= (trunc_ln54_fu_232_p1 & ap_const_lv10_0);
    trunc_ln54_1_fu_244_p1 <= x_fu_108(14 - 1 downto 0);
    trunc_ln54_fu_232_p1 <= x_fu_108(12 - 1 downto 0);
    x_6_fu_226_p2 <= std_logic_vector(unsigned(x_fu_108) + unsigned(ap_const_lv16_1));
    y_fu_277_p2 <= std_logic_vector(unsigned(y_02_reg_202) + unsigned(ap_const_lv16_1));
    zext_ln54_1_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_1_fu_287_p2),64));
    zext_ln54_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_02_reg_202),22));
    zext_ln57_1_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_403_p3),16));
    zext_ln57_2_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln57_1_fu_414_p3),16));
    zext_ln57_3_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(G_reg_637),16));
    zext_ln57_4_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(G_reg_637),9));
    zext_ln57_5_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln57_2_fu_425_p3),16));
    zext_ln57_8_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_523_p3),16));
    zext_ln57_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_channels_ch1_q0),15));
    zext_ln58_1_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln58_1_fu_343_p3),13));
    zext_ln58_2_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln58_1_fu_343_p3),16));
    zext_ln58_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_332_p3),16));
    zext_ln59_1_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_380_p3),14));
end behav;

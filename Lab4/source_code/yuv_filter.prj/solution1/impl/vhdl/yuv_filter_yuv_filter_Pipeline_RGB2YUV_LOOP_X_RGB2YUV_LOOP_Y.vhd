-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
-- Version: 2021.1.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv_filter_yuv_filter_Pipeline_RGB2YUV_LOOP_X_RGB2YUV_LOOP_Y is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mul_ln49 : IN STD_LOGIC_VECTOR (31 downto 0);
    height : IN STD_LOGIC_VECTOR (15 downto 0);
    in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce0 : OUT STD_LOGIC;
    in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce0 : OUT STD_LOGIC;
    in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce0 : OUT STD_LOGIC;
    in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_yuv_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    p_yuv_channels_ch1_ce0 : OUT STD_LOGIC;
    p_yuv_channels_ch1_we0 : OUT STD_LOGIC;
    p_yuv_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_yuv_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    p_yuv_channels_ch2_ce0 : OUT STD_LOGIC;
    p_yuv_channels_ch2_we0 : OUT STD_LOGIC;
    p_yuv_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_yuv_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    p_yuv_channels_ch3_ce0 : OUT STD_LOGIC;
    p_yuv_channels_ch3_we0 : OUT STD_LOGIC;
    p_yuv_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of yuv_filter_yuv_filter_Pipeline_RGB2YUV_LOOP_X_RGB2YUV_LOOP_Y is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_80 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_const_lv16_FFB6 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110110110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_FFA2 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110100010";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv14_80 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_80 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv13_19 : STD_LOGIC_VECTOR (12 downto 0) := "0000000011001";
    constant ap_const_lv15_7FDA : STD_LOGIC_VECTOR (14 downto 0) := "111111111011010";
    constant ap_const_lv15_7A : STD_LOGIC_VECTOR (14 downto 0) := "000000001111010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln49_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln52_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_611 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_fu_239_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln34_reg_616 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln54_1_fu_312_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln54_1_reg_621 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln54_1_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_1_reg_626 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_1_reg_626_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_1_reg_626_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_1_reg_626_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_1_reg_626_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal R_reg_649 : STD_LOGIC_VECTOR (7 downto 0);
    signal R_reg_649_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal R_reg_649_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal B_reg_655 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_reg_655_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln57_fu_328_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal G_reg_673 : STD_LOGIC_VECTOR (7 downto 0);
    signal G_reg_673_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln58_1_fu_352_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln58_fu_384_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln58_reg_690 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln59_1_fu_390_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln59_1_fu_423_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln59_1_reg_700 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln_reg_705 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1_reg_710 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln2_reg_715 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal y_fu_100 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_3_fu_247_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal x_fu_104 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln34_1_fu_272_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln49_fu_225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_6_fu_266_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln54_fu_279_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln54_1_fu_291_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_cast_fu_283_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_1_cast_fu_295_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln54_fu_303_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln54_fu_309_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln57_4_fu_339_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln57_3_fu_342_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln58_1_fu_352_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln57_3_fu_336_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln58_1_fu_352_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1_fu_358_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln58_1_fu_369_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln58_fu_365_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln58_2_fu_380_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln59_1_fu_390_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln59_1_fu_390_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln58_1_fu_376_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln59_fu_396_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln2_fu_406_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln59_fu_402_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln59_1_fu_413_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln59_1_fu_417_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln_fu_429_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln57_1_fu_440_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln57_2_fu_451_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln57_2_fu_447_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln57_5_fu_458_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln57_fu_462_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln57_1_fu_436_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_549_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln57_8_fu_474_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln57_1_fu_468_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln57_2_fu_477_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_1_fu_493_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_558_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_2_fu_498_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln58_2_fu_498_p2 : signal is "no";
    signal sext_ln59_1_fu_513_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_567_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln59_2_fu_516_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln59_2_fu_516_p2 : signal is "no";
    signal grp_fu_549_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_549_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_549_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_558_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_558_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_567_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_567_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_549_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_549_p20 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component yuv_filter_mul_8ns_8s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component yuv_filter_mac_muladd_8ns_5ns_9ns_13_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component yuv_filter_mac_muladd_8ns_7s_16s_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component yuv_filter_mac_muladd_8ns_7ns_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component yuv_filter_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_8ns_8s_16_1_1_U1 : component yuv_filter_mul_8ns_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln58_1_fu_352_p0,
        din1 => mul_ln58_1_fu_352_p1,
        dout => mul_ln58_1_fu_352_p2);

    mul_8ns_8s_16_1_1_U2 : component yuv_filter_mul_8ns_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln59_1_fu_390_p0,
        din1 => mul_ln59_1_fu_390_p1,
        dout => mul_ln59_1_fu_390_p2);

    mac_muladd_8ns_5ns_9ns_13_4_1_U3 : component yuv_filter_mac_muladd_8ns_5ns_9ns_13_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 5,
        din2_WIDTH => 9,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_549_p0,
        din1 => grp_fu_549_p1,
        din2 => grp_fu_549_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_549_p3);

    mac_muladd_8ns_7s_16s_16_4_1_U4 : component yuv_filter_mac_muladd_8ns_7s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 7,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_558_p0,
        din1 => grp_fu_558_p1,
        din2 => mul_ln58_1_fu_352_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_558_p3);

    mac_muladd_8ns_7ns_16ns_16_4_1_U5 : component yuv_filter_mac_muladd_8ns_7ns_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 7,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_567_p0,
        din1 => grp_fu_567_p1,
        din2 => mul_ln59_1_fu_390_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_567_p3);

    flow_control_loop_pipe_sequential_init_U : component yuv_filter_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_108 <= ap_const_lv32_0;
                elsif (((icmp_ln49_fu_220_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_108 <= add_ln49_fu_225_p2;
                end if;
            end if; 
        end if;
    end process;

    x_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    x_fu_104 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    x_fu_104 <= select_ln34_1_fu_272_p3;
                end if;
            end if; 
        end if;
    end process;

    y_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_100 <= ap_const_lv16_0;
                elsif (((icmp_ln49_fu_220_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    y_fu_100 <= y_3_fu_247_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                B_reg_655 <= in_channels_ch3_q0;
                B_reg_655_pp0_iter5_reg <= B_reg_655;
                G_reg_673 <= in_channels_ch2_q0;
                G_reg_673_pp0_iter6_reg <= G_reg_673;
                R_reg_649 <= in_channels_ch1_q0;
                R_reg_649_pp0_iter5_reg <= R_reg_649;
                R_reg_649_pp0_iter6_reg <= R_reg_649_pp0_iter5_reg;
                add_ln54_1_reg_621 <= add_ln54_1_fu_312_p2;
                    add_ln59_1_reg_700(13 downto 1) <= add_ln59_1_fu_423_p2(13 downto 1);
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                    sub_ln58_reg_690(15 downto 4) <= sub_ln58_fu_384_p2(15 downto 4);
                trunc_ln1_reg_710 <= add_ln58_2_fu_498_p2(15 downto 8);
                trunc_ln2_reg_715 <= add_ln59_2_fu_516_p2(15 downto 8);
                trunc_ln_reg_705 <= add_ln57_2_fu_477_p2(15 downto 8);
                    zext_ln54_1_reg_626(21 downto 0) <= zext_ln54_1_fu_323_p1(21 downto 0);
                    zext_ln54_1_reg_626_pp0_iter4_reg(21 downto 0) <= zext_ln54_1_reg_626(21 downto 0);
                    zext_ln54_1_reg_626_pp0_iter5_reg(21 downto 0) <= zext_ln54_1_reg_626_pp0_iter4_reg(21 downto 0);
                    zext_ln54_1_reg_626_pp0_iter6_reg(21 downto 0) <= zext_ln54_1_reg_626_pp0_iter5_reg(21 downto 0);
                    zext_ln54_1_reg_626_pp0_iter7_reg(21 downto 0) <= zext_ln54_1_reg_626_pp0_iter6_reg(21 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_fu_220_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln52_reg_611 <= icmp_ln52_fu_234_p2;
                select_ln34_reg_616 <= select_ln34_fu_239_p3;
            end if;
        end if;
    end process;
    zext_ln54_1_reg_626(63 downto 22) <= "000000000000000000000000000000000000000000";
    zext_ln54_1_reg_626_pp0_iter4_reg(63 downto 22) <= "000000000000000000000000000000000000000000";
    zext_ln54_1_reg_626_pp0_iter5_reg(63 downto 22) <= "000000000000000000000000000000000000000000";
    zext_ln54_1_reg_626_pp0_iter6_reg(63 downto 22) <= "000000000000000000000000000000000000000000";
    zext_ln54_1_reg_626_pp0_iter7_reg(63 downto 22) <= "000000000000000000000000000000000000000000";
    sub_ln58_reg_690(3 downto 0) <= "0000";
    add_ln59_1_reg_700(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln49_fu_225_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_108) + unsigned(ap_const_lv32_1));
    add_ln54_1_fu_312_p2 <= std_logic_vector(unsigned(add_ln54_fu_303_p2) + unsigned(zext_ln54_fu_309_p1));
    add_ln54_fu_303_p2 <= std_logic_vector(unsigned(tmp_cast_fu_283_p3) + unsigned(tmp_1_cast_fu_295_p3));
    add_ln57_1_fu_468_p2 <= std_logic_vector(unsigned(add_ln57_fu_462_p2) + unsigned(zext_ln57_1_fu_436_p1));
    add_ln57_2_fu_477_p2 <= std_logic_vector(unsigned(zext_ln57_8_fu_474_p1) + unsigned(add_ln57_1_fu_468_p2));
    add_ln57_3_fu_342_p2 <= std_logic_vector(unsigned(zext_ln57_4_fu_339_p1) + unsigned(ap_const_lv9_80));
    add_ln57_fu_462_p2 <= std_logic_vector(unsigned(zext_ln57_2_fu_447_p1) + unsigned(zext_ln57_5_fu_458_p1));
    add_ln58_1_fu_493_p2 <= std_logic_vector(unsigned(sub_ln58_reg_690) + unsigned(ap_const_lv16_80));
    add_ln58_2_fu_498_p2 <= std_logic_vector(unsigned(add_ln58_1_fu_493_p2) + unsigned(grp_fu_558_p3));
    add_ln59_1_fu_423_p2 <= std_logic_vector(unsigned(sub_ln59_1_fu_417_p2) + unsigned(ap_const_lv14_80));
    add_ln59_2_fu_516_p2 <= std_logic_vector(signed(sext_ln59_1_fu_513_p1) + signed(grp_fu_567_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln49_fu_220_p2)
    begin
        if (((icmp_ln49_fu_220_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_549_p0 <= grp_fu_549_p00(8 - 1 downto 0);
    grp_fu_549_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_channels_ch3_q0),13));
    grp_fu_549_p1 <= ap_const_lv13_19(5 - 1 downto 0);
    grp_fu_549_p2 <= grp_fu_549_p20(9 - 1 downto 0);
    grp_fu_549_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln57_3_fu_342_p2),13));
    grp_fu_558_p0 <= zext_ln57_fu_328_p1(8 - 1 downto 0);
    grp_fu_558_p1 <= ap_const_lv15_7FDA(7 - 1 downto 0);
    grp_fu_567_p0 <= zext_ln57_fu_328_p1(8 - 1 downto 0);
    grp_fu_567_p1 <= ap_const_lv15_7A(7 - 1 downto 0);
    icmp_ln49_fu_220_p2 <= "1" when (indvar_flatten_fu_108 = mul_ln49) else "0";
    icmp_ln52_fu_234_p2 <= "1" when (y_fu_100 = height) else "0";
    in_channels_ch1_address0 <= zext_ln54_1_fu_323_p1(22 - 1 downto 0);

    in_channels_ch1_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            in_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch2_address0 <= zext_ln54_1_reg_626(22 - 1 downto 0);

    in_channels_ch2_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            in_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch3_address0 <= zext_ln54_1_fu_323_p1(22 - 1 downto 0);

    in_channels_ch3_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            in_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln58_1_fu_352_p0 <= zext_ln57_3_fu_336_p1(8 - 1 downto 0);
    mul_ln58_1_fu_352_p1 <= ap_const_lv16_FFB6(8 - 1 downto 0);
    mul_ln59_1_fu_390_p0 <= zext_ln57_3_fu_336_p1(8 - 1 downto 0);
    mul_ln59_1_fu_390_p1 <= ap_const_lv16_FFA2(8 - 1 downto 0);
    p_yuv_channels_ch1_address0 <= zext_ln54_1_reg_626_pp0_iter7_reg(22 - 1 downto 0);

    p_yuv_channels_ch1_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            p_yuv_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            p_yuv_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_yuv_channels_ch1_d0 <= std_logic_vector(unsigned(trunc_ln_reg_705) + unsigned(ap_const_lv8_10));

    p_yuv_channels_ch1_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            p_yuv_channels_ch1_we0 <= ap_const_logic_1;
        else 
            p_yuv_channels_ch1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_yuv_channels_ch2_address0 <= zext_ln54_1_reg_626_pp0_iter7_reg(22 - 1 downto 0);

    p_yuv_channels_ch2_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            p_yuv_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            p_yuv_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_yuv_channels_ch2_d0 <= (trunc_ln1_reg_710 xor ap_const_lv8_80);

    p_yuv_channels_ch2_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            p_yuv_channels_ch2_we0 <= ap_const_logic_1;
        else 
            p_yuv_channels_ch2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_yuv_channels_ch3_address0 <= zext_ln54_1_reg_626_pp0_iter7_reg(22 - 1 downto 0);

    p_yuv_channels_ch3_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            p_yuv_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            p_yuv_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_yuv_channels_ch3_d0 <= (trunc_ln2_reg_715 xor ap_const_lv8_80);

    p_yuv_channels_ch3_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            p_yuv_channels_ch3_we0 <= ap_const_logic_1;
        else 
            p_yuv_channels_ch3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln34_1_fu_272_p3 <= 
        x_6_fu_266_p2 when (icmp_ln52_reg_611(0) = '1') else 
        x_fu_104;
    select_ln34_fu_239_p3 <= 
        ap_const_lv16_0 when (icmp_ln52_fu_234_p2(0) = '1') else 
        y_fu_100;
        sext_ln59_1_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln59_1_reg_700),16));

        sext_ln59_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln59_fu_396_p2),14));

    shl_ln1_fu_358_p3 <= (B_reg_655_pp0_iter5_reg & ap_const_lv7_0);
    shl_ln2_fu_406_p3 <= (B_reg_655_pp0_iter5_reg & ap_const_lv1_0);
    shl_ln57_1_fu_440_p3 <= (R_reg_649_pp0_iter6_reg & ap_const_lv1_0);
    shl_ln57_2_fu_451_p3 <= (G_reg_673_pp0_iter6_reg & ap_const_lv7_0);
    shl_ln58_1_fu_369_p3 <= (B_reg_655_pp0_iter5_reg & ap_const_lv4_0);
    shl_ln_fu_429_p3 <= (R_reg_649_pp0_iter6_reg & ap_const_lv6_0);
    sub_ln58_fu_384_p2 <= std_logic_vector(unsigned(zext_ln58_fu_365_p1) - unsigned(zext_ln58_2_fu_380_p1));
    sub_ln59_1_fu_417_p2 <= std_logic_vector(signed(sext_ln59_fu_402_p1) - signed(zext_ln59_1_fu_413_p1));
    sub_ln59_fu_396_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(zext_ln58_1_fu_376_p1));
    tmp_1_cast_fu_295_p3 <= (trunc_ln54_1_fu_291_p1 & ap_const_lv8_0);
    tmp_cast_fu_283_p3 <= (trunc_ln54_fu_279_p1 & ap_const_lv10_0);
    trunc_ln54_1_fu_291_p1 <= select_ln34_1_fu_272_p3(14 - 1 downto 0);
    trunc_ln54_fu_279_p1 <= select_ln34_1_fu_272_p3(12 - 1 downto 0);
    x_6_fu_266_p2 <= std_logic_vector(unsigned(x_fu_104) + unsigned(ap_const_lv16_1));
    y_3_fu_247_p2 <= std_logic_vector(unsigned(select_ln34_fu_239_p3) + unsigned(ap_const_lv16_1));
    zext_ln54_1_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_1_reg_621),64));
    zext_ln54_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_reg_616),22));
    zext_ln57_1_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_429_p3),16));
    zext_ln57_2_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln57_1_fu_440_p3),16));
    zext_ln57_3_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(G_reg_673),16));
    zext_ln57_4_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(G_reg_673),9));
    zext_ln57_5_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln57_2_fu_451_p3),16));
    zext_ln57_8_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_549_p3),16));
    zext_ln57_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_channels_ch1_q0),15));
    zext_ln58_1_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln58_1_fu_369_p3),13));
    zext_ln58_2_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln58_1_fu_369_p3),16));
    zext_ln58_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_358_p3),16));
    zext_ln59_1_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_406_p3),14));
end behav;

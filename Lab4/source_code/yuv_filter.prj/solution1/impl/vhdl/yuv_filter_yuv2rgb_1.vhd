-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
-- Version: 2021.1.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv_filter_yuv2rgb_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce0 : OUT STD_LOGIC;
    in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce0 : OUT STD_LOGIC;
    in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce0 : OUT STD_LOGIC;
    in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch1_ce0 : OUT STD_LOGIC;
    out_channels_ch1_we0 : OUT STD_LOGIC;
    out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch2_ce0 : OUT STD_LOGIC;
    out_channels_ch2_we0 : OUT STD_LOGIC;
    out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch3_ce0 : OUT STD_LOGIC;
    out_channels_ch3_we0 : OUT STD_LOGIC;
    out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of yuv_filter_yuv2rgb_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_1F0 : STD_LOGIC_VECTOR (8 downto 0) := "111110000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv18_12A : STD_LOGIC_VECTOR (17 downto 0) := "000000000100101010";
    constant ap_const_lv18_80 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_const_lv18_199 : STD_LOGIC_VECTOR (17 downto 0) := "000000000110011001";
    constant ap_const_lv17_1FF30 : STD_LOGIC_VECTOR (16 downto 0) := "11111111100110000";
    constant ap_const_lv16_FF9C : STD_LOGIC_VECTOR (15 downto 0) := "1111111110011100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal x_4_fu_232_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_4_reg_604 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln94_fu_262_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln94_reg_609 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln89_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_2_fu_283_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_2_reg_617 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln94_1_fu_298_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln94_1_reg_622 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln92_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal D_fu_335_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal D_reg_661 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_544_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln100_reg_672 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal R_fu_390_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal R_reg_679 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_563_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal B_fu_483_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_reg_689 : STD_LOGIC_VECTOR (7 downto 0);
    signal G_fu_536_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal G_reg_694 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal y_reg_208 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal x_fu_114 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln94_fu_238_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln94_1_fu_250_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_cast_fu_242_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_2_cast_fu_254_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln94_fu_289_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln94_1_fu_293_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln97_fu_307_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal C_fu_311_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal E_fu_321_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_552_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_fu_345_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln100_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_360_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln100_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln100_fu_376_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln_fu_367_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_398_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln102_1_fu_409_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln102_2_fu_416_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln102_1_fu_420_p2 : STD_LOGIC_VECTOR (17 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln102_1_fu_420_p2 : signal is "no";
    signal sext_ln102_3_fu_425_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln102_1_fu_405_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln102_fu_429_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_4_fu_435_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln102_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_451_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln102_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln102_fu_469_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln4_fu_459_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_571_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_2_fu_491_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln101_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_506_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln101_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln101_fu_522_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln3_fu_513_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_544_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_544_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_552_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_563_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_571_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component yuv_filter_mac_muladd_9s_9ns_8ns_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component yuv_filter_mac_muladd_8s_9ns_18s_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component yuv_filter_mac_muladd_8s_9s_18s_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component yuv_filter_mac_muladd_8s_8s_18s_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    mac_muladd_9s_9ns_8ns_18_4_1_U18 : component yuv_filter_mac_muladd_9s_9ns_8ns_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => C_fu_311_p2,
        din1 => grp_fu_544_p1,
        din2 => grp_fu_544_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_544_p3);

    mac_muladd_8s_9ns_18s_18_4_1_U19 : component yuv_filter_mac_muladd_8s_9ns_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => E_fu_321_p2,
        din1 => grp_fu_552_p1,
        din2 => grp_fu_544_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_552_p3);

    mac_muladd_8s_9s_18s_18_4_1_U20 : component yuv_filter_mac_muladd_8s_9s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => E_fu_321_p2,
        din1 => grp_fu_563_p1,
        din2 => grp_fu_544_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_563_p3);

    mac_muladd_8s_8s_18s_18_4_1_U21 : component yuv_filter_mac_muladd_8s_8s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => D_fu_335_p2,
        din1 => grp_fu_571_p1,
        din2 => grp_fu_563_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_571_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    x_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                x_fu_114 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln92_fu_278_p2 = ap_const_lv1_1))) then 
                x_fu_114 <= x_4_reg_604;
            end if; 
        end if;
    end process;

    y_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                y_reg_208 <= y_2_reg_617;
            elsif (((icmp_ln89_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                y_reg_208 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                B_reg_689 <= B_fu_483_p3;
                R_reg_679 <= R_fu_390_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                D_reg_661 <= D_fu_335_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                G_reg_694 <= G_fu_536_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln100_reg_672 <= grp_fu_544_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln89_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    add_ln94_reg_609(21 downto 8) <= add_ln94_fu_262_p2(21 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                x_4_reg_604 <= x_4_fu_232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                y_2_reg_617 <= y_2_fu_283_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln92_fu_278_p2 = ap_const_lv1_0))) then
                    zext_ln94_1_reg_622(21 downto 0) <= zext_ln94_1_fu_298_p1(21 downto 0);
            end if;
        end if;
    end process;
    add_ln94_reg_609(7 downto 0) <= "00000000";
    zext_ln94_1_reg_622(63 downto 22) <= "000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln89_fu_227_p2, ap_CS_fsm_state3, icmp_ln92_fu_278_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln89_fu_227_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln92_fu_278_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    B_fu_483_p3 <= 
        select_ln102_fu_469_p3 when (or_ln102_fu_477_p2(0) = '1') else 
        trunc_ln4_fu_459_p4;
    C_fu_311_p2 <= std_logic_vector(unsigned(zext_ln97_fu_307_p1) + unsigned(ap_const_lv9_1F0));
    D_fu_335_p2 <= (in_channels_ch2_q0 xor ap_const_lv8_80);
    E_fu_321_p2 <= (in_channels_ch3_q0 xor ap_const_lv8_80);
    G_fu_536_p3 <= 
        select_ln101_fu_522_p3 when (or_ln101_fu_530_p2(0) = '1') else 
        trunc_ln3_fu_513_p4;
    R_fu_390_p3 <= 
        select_ln100_fu_376_p3 when (or_ln100_fu_384_p2(0) = '1') else 
        trunc_ln_fu_367_p4;
    add_ln102_1_fu_420_p2 <= std_logic_vector(signed(sext_ln102_2_fu_416_p1) + signed(add_ln100_reg_672));
    add_ln102_fu_429_p2 <= std_logic_vector(signed(sext_ln102_3_fu_425_p1) + signed(sext_ln102_1_fu_405_p1));
    add_ln94_1_fu_293_p2 <= std_logic_vector(unsigned(add_ln94_reg_609) + unsigned(zext_ln94_fu_289_p1));
    add_ln94_fu_262_p2 <= std_logic_vector(unsigned(tmp_cast_fu_242_p3) + unsigned(tmp_2_cast_fu_254_p3));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln89_fu_227_p2)
    begin
        if ((((icmp_ln89_fu_227_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln89_fu_227_p2)
    begin
        if (((icmp_ln89_fu_227_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= p_read;
    ap_return_1 <= p_read1;
    grp_fu_544_p1 <= ap_const_lv18_12A(9 - 1 downto 0);
    grp_fu_544_p2 <= ap_const_lv18_80(8 - 1 downto 0);
    grp_fu_552_p1 <= ap_const_lv18_199(9 - 1 downto 0);
    grp_fu_563_p1 <= ap_const_lv17_1FF30(9 - 1 downto 0);
    grp_fu_571_p1 <= ap_const_lv16_FF9C(8 - 1 downto 0);
    icmp_ln100_fu_354_p2 <= "1" when (tmp_fu_345_p4 = ap_const_lv2_1) else "0";
    icmp_ln101_fu_500_p2 <= "1" when (tmp_2_fu_491_p4 = ap_const_lv2_1) else "0";
    icmp_ln102_fu_445_p2 <= "1" when (signed(tmp_4_fu_435_p4) > signed(ap_const_lv3_0)) else "0";
    icmp_ln89_fu_227_p2 <= "1" when (x_fu_114 = p_read) else "0";
    icmp_ln92_fu_278_p2 <= "1" when (y_reg_208 = p_read1) else "0";
    in_channels_ch1_address0 <= zext_ln94_1_fu_298_p1(22 - 1 downto 0);

    in_channels_ch1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch2_address0 <= zext_ln94_1_reg_622(22 - 1 downto 0);

    in_channels_ch2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            in_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch3_address0 <= zext_ln94_1_reg_622(22 - 1 downto 0);

    in_channels_ch3_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln100_fu_384_p2 <= (tmp_1_fu_360_p3 or icmp_ln100_fu_354_p2);
    or_ln101_fu_530_p2 <= (tmp_3_fu_506_p3 or icmp_ln101_fu_500_p2);
    or_ln102_fu_477_p2 <= (tmp_5_fu_451_p3 or icmp_ln102_fu_445_p2);
    out_channels_ch1_address0 <= zext_ln94_1_reg_622(22 - 1 downto 0);

    out_channels_ch1_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            out_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_d0 <= R_reg_679;

    out_channels_ch1_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            out_channels_ch1_we0 <= ap_const_logic_1;
        else 
            out_channels_ch1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_address0 <= zext_ln94_1_reg_622(22 - 1 downto 0);

    out_channels_ch2_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            out_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_d0 <= G_reg_694;

    out_channels_ch2_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            out_channels_ch2_we0 <= ap_const_logic_1;
        else 
            out_channels_ch2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_address0 <= zext_ln94_1_reg_622(22 - 1 downto 0);

    out_channels_ch3_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            out_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_d0 <= B_reg_689;

    out_channels_ch3_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            out_channels_ch3_we0 <= ap_const_logic_1;
        else 
            out_channels_ch3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln100_fu_376_p3 <= 
        ap_const_lv8_FF when (icmp_ln100_fu_354_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln101_fu_522_p3 <= 
        ap_const_lv8_FF when (icmp_ln101_fu_500_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln102_fu_469_p3 <= 
        ap_const_lv8_FF when (icmp_ln102_fu_445_p2(0) = '1') else 
        ap_const_lv8_0;
        sext_ln102_1_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_398_p3),19));

        sext_ln102_2_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln102_1_fu_409_p3),18));

        sext_ln102_3_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln102_1_fu_420_p2),19));

    shl_ln102_1_fu_409_p3 <= (D_reg_661 & ap_const_lv2_0);
    shl_ln_fu_398_p3 <= (D_reg_661 & ap_const_lv9_0);
    tmp_1_fu_360_p3 <= grp_fu_552_p3(17 downto 17);
    tmp_2_cast_fu_254_p3 <= (trunc_ln94_1_fu_250_p1 & ap_const_lv8_0);
    tmp_2_fu_491_p4 <= grp_fu_571_p3(17 downto 16);
    tmp_3_fu_506_p3 <= grp_fu_571_p3(17 downto 17);
    tmp_4_fu_435_p4 <= add_ln102_fu_429_p2(18 downto 16);
    tmp_5_fu_451_p3 <= add_ln102_fu_429_p2(18 downto 18);
    tmp_cast_fu_242_p3 <= (trunc_ln94_fu_238_p1 & ap_const_lv10_0);
    tmp_fu_345_p4 <= grp_fu_552_p3(17 downto 16);
    trunc_ln3_fu_513_p4 <= grp_fu_571_p3(15 downto 8);
    trunc_ln4_fu_459_p4 <= add_ln102_fu_429_p2(15 downto 8);
    trunc_ln94_1_fu_250_p1 <= x_fu_114(14 - 1 downto 0);
    trunc_ln94_fu_238_p1 <= x_fu_114(12 - 1 downto 0);
    trunc_ln_fu_367_p4 <= grp_fu_552_p3(15 downto 8);
    x_4_fu_232_p2 <= std_logic_vector(unsigned(x_fu_114) + unsigned(ap_const_lv16_1));
    y_2_fu_283_p2 <= std_logic_vector(unsigned(y_reg_208) + unsigned(ap_const_lv16_1));
    zext_ln94_1_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln94_1_fu_293_p2),64));
    zext_ln94_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_reg_208),22));
    zext_ln97_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_channels_ch1_q0),9));
end behav;

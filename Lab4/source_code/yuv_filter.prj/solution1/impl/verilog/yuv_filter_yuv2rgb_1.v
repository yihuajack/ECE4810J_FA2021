// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
// Version: 2021.1.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module yuv_filter_yuv2rgb_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_channels_ch1_address0,
        in_channels_ch1_ce0,
        in_channels_ch1_q0,
        in_channels_ch2_address0,
        in_channels_ch2_ce0,
        in_channels_ch2_q0,
        in_channels_ch3_address0,
        in_channels_ch3_ce0,
        in_channels_ch3_q0,
        p_read,
        p_read1,
        out_channels_ch1_address0,
        out_channels_ch1_ce0,
        out_channels_ch1_we0,
        out_channels_ch1_d0,
        out_channels_ch2_address0,
        out_channels_ch2_ce0,
        out_channels_ch2_we0,
        out_channels_ch2_d0,
        out_channels_ch3_address0,
        out_channels_ch3_ce0,
        out_channels_ch3_we0,
        out_channels_ch3_d0,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [21:0] in_channels_ch1_address0;
output   in_channels_ch1_ce0;
input  [7:0] in_channels_ch1_q0;
output  [21:0] in_channels_ch2_address0;
output   in_channels_ch2_ce0;
input  [7:0] in_channels_ch2_q0;
output  [21:0] in_channels_ch3_address0;
output   in_channels_ch3_ce0;
input  [7:0] in_channels_ch3_q0;
input  [15:0] p_read;
input  [15:0] p_read1;
output  [21:0] out_channels_ch1_address0;
output   out_channels_ch1_ce0;
output   out_channels_ch1_we0;
output  [7:0] out_channels_ch1_d0;
output  [21:0] out_channels_ch2_address0;
output   out_channels_ch2_ce0;
output   out_channels_ch2_we0;
output  [7:0] out_channels_ch2_d0;
output  [21:0] out_channels_ch3_address0;
output   out_channels_ch3_ce0;
output   out_channels_ch3_we0;
output  [7:0] out_channels_ch3_d0;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_channels_ch1_ce0;
reg in_channels_ch2_ce0;
reg in_channels_ch3_ce0;
reg out_channels_ch1_ce0;
reg out_channels_ch1_we0;
reg out_channels_ch2_ce0;
reg out_channels_ch2_we0;
reg out_channels_ch3_ce0;
reg out_channels_ch3_we0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [15:0] x_4_fu_232_p2;
reg   [15:0] x_4_reg_604;
wire    ap_CS_fsm_state2;
wire   [21:0] add_ln94_fu_262_p2;
reg   [21:0] add_ln94_reg_609;
wire   [0:0] icmp_ln89_fu_227_p2;
wire   [15:0] y_2_fu_283_p2;
reg   [15:0] y_2_reg_617;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln94_1_fu_298_p1;
reg   [63:0] zext_ln94_1_reg_622;
wire   [0:0] icmp_ln92_fu_278_p2;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire  signed [7:0] D_fu_335_p2;
reg  signed [7:0] D_reg_661;
wire    ap_CS_fsm_state6;
wire  signed [17:0] grp_fu_544_p3;
reg  signed [17:0] add_ln100_reg_672;
wire    ap_CS_fsm_state7;
wire   [7:0] R_fu_390_p3;
reg   [7:0] R_reg_679;
wire    ap_CS_fsm_state8;
wire  signed [17:0] grp_fu_563_p3;
wire   [7:0] B_fu_483_p3;
reg   [7:0] B_reg_689;
wire   [7:0] G_fu_536_p3;
reg   [7:0] G_reg_694;
wire    ap_CS_fsm_state9;
reg   [15:0] y_reg_208;
wire    ap_CS_fsm_state10;
reg   [15:0] x_fu_114;
wire   [11:0] trunc_ln94_fu_238_p1;
wire   [13:0] trunc_ln94_1_fu_250_p1;
wire   [21:0] tmp_cast_fu_242_p3;
wire   [21:0] tmp_2_cast_fu_254_p3;
wire   [21:0] zext_ln94_fu_289_p1;
wire   [21:0] add_ln94_1_fu_293_p2;
wire   [8:0] zext_ln97_fu_307_p1;
wire  signed [8:0] C_fu_311_p2;
wire  signed [7:0] E_fu_321_p2;
wire  signed [17:0] grp_fu_552_p3;
wire   [1:0] tmp_fu_345_p4;
wire   [0:0] icmp_ln100_fu_354_p2;
wire   [0:0] tmp_1_fu_360_p3;
wire   [0:0] or_ln100_fu_384_p2;
wire   [7:0] select_ln100_fu_376_p3;
wire   [7:0] trunc_ln_fu_367_p4;
wire   [16:0] shl_ln_fu_398_p3;
wire   [9:0] shl_ln102_1_fu_409_p3;
wire  signed [17:0] sext_ln102_2_fu_416_p1;
(* use_dsp48 = "no" *) wire   [17:0] add_ln102_1_fu_420_p2;
wire  signed [18:0] sext_ln102_3_fu_425_p1;
wire  signed [18:0] sext_ln102_1_fu_405_p1;
wire   [18:0] add_ln102_fu_429_p2;
wire   [2:0] tmp_4_fu_435_p4;
wire   [0:0] icmp_ln102_fu_445_p2;
wire   [0:0] tmp_5_fu_451_p3;
wire   [0:0] or_ln102_fu_477_p2;
wire   [7:0] select_ln102_fu_469_p3;
wire   [7:0] trunc_ln4_fu_459_p4;
wire  signed [17:0] grp_fu_571_p3;
wire   [1:0] tmp_2_fu_491_p4;
wire   [0:0] icmp_ln101_fu_500_p2;
wire   [0:0] tmp_3_fu_506_p3;
wire   [0:0] or_ln101_fu_530_p2;
wire   [7:0] select_ln101_fu_522_p3;
wire   [7:0] trunc_ln3_fu_513_p4;
wire   [8:0] grp_fu_544_p1;
wire   [7:0] grp_fu_544_p2;
wire   [8:0] grp_fu_552_p1;
wire  signed [8:0] grp_fu_563_p1;
wire  signed [7:0] grp_fu_571_p1;
reg   [9:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

yuv_filter_mac_muladd_9s_9ns_8ns_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
mac_muladd_9s_9ns_8ns_18_4_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(C_fu_311_p2),
    .din1(grp_fu_544_p1),
    .din2(grp_fu_544_p2),
    .ce(1'b1),
    .dout(grp_fu_544_p3)
);

yuv_filter_mac_muladd_8s_9ns_18s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
mac_muladd_8s_9ns_18s_18_4_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(E_fu_321_p2),
    .din1(grp_fu_552_p1),
    .din2(grp_fu_544_p3),
    .ce(1'b1),
    .dout(grp_fu_552_p3)
);

yuv_filter_mac_muladd_8s_9s_18s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
mac_muladd_8s_9s_18s_18_4_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(E_fu_321_p2),
    .din1(grp_fu_563_p1),
    .din2(grp_fu_544_p3),
    .ce(1'b1),
    .dout(grp_fu_563_p3)
);

yuv_filter_mac_muladd_8s_8s_18s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
mac_muladd_8s_8s_18s_18_4_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(D_fu_335_p2),
    .din1(grp_fu_571_p1),
    .din2(grp_fu_563_p3),
    .ce(1'b1),
    .dout(grp_fu_571_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        x_fu_114 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln92_fu_278_p2 == 1'd1))) begin
        x_fu_114 <= x_4_reg_604;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        y_reg_208 <= y_2_reg_617;
    end else if (((icmp_ln89_fu_227_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        y_reg_208 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        B_reg_689 <= B_fu_483_p3;
        R_reg_679 <= R_fu_390_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        D_reg_661 <= D_fu_335_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        G_reg_694 <= G_fu_536_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln100_reg_672 <= grp_fu_544_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln89_fu_227_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln94_reg_609[21 : 8] <= add_ln94_fu_262_p2[21 : 8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_4_reg_604 <= x_4_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        y_2_reg_617 <= y_2_fu_283_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln92_fu_278_p2 == 1'd0))) begin
        zext_ln94_1_reg_622[21 : 0] <= zext_ln94_1_fu_298_p1[21 : 0];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((icmp_ln89_fu_227_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln89_fu_227_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_channels_ch1_ce0 = 1'b1;
    end else begin
        in_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        in_channels_ch2_ce0 = 1'b1;
    end else begin
        in_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_channels_ch3_ce0 = 1'b1;
    end else begin
        in_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        out_channels_ch1_ce0 = 1'b1;
    end else begin
        out_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        out_channels_ch1_we0 = 1'b1;
    end else begin
        out_channels_ch1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        out_channels_ch2_ce0 = 1'b1;
    end else begin
        out_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        out_channels_ch2_we0 = 1'b1;
    end else begin
        out_channels_ch2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        out_channels_ch3_ce0 = 1'b1;
    end else begin
        out_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        out_channels_ch3_we0 = 1'b1;
    end else begin
        out_channels_ch3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln89_fu_227_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln92_fu_278_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_fu_483_p3 = ((or_ln102_fu_477_p2[0:0] == 1'b1) ? select_ln102_fu_469_p3 : trunc_ln4_fu_459_p4);

assign C_fu_311_p2 = ($signed(zext_ln97_fu_307_p1) + $signed(9'd496));

assign D_fu_335_p2 = (in_channels_ch2_q0 ^ 8'd128);

assign E_fu_321_p2 = (in_channels_ch3_q0 ^ 8'd128);

assign G_fu_536_p3 = ((or_ln101_fu_530_p2[0:0] == 1'b1) ? select_ln101_fu_522_p3 : trunc_ln3_fu_513_p4);

assign R_fu_390_p3 = ((or_ln100_fu_384_p2[0:0] == 1'b1) ? select_ln100_fu_376_p3 : trunc_ln_fu_367_p4);

assign add_ln102_1_fu_420_p2 = ($signed(sext_ln102_2_fu_416_p1) + $signed(add_ln100_reg_672));

assign add_ln102_fu_429_p2 = ($signed(sext_ln102_3_fu_425_p1) + $signed(sext_ln102_1_fu_405_p1));

assign add_ln94_1_fu_293_p2 = (add_ln94_reg_609 + zext_ln94_fu_289_p1);

assign add_ln94_fu_262_p2 = (tmp_cast_fu_242_p3 + tmp_2_cast_fu_254_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return_0 = p_read;

assign ap_return_1 = p_read1;

assign grp_fu_544_p1 = 18'd298;

assign grp_fu_544_p2 = 18'd128;

assign grp_fu_552_p1 = 18'd409;

assign grp_fu_563_p1 = 17'd130864;

assign grp_fu_571_p1 = 16'd65436;

assign icmp_ln100_fu_354_p2 = ((tmp_fu_345_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln101_fu_500_p2 = ((tmp_2_fu_491_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln102_fu_445_p2 = (($signed(tmp_4_fu_435_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign icmp_ln89_fu_227_p2 = ((x_fu_114 == p_read) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_278_p2 = ((y_reg_208 == p_read1) ? 1'b1 : 1'b0);

assign in_channels_ch1_address0 = zext_ln94_1_fu_298_p1;

assign in_channels_ch2_address0 = zext_ln94_1_reg_622;

assign in_channels_ch3_address0 = zext_ln94_1_reg_622;

assign or_ln100_fu_384_p2 = (tmp_1_fu_360_p3 | icmp_ln100_fu_354_p2);

assign or_ln101_fu_530_p2 = (tmp_3_fu_506_p3 | icmp_ln101_fu_500_p2);

assign or_ln102_fu_477_p2 = (tmp_5_fu_451_p3 | icmp_ln102_fu_445_p2);

assign out_channels_ch1_address0 = zext_ln94_1_reg_622;

assign out_channels_ch1_d0 = R_reg_679;

assign out_channels_ch2_address0 = zext_ln94_1_reg_622;

assign out_channels_ch2_d0 = G_reg_694;

assign out_channels_ch3_address0 = zext_ln94_1_reg_622;

assign out_channels_ch3_d0 = B_reg_689;

assign select_ln100_fu_376_p3 = ((icmp_ln100_fu_354_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln101_fu_522_p3 = ((icmp_ln101_fu_500_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln102_fu_469_p3 = ((icmp_ln102_fu_445_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign sext_ln102_1_fu_405_p1 = $signed(shl_ln_fu_398_p3);

assign sext_ln102_2_fu_416_p1 = $signed(shl_ln102_1_fu_409_p3);

assign sext_ln102_3_fu_425_p1 = $signed(add_ln102_1_fu_420_p2);

assign shl_ln102_1_fu_409_p3 = {{D_reg_661}, {2'd0}};

assign shl_ln_fu_398_p3 = {{D_reg_661}, {9'd0}};

assign tmp_1_fu_360_p3 = grp_fu_552_p3[32'd17];

assign tmp_2_cast_fu_254_p3 = {{trunc_ln94_1_fu_250_p1}, {8'd0}};

assign tmp_2_fu_491_p4 = {{grp_fu_571_p3[17:16]}};

assign tmp_3_fu_506_p3 = grp_fu_571_p3[32'd17];

assign tmp_4_fu_435_p4 = {{add_ln102_fu_429_p2[18:16]}};

assign tmp_5_fu_451_p3 = add_ln102_fu_429_p2[32'd18];

assign tmp_cast_fu_242_p3 = {{trunc_ln94_fu_238_p1}, {10'd0}};

assign tmp_fu_345_p4 = {{grp_fu_552_p3[17:16]}};

assign trunc_ln3_fu_513_p4 = {{grp_fu_571_p3[15:8]}};

assign trunc_ln4_fu_459_p4 = {{add_ln102_fu_429_p2[15:8]}};

assign trunc_ln94_1_fu_250_p1 = x_fu_114[13:0];

assign trunc_ln94_fu_238_p1 = x_fu_114[11:0];

assign trunc_ln_fu_367_p4 = {{grp_fu_552_p3[15:8]}};

assign x_4_fu_232_p2 = (x_fu_114 + 16'd1);

assign y_2_fu_283_p2 = (y_reg_208 + 16'd1);

assign zext_ln94_1_fu_298_p1 = add_ln94_1_fu_293_p2;

assign zext_ln94_fu_289_p1 = y_reg_208;

assign zext_ln97_fu_307_p1 = in_channels_ch1_q0;

always @ (posedge ap_clk) begin
    add_ln94_reg_609[7:0] <= 8'b00000000;
    zext_ln94_1_reg_622[63:22] <= 42'b000000000000000000000000000000000000000000;
end

endmodule //yuv_filter_yuv2rgb_1

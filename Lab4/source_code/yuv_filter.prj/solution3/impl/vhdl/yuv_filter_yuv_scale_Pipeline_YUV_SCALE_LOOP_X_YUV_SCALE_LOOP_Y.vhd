-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
-- Version: 2021.1.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv_filter_yuv_scale_Pipeline_YUV_SCALE_LOOP_X_YUV_SCALE_LOOP_Y is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    bound : IN STD_LOGIC_VECTOR (31 downto 0);
    in_height_read : IN STD_LOGIC_VECTOR (15 downto 0);
    in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce0 : OUT STD_LOGIC;
    in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce0 : OUT STD_LOGIC;
    in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce0 : OUT STD_LOGIC;
    in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch1_ce0 : OUT STD_LOGIC;
    out_channels_ch1_we0 : OUT STD_LOGIC;
    out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch2_ce0 : OUT STD_LOGIC;
    out_channels_ch2_we0 : OUT STD_LOGIC;
    out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch3_ce0 : OUT STD_LOGIC;
    out_channels_ch3_we0 : OUT STD_LOGIC;
    out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    zext_ln137 : IN STD_LOGIC_VECTOR (7 downto 0);
    zext_ln138 : IN STD_LOGIC_VECTOR (7 downto 0);
    zext_ln139 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of yuv_filter_yuv_scale_Pipeline_YUV_SCALE_LOOP_X_YUV_SCALE_LOOP_Y is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln129_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln139_cast_fu_192_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln139_cast_reg_416 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln138_cast_fu_196_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln138_cast_reg_421 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln137_cast_fu_200_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln137_cast_reg_426 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln132_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_reg_435 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln118_fu_241_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln118_reg_440 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln134_1_fu_314_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln134_1_reg_445 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln134_1_fu_325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln134_1_reg_450 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln134_1_reg_450_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln134_1_reg_450_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal Y_reg_472 : STD_LOGIC_VECTOR (7 downto 0);
    signal U_reg_477 : STD_LOGIC_VECTOR (7 downto 0);
    signal V_reg_482 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln_reg_487 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1_reg_492 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln2_reg_497 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal y_fu_72 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_1_fu_249_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal x_fu_76 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln118_1_fu_274_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln129_fu_227_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_2_fu_268_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln134_fu_281_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln134_1_fu_293_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_cast_fu_285_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_1_cast_fu_297_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln134_fu_305_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln134_fu_311_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln137_fu_334_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln137_fu_334_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln138_fu_342_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln138_fu_342_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln139_fu_350_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln139_fu_350_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln137_fu_334_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln138_fu_342_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln139_fu_350_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln137_fu_334_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln138_fu_342_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln139_fu_350_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component yuv_filter_mul_8ns_8ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component yuv_filter_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_8ns_8ns_15_1_1_U27 : component yuv_filter_mul_8ns_8ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln137_fu_334_p0,
        din1 => mul_ln137_fu_334_p1,
        dout => mul_ln137_fu_334_p2);

    mul_8ns_8ns_15_1_1_U28 : component yuv_filter_mul_8ns_8ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln138_fu_342_p0,
        din1 => mul_ln138_fu_342_p1,
        dout => mul_ln138_fu_342_p2);

    mul_8ns_8ns_15_1_1_U29 : component yuv_filter_mul_8ns_8ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln139_fu_350_p0,
        din1 => mul_ln139_fu_350_p1,
        dout => mul_ln139_fu_350_p2);

    flow_control_loop_pipe_sequential_init_U : component yuv_filter_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_80 <= ap_const_lv32_0;
                elsif (((icmp_ln129_fu_222_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_80 <= add_ln129_fu_227_p2;
                end if;
            end if; 
        end if;
    end process;

    x_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    x_fu_76 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    x_fu_76 <= select_ln118_1_fu_274_p3;
                end if;
            end if; 
        end if;
    end process;

    y_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_72 <= ap_const_lv16_0;
                elsif (((icmp_ln129_fu_222_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    y_fu_72 <= y_1_fu_249_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                U_reg_477 <= in_channels_ch2_q0;
                V_reg_482 <= in_channels_ch3_q0;
                Y_reg_472 <= in_channels_ch1_q0;
                add_ln134_1_reg_445 <= add_ln134_1_fu_314_p2;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                trunc_ln1_reg_492 <= mul_ln138_fu_342_p2(14 downto 7);
                trunc_ln2_reg_497 <= mul_ln139_fu_350_p2(14 downto 7);
                trunc_ln_reg_487 <= mul_ln137_fu_334_p2(14 downto 7);
                    zext_ln134_1_reg_450(21 downto 0) <= zext_ln134_1_fu_325_p1(21 downto 0);
                    zext_ln134_1_reg_450_pp0_iter4_reg(21 downto 0) <= zext_ln134_1_reg_450(21 downto 0);
                    zext_ln134_1_reg_450_pp0_iter5_reg(21 downto 0) <= zext_ln134_1_reg_450_pp0_iter4_reg(21 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                    zext_ln137_cast_reg_426(7 downto 0) <= zext_ln137_cast_fu_200_p1(7 downto 0);
                    zext_ln138_cast_reg_421(7 downto 0) <= zext_ln138_cast_fu_196_p1(7 downto 0);
                    zext_ln139_cast_reg_416(7 downto 0) <= zext_ln139_cast_fu_192_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_fu_222_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln132_reg_435 <= icmp_ln132_fu_236_p2;
                select_ln118_reg_440 <= select_ln118_fu_241_p3;
            end if;
        end if;
    end process;
    zext_ln139_cast_reg_416(14 downto 8) <= "0000000";
    zext_ln138_cast_reg_421(14 downto 8) <= "0000000";
    zext_ln137_cast_reg_426(14 downto 8) <= "0000000";
    zext_ln134_1_reg_450(63 downto 22) <= "000000000000000000000000000000000000000000";
    zext_ln134_1_reg_450_pp0_iter4_reg(63 downto 22) <= "000000000000000000000000000000000000000000";
    zext_ln134_1_reg_450_pp0_iter5_reg(63 downto 22) <= "000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln129_fu_227_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_80) + unsigned(ap_const_lv32_1));
    add_ln134_1_fu_314_p2 <= std_logic_vector(unsigned(add_ln134_fu_305_p2) + unsigned(zext_ln134_fu_311_p1));
    add_ln134_fu_305_p2 <= std_logic_vector(unsigned(tmp_cast_fu_285_p3) + unsigned(tmp_1_cast_fu_297_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln129_fu_222_p2)
    begin
        if (((icmp_ln129_fu_222_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln129_fu_222_p2 <= "1" when (indvar_flatten_fu_80 = bound) else "0";
    icmp_ln132_fu_236_p2 <= "1" when (y_fu_72 = in_height_read) else "0";
    in_channels_ch1_address0 <= zext_ln134_1_fu_325_p1(22 - 1 downto 0);

    in_channels_ch1_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            in_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch2_address0 <= zext_ln134_1_fu_325_p1(22 - 1 downto 0);

    in_channels_ch2_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            in_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch3_address0 <= zext_ln134_1_fu_325_p1(22 - 1 downto 0);

    in_channels_ch3_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            in_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln137_fu_334_p0 <= mul_ln137_fu_334_p00(8 - 1 downto 0);
    mul_ln137_fu_334_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Y_reg_472),15));
    mul_ln137_fu_334_p1 <= zext_ln137_cast_reg_426(8 - 1 downto 0);
    mul_ln138_fu_342_p0 <= mul_ln138_fu_342_p00(8 - 1 downto 0);
    mul_ln138_fu_342_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(U_reg_477),15));
    mul_ln138_fu_342_p1 <= zext_ln138_cast_reg_421(8 - 1 downto 0);
    mul_ln139_fu_350_p0 <= mul_ln139_fu_350_p00(8 - 1 downto 0);
    mul_ln139_fu_350_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(V_reg_482),15));
    mul_ln139_fu_350_p1 <= zext_ln139_cast_reg_416(8 - 1 downto 0);
    out_channels_ch1_address0 <= zext_ln134_1_reg_450_pp0_iter5_reg(22 - 1 downto 0);

    out_channels_ch1_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            out_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_d0 <= trunc_ln_reg_487;

    out_channels_ch1_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            out_channels_ch1_we0 <= ap_const_logic_1;
        else 
            out_channels_ch1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_address0 <= zext_ln134_1_reg_450_pp0_iter5_reg(22 - 1 downto 0);

    out_channels_ch2_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            out_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_d0 <= trunc_ln1_reg_492;

    out_channels_ch2_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            out_channels_ch2_we0 <= ap_const_logic_1;
        else 
            out_channels_ch2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_address0 <= zext_ln134_1_reg_450_pp0_iter5_reg(22 - 1 downto 0);

    out_channels_ch3_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            out_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_d0 <= trunc_ln2_reg_497;

    out_channels_ch3_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            out_channels_ch3_we0 <= ap_const_logic_1;
        else 
            out_channels_ch3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln118_1_fu_274_p3 <= 
        x_2_fu_268_p2 when (icmp_ln132_reg_435(0) = '1') else 
        x_fu_76;
    select_ln118_fu_241_p3 <= 
        ap_const_lv16_0 when (icmp_ln132_fu_236_p2(0) = '1') else 
        y_fu_72;
    tmp_1_cast_fu_297_p3 <= (trunc_ln134_1_fu_293_p1 & ap_const_lv8_0);
    tmp_cast_fu_285_p3 <= (trunc_ln134_fu_281_p1 & ap_const_lv10_0);
    trunc_ln134_1_fu_293_p1 <= select_ln118_1_fu_274_p3(14 - 1 downto 0);
    trunc_ln134_fu_281_p1 <= select_ln118_1_fu_274_p3(12 - 1 downto 0);
    x_2_fu_268_p2 <= std_logic_vector(unsigned(x_fu_76) + unsigned(ap_const_lv16_1));
    y_1_fu_249_p2 <= std_logic_vector(unsigned(select_ln118_fu_241_p3) + unsigned(ap_const_lv16_1));
    zext_ln134_1_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln134_1_reg_445),64));
    zext_ln134_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln118_reg_440),22));
    zext_ln137_cast_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln137),15));
    zext_ln138_cast_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln138),15));
    zext_ln139_cast_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln139),15));
end behav;

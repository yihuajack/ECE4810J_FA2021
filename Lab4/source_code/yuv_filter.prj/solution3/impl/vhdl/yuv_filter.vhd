-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
-- Version: 2021.1.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv_filter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce0 : OUT STD_LOGIC;
    in_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch1_we0 : OUT STD_LOGIC;
    in_channels_ch1_address1 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce1 : OUT STD_LOGIC;
    in_channels_ch1_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch1_we1 : OUT STD_LOGIC;
    in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce0 : OUT STD_LOGIC;
    in_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_we0 : OUT STD_LOGIC;
    in_channels_ch2_address1 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce1 : OUT STD_LOGIC;
    in_channels_ch2_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_we1 : OUT STD_LOGIC;
    in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce0 : OUT STD_LOGIC;
    in_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_we0 : OUT STD_LOGIC;
    in_channels_ch3_address1 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce1 : OUT STD_LOGIC;
    in_channels_ch3_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_we1 : OUT STD_LOGIC;
    in_width : IN STD_LOGIC_VECTOR (15 downto 0);
    in_height : IN STD_LOGIC_VECTOR (15 downto 0);
    out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch1_ce0 : OUT STD_LOGIC;
    out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch1_we0 : OUT STD_LOGIC;
    out_channels_ch1_address1 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch1_ce1 : OUT STD_LOGIC;
    out_channels_ch1_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch1_we1 : OUT STD_LOGIC;
    out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch2_ce0 : OUT STD_LOGIC;
    out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_we0 : OUT STD_LOGIC;
    out_channels_ch2_address1 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch2_ce1 : OUT STD_LOGIC;
    out_channels_ch2_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_we1 : OUT STD_LOGIC;
    out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch3_ce0 : OUT STD_LOGIC;
    out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_we0 : OUT STD_LOGIC;
    out_channels_ch3_address1 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch3_ce1 : OUT STD_LOGIC;
    out_channels_ch3_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_we1 : OUT STD_LOGIC;
    out_width : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_height : OUT STD_LOGIC_VECTOR (15 downto 0);
    Y_scale : IN STD_LOGIC_VECTOR (7 downto 0);
    U_scale : IN STD_LOGIC_VECTOR (7 downto 0);
    V_scale : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_start : IN STD_LOGIC;
    out_width_ap_vld : OUT STD_LOGIC;
    out_height_ap_vld : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of yuv_filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "yuv_filter_yuv_filter,hls_ip_2021_1_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.271000,HLS_SYN_LAT=2353237,HLS_SYN_TPT=784413,HLS_SYN_MEM=24576,HLS_SYN_DSP=0,HLS_SYN_FF=1860,HLS_SYN_LUT=2336,HLS_VERSION=2021_1_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal p_yuv_channels_ch1_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_yuv_channels_ch1_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_yuv_channels_ch2_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_yuv_channels_ch2_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_yuv_channels_ch3_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_yuv_channels_ch3_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_scale_channels_ch1_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_scale_channels_ch1_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_scale_channels_ch2_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_scale_channels_ch2_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_scale_channels_ch3_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_scale_channels_ch3_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_Y_scale_c_din : STD_LOGIC_VECTOR (7 downto 0);
    signal entry_proc_U0_Y_scale_c_write : STD_LOGIC;
    signal entry_proc_U0_U_scale_c_din : STD_LOGIC_VECTOR (7 downto 0);
    signal entry_proc_U0_U_scale_c_write : STD_LOGIC;
    signal entry_proc_U0_V_scale_c_din : STD_LOGIC_VECTOR (7 downto 0);
    signal entry_proc_U0_V_scale_c_write : STD_LOGIC;
    signal rgb2yuv_1_U0_ap_start : STD_LOGIC;
    signal rgb2yuv_1_U0_ap_done : STD_LOGIC;
    signal rgb2yuv_1_U0_ap_continue : STD_LOGIC;
    signal rgb2yuv_1_U0_ap_idle : STD_LOGIC;
    signal rgb2yuv_1_U0_ap_ready : STD_LOGIC;
    signal rgb2yuv_1_U0_in_channels_ch1_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal rgb2yuv_1_U0_in_channels_ch1_ce0 : STD_LOGIC;
    signal rgb2yuv_1_U0_in_channels_ch2_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal rgb2yuv_1_U0_in_channels_ch2_ce0 : STD_LOGIC;
    signal rgb2yuv_1_U0_in_channels_ch3_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal rgb2yuv_1_U0_in_channels_ch3_ce0 : STD_LOGIC;
    signal rgb2yuv_1_U0_out_channels_ch1_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal rgb2yuv_1_U0_out_channels_ch1_ce0 : STD_LOGIC;
    signal rgb2yuv_1_U0_out_channels_ch1_we0 : STD_LOGIC;
    signal rgb2yuv_1_U0_out_channels_ch1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rgb2yuv_1_U0_out_channels_ch2_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal rgb2yuv_1_U0_out_channels_ch2_ce0 : STD_LOGIC;
    signal rgb2yuv_1_U0_out_channels_ch2_we0 : STD_LOGIC;
    signal rgb2yuv_1_U0_out_channels_ch2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rgb2yuv_1_U0_out_channels_ch3_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal rgb2yuv_1_U0_out_channels_ch3_ce0 : STD_LOGIC;
    signal rgb2yuv_1_U0_out_channels_ch3_we0 : STD_LOGIC;
    signal rgb2yuv_1_U0_out_channels_ch3_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rgb2yuv_1_U0_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal rgb2yuv_1_U0_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_channel_done_p_yuv_height : STD_LOGIC;
    signal p_yuv_height_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_p_yuv_height : STD_LOGIC := '0';
    signal ap_sync_channel_write_p_yuv_height : STD_LOGIC;
    signal ap_channel_done_p_yuv_width : STD_LOGIC;
    signal p_yuv_width_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_p_yuv_width : STD_LOGIC := '0';
    signal ap_sync_channel_write_p_yuv_width : STD_LOGIC;
    signal ap_channel_done_p_yuv_channels_ch3 : STD_LOGIC;
    signal rgb2yuv_1_U0_out_channels_ch3_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_p_yuv_channels_ch3 : STD_LOGIC := '0';
    signal ap_sync_channel_write_p_yuv_channels_ch3 : STD_LOGIC;
    signal ap_channel_done_p_yuv_channels_ch2 : STD_LOGIC;
    signal rgb2yuv_1_U0_out_channels_ch2_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_p_yuv_channels_ch2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_p_yuv_channels_ch2 : STD_LOGIC;
    signal ap_channel_done_p_yuv_channels_ch1 : STD_LOGIC;
    signal rgb2yuv_1_U0_out_channels_ch1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_p_yuv_channels_ch1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_p_yuv_channels_ch1 : STD_LOGIC;
    signal yuv_scale_U0_ap_start : STD_LOGIC;
    signal yuv_scale_U0_ap_done : STD_LOGIC;
    signal yuv_scale_U0_ap_continue : STD_LOGIC;
    signal yuv_scale_U0_ap_idle : STD_LOGIC;
    signal yuv_scale_U0_ap_ready : STD_LOGIC;
    signal yuv_scale_U0_in_channels_ch1_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal yuv_scale_U0_in_channels_ch1_ce0 : STD_LOGIC;
    signal yuv_scale_U0_in_channels_ch2_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal yuv_scale_U0_in_channels_ch2_ce0 : STD_LOGIC;
    signal yuv_scale_U0_in_channels_ch3_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal yuv_scale_U0_in_channels_ch3_ce0 : STD_LOGIC;
    signal yuv_scale_U0_out_channels_ch1_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal yuv_scale_U0_out_channels_ch1_ce0 : STD_LOGIC;
    signal yuv_scale_U0_out_channels_ch1_we0 : STD_LOGIC;
    signal yuv_scale_U0_out_channels_ch1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal yuv_scale_U0_out_channels_ch2_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal yuv_scale_U0_out_channels_ch2_ce0 : STD_LOGIC;
    signal yuv_scale_U0_out_channels_ch2_we0 : STD_LOGIC;
    signal yuv_scale_U0_out_channels_ch2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal yuv_scale_U0_out_channels_ch3_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal yuv_scale_U0_out_channels_ch3_ce0 : STD_LOGIC;
    signal yuv_scale_U0_out_channels_ch3_we0 : STD_LOGIC;
    signal yuv_scale_U0_out_channels_ch3_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal yuv_scale_U0_Y_scale_read : STD_LOGIC;
    signal yuv_scale_U0_U_scale_read : STD_LOGIC;
    signal yuv_scale_U0_V_scale_read : STD_LOGIC;
    signal yuv_scale_U0_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal yuv_scale_U0_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_channel_done_p_scale_height : STD_LOGIC;
    signal p_scale_height_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_p_scale_height : STD_LOGIC := '0';
    signal ap_sync_channel_write_p_scale_height : STD_LOGIC;
    signal ap_channel_done_p_scale_width : STD_LOGIC;
    signal p_scale_width_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_p_scale_width : STD_LOGIC := '0';
    signal ap_sync_channel_write_p_scale_width : STD_LOGIC;
    signal ap_channel_done_p_scale_channels_ch3 : STD_LOGIC;
    signal yuv_scale_U0_out_channels_ch3_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_p_scale_channels_ch3 : STD_LOGIC := '0';
    signal ap_sync_channel_write_p_scale_channels_ch3 : STD_LOGIC;
    signal ap_channel_done_p_scale_channels_ch2 : STD_LOGIC;
    signal yuv_scale_U0_out_channels_ch2_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_p_scale_channels_ch2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_p_scale_channels_ch2 : STD_LOGIC;
    signal ap_channel_done_p_scale_channels_ch1 : STD_LOGIC;
    signal yuv_scale_U0_out_channels_ch1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_p_scale_channels_ch1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_p_scale_channels_ch1 : STD_LOGIC;
    signal yuv2rgb_1_U0_ap_start : STD_LOGIC;
    signal yuv2rgb_1_U0_ap_done : STD_LOGIC;
    signal yuv2rgb_1_U0_ap_continue : STD_LOGIC;
    signal yuv2rgb_1_U0_ap_idle : STD_LOGIC;
    signal yuv2rgb_1_U0_ap_ready : STD_LOGIC;
    signal yuv2rgb_1_U0_in_channels_ch1_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal yuv2rgb_1_U0_in_channels_ch1_ce0 : STD_LOGIC;
    signal yuv2rgb_1_U0_in_channels_ch2_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal yuv2rgb_1_U0_in_channels_ch2_ce0 : STD_LOGIC;
    signal yuv2rgb_1_U0_in_channels_ch3_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal yuv2rgb_1_U0_in_channels_ch3_ce0 : STD_LOGIC;
    signal yuv2rgb_1_U0_out_channels_ch1_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal yuv2rgb_1_U0_out_channels_ch1_ce0 : STD_LOGIC;
    signal yuv2rgb_1_U0_out_channels_ch1_we0 : STD_LOGIC;
    signal yuv2rgb_1_U0_out_channels_ch1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal yuv2rgb_1_U0_out_channels_ch2_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal yuv2rgb_1_U0_out_channels_ch2_ce0 : STD_LOGIC;
    signal yuv2rgb_1_U0_out_channels_ch2_we0 : STD_LOGIC;
    signal yuv2rgb_1_U0_out_channels_ch2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal yuv2rgb_1_U0_out_channels_ch3_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal yuv2rgb_1_U0_out_channels_ch3_ce0 : STD_LOGIC;
    signal yuv2rgb_1_U0_out_channels_ch3_we0 : STD_LOGIC;
    signal yuv2rgb_1_U0_out_channels_ch3_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal yuv2rgb_1_U0_out_width : STD_LOGIC_VECTOR (15 downto 0);
    signal yuv2rgb_1_U0_out_width_ap_vld : STD_LOGIC;
    signal yuv2rgb_1_U0_out_height : STD_LOGIC_VECTOR (15 downto 0);
    signal yuv2rgb_1_U0_out_height_ap_vld : STD_LOGIC;
    signal p_yuv_channels_ch1_i_full_n : STD_LOGIC;
    signal p_yuv_channels_ch1_t_empty_n : STD_LOGIC;
    signal p_yuv_channels_ch2_i_full_n : STD_LOGIC;
    signal p_yuv_channels_ch2_t_empty_n : STD_LOGIC;
    signal p_yuv_channels_ch3_i_full_n : STD_LOGIC;
    signal p_yuv_channels_ch3_t_empty_n : STD_LOGIC;
    signal p_scale_channels_ch1_i_full_n : STD_LOGIC;
    signal p_scale_channels_ch1_t_empty_n : STD_LOGIC;
    signal p_scale_channels_ch2_i_full_n : STD_LOGIC;
    signal p_scale_channels_ch2_t_empty_n : STD_LOGIC;
    signal p_scale_channels_ch3_i_full_n : STD_LOGIC;
    signal p_scale_channels_ch3_t_empty_n : STD_LOGIC;
    signal Y_scale_c_full_n : STD_LOGIC;
    signal Y_scale_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal Y_scale_c_empty_n : STD_LOGIC;
    signal U_scale_c_full_n : STD_LOGIC;
    signal U_scale_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal U_scale_c_empty_n : STD_LOGIC;
    signal V_scale_c_full_n : STD_LOGIC;
    signal V_scale_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal V_scale_c_empty_n : STD_LOGIC;
    signal p_yuv_width_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal p_yuv_width_empty_n : STD_LOGIC;
    signal p_yuv_height_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal p_yuv_height_empty_n : STD_LOGIC;
    signal p_scale_width_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal p_scale_width_empty_n : STD_LOGIC;
    signal p_scale_height_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal p_scale_height_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_rgb2yuv_1_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_rgb2yuv_1_U0_ap_ready : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component yuv_filter_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Y_scale : IN STD_LOGIC_VECTOR (7 downto 0);
        Y_scale_c_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        Y_scale_c_full_n : IN STD_LOGIC;
        Y_scale_c_write : OUT STD_LOGIC;
        U_scale : IN STD_LOGIC_VECTOR (7 downto 0);
        U_scale_c_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        U_scale_c_full_n : IN STD_LOGIC;
        U_scale_c_write : OUT STD_LOGIC;
        V_scale : IN STD_LOGIC_VECTOR (7 downto 0);
        V_scale_c_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        V_scale_c_full_n : IN STD_LOGIC;
        V_scale_c_write : OUT STD_LOGIC );
    end component;


    component yuv_filter_rgb2yuv_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        in_channels_ch1_ce0 : OUT STD_LOGIC;
        in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        in_channels_ch2_ce0 : OUT STD_LOGIC;
        in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        in_channels_ch3_ce0 : OUT STD_LOGIC;
        in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        in_width : IN STD_LOGIC_VECTOR (15 downto 0);
        in_height : IN STD_LOGIC_VECTOR (15 downto 0);
        out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        out_channels_ch1_ce0 : OUT STD_LOGIC;
        out_channels_ch1_we0 : OUT STD_LOGIC;
        out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        out_channels_ch2_ce0 : OUT STD_LOGIC;
        out_channels_ch2_we0 : OUT STD_LOGIC;
        out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        out_channels_ch3_ce0 : OUT STD_LOGIC;
        out_channels_ch3_we0 : OUT STD_LOGIC;
        out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component yuv_filter_yuv_scale IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        in_channels_ch1_ce0 : OUT STD_LOGIC;
        in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        in_channels_ch2_ce0 : OUT STD_LOGIC;
        in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        in_channels_ch3_ce0 : OUT STD_LOGIC;
        in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        in_width_read : IN STD_LOGIC_VECTOR (15 downto 0);
        in_height_read : IN STD_LOGIC_VECTOR (15 downto 0);
        out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        out_channels_ch1_ce0 : OUT STD_LOGIC;
        out_channels_ch1_we0 : OUT STD_LOGIC;
        out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        out_channels_ch2_ce0 : OUT STD_LOGIC;
        out_channels_ch2_we0 : OUT STD_LOGIC;
        out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        out_channels_ch3_ce0 : OUT STD_LOGIC;
        out_channels_ch3_we0 : OUT STD_LOGIC;
        out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        Y_scale_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        Y_scale_empty_n : IN STD_LOGIC;
        Y_scale_read : OUT STD_LOGIC;
        U_scale_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        U_scale_empty_n : IN STD_LOGIC;
        U_scale_read : OUT STD_LOGIC;
        V_scale_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        V_scale_empty_n : IN STD_LOGIC;
        V_scale_read : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component yuv_filter_yuv2rgb_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        in_channels_ch1_ce0 : OUT STD_LOGIC;
        in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        in_channels_ch2_ce0 : OUT STD_LOGIC;
        in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        in_channels_ch3_ce0 : OUT STD_LOGIC;
        in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
        out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        out_channels_ch1_ce0 : OUT STD_LOGIC;
        out_channels_ch1_we0 : OUT STD_LOGIC;
        out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        out_channels_ch2_ce0 : OUT STD_LOGIC;
        out_channels_ch2_we0 : OUT STD_LOGIC;
        out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        out_channels_ch3_ce0 : OUT STD_LOGIC;
        out_channels_ch3_we0 : OUT STD_LOGIC;
        out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_width : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_width_ap_vld : OUT STD_LOGIC;
        out_height : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_height_ap_vld : OUT STD_LOGIC );
    end component;


    component yuv_filter_p_yuv_channels_ch1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (21 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (21 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component yuv_filter_fifo_w8_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component yuv_filter_fifo_w16_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    p_yuv_channels_ch1_U : component yuv_filter_p_yuv_channels_ch1
    generic map (
        DataWidth => 8,
        AddressRange => 2457600,
        AddressWidth => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => rgb2yuv_1_U0_out_channels_ch1_address0,
        i_ce0 => rgb2yuv_1_U0_out_channels_ch1_ce0,
        i_we0 => rgb2yuv_1_U0_out_channels_ch1_we0,
        i_d0 => rgb2yuv_1_U0_out_channels_ch1_d0,
        i_q0 => p_yuv_channels_ch1_i_q0,
        t_address0 => yuv_scale_U0_in_channels_ch1_address0,
        t_ce0 => yuv_scale_U0_in_channels_ch1_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => p_yuv_channels_ch1_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => p_yuv_channels_ch1_i_full_n,
        i_write => ap_channel_done_p_yuv_channels_ch1,
        t_empty_n => p_yuv_channels_ch1_t_empty_n,
        t_read => yuv_scale_U0_ap_ready);

    p_yuv_channels_ch2_U : component yuv_filter_p_yuv_channels_ch1
    generic map (
        DataWidth => 8,
        AddressRange => 2457600,
        AddressWidth => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => rgb2yuv_1_U0_out_channels_ch2_address0,
        i_ce0 => rgb2yuv_1_U0_out_channels_ch2_ce0,
        i_we0 => rgb2yuv_1_U0_out_channels_ch2_we0,
        i_d0 => rgb2yuv_1_U0_out_channels_ch2_d0,
        i_q0 => p_yuv_channels_ch2_i_q0,
        t_address0 => yuv_scale_U0_in_channels_ch2_address0,
        t_ce0 => yuv_scale_U0_in_channels_ch2_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => p_yuv_channels_ch2_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => p_yuv_channels_ch2_i_full_n,
        i_write => ap_channel_done_p_yuv_channels_ch2,
        t_empty_n => p_yuv_channels_ch2_t_empty_n,
        t_read => yuv_scale_U0_ap_ready);

    p_yuv_channels_ch3_U : component yuv_filter_p_yuv_channels_ch1
    generic map (
        DataWidth => 8,
        AddressRange => 2457600,
        AddressWidth => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => rgb2yuv_1_U0_out_channels_ch3_address0,
        i_ce0 => rgb2yuv_1_U0_out_channels_ch3_ce0,
        i_we0 => rgb2yuv_1_U0_out_channels_ch3_we0,
        i_d0 => rgb2yuv_1_U0_out_channels_ch3_d0,
        i_q0 => p_yuv_channels_ch3_i_q0,
        t_address0 => yuv_scale_U0_in_channels_ch3_address0,
        t_ce0 => yuv_scale_U0_in_channels_ch3_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => p_yuv_channels_ch3_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => p_yuv_channels_ch3_i_full_n,
        i_write => ap_channel_done_p_yuv_channels_ch3,
        t_empty_n => p_yuv_channels_ch3_t_empty_n,
        t_read => yuv_scale_U0_ap_ready);

    p_scale_channels_ch1_U : component yuv_filter_p_yuv_channels_ch1
    generic map (
        DataWidth => 8,
        AddressRange => 2457600,
        AddressWidth => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => yuv_scale_U0_out_channels_ch1_address0,
        i_ce0 => yuv_scale_U0_out_channels_ch1_ce0,
        i_we0 => yuv_scale_U0_out_channels_ch1_we0,
        i_d0 => yuv_scale_U0_out_channels_ch1_d0,
        i_q0 => p_scale_channels_ch1_i_q0,
        t_address0 => yuv2rgb_1_U0_in_channels_ch1_address0,
        t_ce0 => yuv2rgb_1_U0_in_channels_ch1_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => p_scale_channels_ch1_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => p_scale_channels_ch1_i_full_n,
        i_write => ap_channel_done_p_scale_channels_ch1,
        t_empty_n => p_scale_channels_ch1_t_empty_n,
        t_read => yuv2rgb_1_U0_ap_ready);

    p_scale_channels_ch2_U : component yuv_filter_p_yuv_channels_ch1
    generic map (
        DataWidth => 8,
        AddressRange => 2457600,
        AddressWidth => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => yuv_scale_U0_out_channels_ch2_address0,
        i_ce0 => yuv_scale_U0_out_channels_ch2_ce0,
        i_we0 => yuv_scale_U0_out_channels_ch2_we0,
        i_d0 => yuv_scale_U0_out_channels_ch2_d0,
        i_q0 => p_scale_channels_ch2_i_q0,
        t_address0 => yuv2rgb_1_U0_in_channels_ch2_address0,
        t_ce0 => yuv2rgb_1_U0_in_channels_ch2_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => p_scale_channels_ch2_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => p_scale_channels_ch2_i_full_n,
        i_write => ap_channel_done_p_scale_channels_ch2,
        t_empty_n => p_scale_channels_ch2_t_empty_n,
        t_read => yuv2rgb_1_U0_ap_ready);

    p_scale_channels_ch3_U : component yuv_filter_p_yuv_channels_ch1
    generic map (
        DataWidth => 8,
        AddressRange => 2457600,
        AddressWidth => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => yuv_scale_U0_out_channels_ch3_address0,
        i_ce0 => yuv_scale_U0_out_channels_ch3_ce0,
        i_we0 => yuv_scale_U0_out_channels_ch3_we0,
        i_d0 => yuv_scale_U0_out_channels_ch3_d0,
        i_q0 => p_scale_channels_ch3_i_q0,
        t_address0 => yuv2rgb_1_U0_in_channels_ch3_address0,
        t_ce0 => yuv2rgb_1_U0_in_channels_ch3_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => p_scale_channels_ch3_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => p_scale_channels_ch3_i_full_n,
        i_write => ap_channel_done_p_scale_channels_ch3,
        t_empty_n => p_scale_channels_ch3_t_empty_n,
        t_read => yuv2rgb_1_U0_ap_ready);

    entry_proc_U0 : component yuv_filter_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => entry_proc_U0_ap_start,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        Y_scale => Y_scale,
        Y_scale_c_din => entry_proc_U0_Y_scale_c_din,
        Y_scale_c_full_n => Y_scale_c_full_n,
        Y_scale_c_write => entry_proc_U0_Y_scale_c_write,
        U_scale => U_scale,
        U_scale_c_din => entry_proc_U0_U_scale_c_din,
        U_scale_c_full_n => U_scale_c_full_n,
        U_scale_c_write => entry_proc_U0_U_scale_c_write,
        V_scale => V_scale,
        V_scale_c_din => entry_proc_U0_V_scale_c_din,
        V_scale_c_full_n => V_scale_c_full_n,
        V_scale_c_write => entry_proc_U0_V_scale_c_write);

    rgb2yuv_1_U0 : component yuv_filter_rgb2yuv_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => rgb2yuv_1_U0_ap_start,
        ap_done => rgb2yuv_1_U0_ap_done,
        ap_continue => rgb2yuv_1_U0_ap_continue,
        ap_idle => rgb2yuv_1_U0_ap_idle,
        ap_ready => rgb2yuv_1_U0_ap_ready,
        in_channels_ch1_address0 => rgb2yuv_1_U0_in_channels_ch1_address0,
        in_channels_ch1_ce0 => rgb2yuv_1_U0_in_channels_ch1_ce0,
        in_channels_ch1_q0 => in_channels_ch1_q0,
        in_channels_ch2_address0 => rgb2yuv_1_U0_in_channels_ch2_address0,
        in_channels_ch2_ce0 => rgb2yuv_1_U0_in_channels_ch2_ce0,
        in_channels_ch2_q0 => in_channels_ch2_q0,
        in_channels_ch3_address0 => rgb2yuv_1_U0_in_channels_ch3_address0,
        in_channels_ch3_ce0 => rgb2yuv_1_U0_in_channels_ch3_ce0,
        in_channels_ch3_q0 => in_channels_ch3_q0,
        in_width => in_width,
        in_height => in_height,
        out_channels_ch1_address0 => rgb2yuv_1_U0_out_channels_ch1_address0,
        out_channels_ch1_ce0 => rgb2yuv_1_U0_out_channels_ch1_ce0,
        out_channels_ch1_we0 => rgb2yuv_1_U0_out_channels_ch1_we0,
        out_channels_ch1_d0 => rgb2yuv_1_U0_out_channels_ch1_d0,
        out_channels_ch2_address0 => rgb2yuv_1_U0_out_channels_ch2_address0,
        out_channels_ch2_ce0 => rgb2yuv_1_U0_out_channels_ch2_ce0,
        out_channels_ch2_we0 => rgb2yuv_1_U0_out_channels_ch2_we0,
        out_channels_ch2_d0 => rgb2yuv_1_U0_out_channels_ch2_d0,
        out_channels_ch3_address0 => rgb2yuv_1_U0_out_channels_ch3_address0,
        out_channels_ch3_ce0 => rgb2yuv_1_U0_out_channels_ch3_ce0,
        out_channels_ch3_we0 => rgb2yuv_1_U0_out_channels_ch3_we0,
        out_channels_ch3_d0 => rgb2yuv_1_U0_out_channels_ch3_d0,
        ap_return_0 => rgb2yuv_1_U0_ap_return_0,
        ap_return_1 => rgb2yuv_1_U0_ap_return_1);

    yuv_scale_U0 : component yuv_filter_yuv_scale
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => yuv_scale_U0_ap_start,
        ap_done => yuv_scale_U0_ap_done,
        ap_continue => yuv_scale_U0_ap_continue,
        ap_idle => yuv_scale_U0_ap_idle,
        ap_ready => yuv_scale_U0_ap_ready,
        in_channels_ch1_address0 => yuv_scale_U0_in_channels_ch1_address0,
        in_channels_ch1_ce0 => yuv_scale_U0_in_channels_ch1_ce0,
        in_channels_ch1_q0 => p_yuv_channels_ch1_t_q0,
        in_channels_ch2_address0 => yuv_scale_U0_in_channels_ch2_address0,
        in_channels_ch2_ce0 => yuv_scale_U0_in_channels_ch2_ce0,
        in_channels_ch2_q0 => p_yuv_channels_ch2_t_q0,
        in_channels_ch3_address0 => yuv_scale_U0_in_channels_ch3_address0,
        in_channels_ch3_ce0 => yuv_scale_U0_in_channels_ch3_ce0,
        in_channels_ch3_q0 => p_yuv_channels_ch3_t_q0,
        in_width_read => p_yuv_width_dout,
        in_height_read => p_yuv_height_dout,
        out_channels_ch1_address0 => yuv_scale_U0_out_channels_ch1_address0,
        out_channels_ch1_ce0 => yuv_scale_U0_out_channels_ch1_ce0,
        out_channels_ch1_we0 => yuv_scale_U0_out_channels_ch1_we0,
        out_channels_ch1_d0 => yuv_scale_U0_out_channels_ch1_d0,
        out_channels_ch2_address0 => yuv_scale_U0_out_channels_ch2_address0,
        out_channels_ch2_ce0 => yuv_scale_U0_out_channels_ch2_ce0,
        out_channels_ch2_we0 => yuv_scale_U0_out_channels_ch2_we0,
        out_channels_ch2_d0 => yuv_scale_U0_out_channels_ch2_d0,
        out_channels_ch3_address0 => yuv_scale_U0_out_channels_ch3_address0,
        out_channels_ch3_ce0 => yuv_scale_U0_out_channels_ch3_ce0,
        out_channels_ch3_we0 => yuv_scale_U0_out_channels_ch3_we0,
        out_channels_ch3_d0 => yuv_scale_U0_out_channels_ch3_d0,
        Y_scale_dout => Y_scale_c_dout,
        Y_scale_empty_n => Y_scale_c_empty_n,
        Y_scale_read => yuv_scale_U0_Y_scale_read,
        U_scale_dout => U_scale_c_dout,
        U_scale_empty_n => U_scale_c_empty_n,
        U_scale_read => yuv_scale_U0_U_scale_read,
        V_scale_dout => V_scale_c_dout,
        V_scale_empty_n => V_scale_c_empty_n,
        V_scale_read => yuv_scale_U0_V_scale_read,
        ap_return_0 => yuv_scale_U0_ap_return_0,
        ap_return_1 => yuv_scale_U0_ap_return_1);

    yuv2rgb_1_U0 : component yuv_filter_yuv2rgb_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => yuv2rgb_1_U0_ap_start,
        ap_done => yuv2rgb_1_U0_ap_done,
        ap_continue => yuv2rgb_1_U0_ap_continue,
        ap_idle => yuv2rgb_1_U0_ap_idle,
        ap_ready => yuv2rgb_1_U0_ap_ready,
        in_channels_ch1_address0 => yuv2rgb_1_U0_in_channels_ch1_address0,
        in_channels_ch1_ce0 => yuv2rgb_1_U0_in_channels_ch1_ce0,
        in_channels_ch1_q0 => p_scale_channels_ch1_t_q0,
        in_channels_ch2_address0 => yuv2rgb_1_U0_in_channels_ch2_address0,
        in_channels_ch2_ce0 => yuv2rgb_1_U0_in_channels_ch2_ce0,
        in_channels_ch2_q0 => p_scale_channels_ch2_t_q0,
        in_channels_ch3_address0 => yuv2rgb_1_U0_in_channels_ch3_address0,
        in_channels_ch3_ce0 => yuv2rgb_1_U0_in_channels_ch3_ce0,
        in_channels_ch3_q0 => p_scale_channels_ch3_t_q0,
        p_read => p_scale_width_dout,
        p_read1 => p_scale_height_dout,
        out_channels_ch1_address0 => yuv2rgb_1_U0_out_channels_ch1_address0,
        out_channels_ch1_ce0 => yuv2rgb_1_U0_out_channels_ch1_ce0,
        out_channels_ch1_we0 => yuv2rgb_1_U0_out_channels_ch1_we0,
        out_channels_ch1_d0 => yuv2rgb_1_U0_out_channels_ch1_d0,
        out_channels_ch2_address0 => yuv2rgb_1_U0_out_channels_ch2_address0,
        out_channels_ch2_ce0 => yuv2rgb_1_U0_out_channels_ch2_ce0,
        out_channels_ch2_we0 => yuv2rgb_1_U0_out_channels_ch2_we0,
        out_channels_ch2_d0 => yuv2rgb_1_U0_out_channels_ch2_d0,
        out_channels_ch3_address0 => yuv2rgb_1_U0_out_channels_ch3_address0,
        out_channels_ch3_ce0 => yuv2rgb_1_U0_out_channels_ch3_ce0,
        out_channels_ch3_we0 => yuv2rgb_1_U0_out_channels_ch3_we0,
        out_channels_ch3_d0 => yuv2rgb_1_U0_out_channels_ch3_d0,
        out_width => yuv2rgb_1_U0_out_width,
        out_width_ap_vld => yuv2rgb_1_U0_out_width_ap_vld,
        out_height => yuv2rgb_1_U0_out_height,
        out_height_ap_vld => yuv2rgb_1_U0_out_height_ap_vld);

    Y_scale_c_U : component yuv_filter_fifo_w8_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_Y_scale_c_din,
        if_full_n => Y_scale_c_full_n,
        if_write => entry_proc_U0_Y_scale_c_write,
        if_dout => Y_scale_c_dout,
        if_empty_n => Y_scale_c_empty_n,
        if_read => yuv_scale_U0_Y_scale_read);

    U_scale_c_U : component yuv_filter_fifo_w8_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_U_scale_c_din,
        if_full_n => U_scale_c_full_n,
        if_write => entry_proc_U0_U_scale_c_write,
        if_dout => U_scale_c_dout,
        if_empty_n => U_scale_c_empty_n,
        if_read => yuv_scale_U0_U_scale_read);

    V_scale_c_U : component yuv_filter_fifo_w8_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_V_scale_c_din,
        if_full_n => V_scale_c_full_n,
        if_write => entry_proc_U0_V_scale_c_write,
        if_dout => V_scale_c_dout,
        if_empty_n => V_scale_c_empty_n,
        if_read => yuv_scale_U0_V_scale_read);

    p_yuv_width_U : component yuv_filter_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rgb2yuv_1_U0_ap_return_0,
        if_full_n => p_yuv_width_full_n,
        if_write => ap_channel_done_p_yuv_width,
        if_dout => p_yuv_width_dout,
        if_empty_n => p_yuv_width_empty_n,
        if_read => yuv_scale_U0_ap_ready);

    p_yuv_height_U : component yuv_filter_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rgb2yuv_1_U0_ap_return_1,
        if_full_n => p_yuv_height_full_n,
        if_write => ap_channel_done_p_yuv_height,
        if_dout => p_yuv_height_dout,
        if_empty_n => p_yuv_height_empty_n,
        if_read => yuv_scale_U0_ap_ready);

    p_scale_width_U : component yuv_filter_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => yuv_scale_U0_ap_return_0,
        if_full_n => p_scale_width_full_n,
        if_write => ap_channel_done_p_scale_width,
        if_dout => p_scale_width_dout,
        if_empty_n => p_scale_width_empty_n,
        if_read => yuv2rgb_1_U0_ap_ready);

    p_scale_height_U : component yuv_filter_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => yuv_scale_U0_ap_return_1,
        if_full_n => p_scale_height_full_n,
        if_write => ap_channel_done_p_scale_height,
        if_dout => p_scale_height_dout,
        if_empty_n => p_scale_height_empty_n,
        if_read => yuv2rgb_1_U0_ap_ready);





    ap_sync_reg_channel_write_p_scale_channels_ch1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_p_scale_channels_ch1 <= ap_const_logic_0;
            else
                if (((yuv_scale_U0_ap_done and yuv_scale_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_p_scale_channels_ch1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_p_scale_channels_ch1 <= ap_sync_channel_write_p_scale_channels_ch1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_p_scale_channels_ch2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_p_scale_channels_ch2 <= ap_const_logic_0;
            else
                if (((yuv_scale_U0_ap_done and yuv_scale_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_p_scale_channels_ch2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_p_scale_channels_ch2 <= ap_sync_channel_write_p_scale_channels_ch2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_p_scale_channels_ch3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_p_scale_channels_ch3 <= ap_const_logic_0;
            else
                if (((yuv_scale_U0_ap_done and yuv_scale_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_p_scale_channels_ch3 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_p_scale_channels_ch3 <= ap_sync_channel_write_p_scale_channels_ch3;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_p_scale_height_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_p_scale_height <= ap_const_logic_0;
            else
                if (((yuv_scale_U0_ap_done and yuv_scale_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_p_scale_height <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_p_scale_height <= ap_sync_channel_write_p_scale_height;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_p_scale_width_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_p_scale_width <= ap_const_logic_0;
            else
                if (((yuv_scale_U0_ap_done and yuv_scale_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_p_scale_width <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_p_scale_width <= ap_sync_channel_write_p_scale_width;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_p_yuv_channels_ch1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_p_yuv_channels_ch1 <= ap_const_logic_0;
            else
                if (((rgb2yuv_1_U0_ap_done and rgb2yuv_1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_p_yuv_channels_ch1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_p_yuv_channels_ch1 <= ap_sync_channel_write_p_yuv_channels_ch1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_p_yuv_channels_ch2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_p_yuv_channels_ch2 <= ap_const_logic_0;
            else
                if (((rgb2yuv_1_U0_ap_done and rgb2yuv_1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_p_yuv_channels_ch2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_p_yuv_channels_ch2 <= ap_sync_channel_write_p_yuv_channels_ch2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_p_yuv_channels_ch3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_p_yuv_channels_ch3 <= ap_const_logic_0;
            else
                if (((rgb2yuv_1_U0_ap_done and rgb2yuv_1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_p_yuv_channels_ch3 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_p_yuv_channels_ch3 <= ap_sync_channel_write_p_yuv_channels_ch3;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_p_yuv_height_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_p_yuv_height <= ap_const_logic_0;
            else
                if (((rgb2yuv_1_U0_ap_done and rgb2yuv_1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_p_yuv_height <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_p_yuv_height <= ap_sync_channel_write_p_yuv_height;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_p_yuv_width_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_p_yuv_width <= ap_const_logic_0;
            else
                if (((rgb2yuv_1_U0_ap_done and rgb2yuv_1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_p_yuv_width <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_p_yuv_width <= ap_sync_channel_write_p_yuv_width;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_rgb2yuv_1_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_rgb2yuv_1_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_rgb2yuv_1_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_rgb2yuv_1_U0_ap_ready <= ap_sync_rgb2yuv_1_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ap_channel_done_p_scale_channels_ch1 <= (yuv_scale_U0_ap_done and (ap_sync_reg_channel_write_p_scale_channels_ch1 xor ap_const_logic_1));
    ap_channel_done_p_scale_channels_ch2 <= (yuv_scale_U0_ap_done and (ap_sync_reg_channel_write_p_scale_channels_ch2 xor ap_const_logic_1));
    ap_channel_done_p_scale_channels_ch3 <= (yuv_scale_U0_ap_done and (ap_sync_reg_channel_write_p_scale_channels_ch3 xor ap_const_logic_1));
    ap_channel_done_p_scale_height <= (yuv_scale_U0_ap_done and (ap_sync_reg_channel_write_p_scale_height xor ap_const_logic_1));
    ap_channel_done_p_scale_width <= (yuv_scale_U0_ap_done and (ap_sync_reg_channel_write_p_scale_width xor ap_const_logic_1));
    ap_channel_done_p_yuv_channels_ch1 <= (rgb2yuv_1_U0_ap_done and (ap_sync_reg_channel_write_p_yuv_channels_ch1 xor ap_const_logic_1));
    ap_channel_done_p_yuv_channels_ch2 <= (rgb2yuv_1_U0_ap_done and (ap_sync_reg_channel_write_p_yuv_channels_ch2 xor ap_const_logic_1));
    ap_channel_done_p_yuv_channels_ch3 <= (rgb2yuv_1_U0_ap_done and (ap_sync_reg_channel_write_p_yuv_channels_ch3 xor ap_const_logic_1));
    ap_channel_done_p_yuv_height <= (rgb2yuv_1_U0_ap_done and (ap_sync_reg_channel_write_p_yuv_height xor ap_const_logic_1));
    ap_channel_done_p_yuv_width <= (rgb2yuv_1_U0_ap_done and (ap_sync_reg_channel_write_p_yuv_width xor ap_const_logic_1));
    ap_done <= yuv2rgb_1_U0_ap_done;
    ap_idle <= (yuv_scale_U0_ap_idle and yuv2rgb_1_U0_ap_idle and rgb2yuv_1_U0_ap_idle and (p_scale_height_empty_n xor ap_const_logic_1) and (p_scale_width_empty_n xor ap_const_logic_1) and (p_yuv_height_empty_n xor ap_const_logic_1) and (p_yuv_width_empty_n xor ap_const_logic_1) and (p_scale_channels_ch3_t_empty_n xor ap_const_logic_1) and (p_scale_channels_ch2_t_empty_n xor ap_const_logic_1) and (p_scale_channels_ch1_t_empty_n xor ap_const_logic_1) and (p_yuv_channels_ch3_t_empty_n xor ap_const_logic_1) and (p_yuv_channels_ch2_t_empty_n xor ap_const_logic_1) and (p_yuv_channels_ch1_t_empty_n xor ap_const_logic_1) and entry_proc_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_channel_write_p_scale_channels_ch1 <= ((yuv_scale_U0_out_channels_ch1_full_n and ap_channel_done_p_scale_channels_ch1) or ap_sync_reg_channel_write_p_scale_channels_ch1);
    ap_sync_channel_write_p_scale_channels_ch2 <= ((yuv_scale_U0_out_channels_ch2_full_n and ap_channel_done_p_scale_channels_ch2) or ap_sync_reg_channel_write_p_scale_channels_ch2);
    ap_sync_channel_write_p_scale_channels_ch3 <= ((yuv_scale_U0_out_channels_ch3_full_n and ap_channel_done_p_scale_channels_ch3) or ap_sync_reg_channel_write_p_scale_channels_ch3);
    ap_sync_channel_write_p_scale_height <= ((p_scale_height_full_n and ap_channel_done_p_scale_height) or ap_sync_reg_channel_write_p_scale_height);
    ap_sync_channel_write_p_scale_width <= ((p_scale_width_full_n and ap_channel_done_p_scale_width) or ap_sync_reg_channel_write_p_scale_width);
    ap_sync_channel_write_p_yuv_channels_ch1 <= ((rgb2yuv_1_U0_out_channels_ch1_full_n and ap_channel_done_p_yuv_channels_ch1) or ap_sync_reg_channel_write_p_yuv_channels_ch1);
    ap_sync_channel_write_p_yuv_channels_ch2 <= ((rgb2yuv_1_U0_out_channels_ch2_full_n and ap_channel_done_p_yuv_channels_ch2) or ap_sync_reg_channel_write_p_yuv_channels_ch2);
    ap_sync_channel_write_p_yuv_channels_ch3 <= ((rgb2yuv_1_U0_out_channels_ch3_full_n and ap_channel_done_p_yuv_channels_ch3) or ap_sync_reg_channel_write_p_yuv_channels_ch3);
    ap_sync_channel_write_p_yuv_height <= ((p_yuv_height_full_n and ap_channel_done_p_yuv_height) or ap_sync_reg_channel_write_p_yuv_height);
    ap_sync_channel_write_p_yuv_width <= ((p_yuv_width_full_n and ap_channel_done_p_yuv_width) or ap_sync_reg_channel_write_p_yuv_width);
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_ready <= (ap_sync_rgb2yuv_1_U0_ap_ready and ap_sync_entry_proc_U0_ap_ready);
    ap_sync_rgb2yuv_1_U0_ap_ready <= (rgb2yuv_1_U0_ap_ready or ap_sync_reg_rgb2yuv_1_U0_ap_ready);
    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    in_channels_ch1_address0 <= rgb2yuv_1_U0_in_channels_ch1_address0;
    in_channels_ch1_address1 <= ap_const_lv22_0;
    in_channels_ch1_ce0 <= rgb2yuv_1_U0_in_channels_ch1_ce0;
    in_channels_ch1_ce1 <= ap_const_logic_0;
    in_channels_ch1_d0 <= ap_const_lv8_0;
    in_channels_ch1_d1 <= ap_const_lv8_0;
    in_channels_ch1_we0 <= ap_const_logic_0;
    in_channels_ch1_we1 <= ap_const_logic_0;
    in_channels_ch2_address0 <= rgb2yuv_1_U0_in_channels_ch2_address0;
    in_channels_ch2_address1 <= ap_const_lv22_0;
    in_channels_ch2_ce0 <= rgb2yuv_1_U0_in_channels_ch2_ce0;
    in_channels_ch2_ce1 <= ap_const_logic_0;
    in_channels_ch2_d0 <= ap_const_lv8_0;
    in_channels_ch2_d1 <= ap_const_lv8_0;
    in_channels_ch2_we0 <= ap_const_logic_0;
    in_channels_ch2_we1 <= ap_const_logic_0;
    in_channels_ch3_address0 <= rgb2yuv_1_U0_in_channels_ch3_address0;
    in_channels_ch3_address1 <= ap_const_lv22_0;
    in_channels_ch3_ce0 <= rgb2yuv_1_U0_in_channels_ch3_ce0;
    in_channels_ch3_ce1 <= ap_const_logic_0;
    in_channels_ch3_d0 <= ap_const_lv8_0;
    in_channels_ch3_d1 <= ap_const_lv8_0;
    in_channels_ch3_we0 <= ap_const_logic_0;
    in_channels_ch3_we1 <= ap_const_logic_0;
    out_channels_ch1_address0 <= yuv2rgb_1_U0_out_channels_ch1_address0;
    out_channels_ch1_address1 <= ap_const_lv22_0;
    out_channels_ch1_ce0 <= yuv2rgb_1_U0_out_channels_ch1_ce0;
    out_channels_ch1_ce1 <= ap_const_logic_0;
    out_channels_ch1_d0 <= yuv2rgb_1_U0_out_channels_ch1_d0;
    out_channels_ch1_d1 <= ap_const_lv8_0;
    out_channels_ch1_we0 <= yuv2rgb_1_U0_out_channels_ch1_we0;
    out_channels_ch1_we1 <= ap_const_logic_0;
    out_channels_ch2_address0 <= yuv2rgb_1_U0_out_channels_ch2_address0;
    out_channels_ch2_address1 <= ap_const_lv22_0;
    out_channels_ch2_ce0 <= yuv2rgb_1_U0_out_channels_ch2_ce0;
    out_channels_ch2_ce1 <= ap_const_logic_0;
    out_channels_ch2_d0 <= yuv2rgb_1_U0_out_channels_ch2_d0;
    out_channels_ch2_d1 <= ap_const_lv8_0;
    out_channels_ch2_we0 <= yuv2rgb_1_U0_out_channels_ch2_we0;
    out_channels_ch2_we1 <= ap_const_logic_0;
    out_channels_ch3_address0 <= yuv2rgb_1_U0_out_channels_ch3_address0;
    out_channels_ch3_address1 <= ap_const_lv22_0;
    out_channels_ch3_ce0 <= yuv2rgb_1_U0_out_channels_ch3_ce0;
    out_channels_ch3_ce1 <= ap_const_logic_0;
    out_channels_ch3_d0 <= yuv2rgb_1_U0_out_channels_ch3_d0;
    out_channels_ch3_d1 <= ap_const_lv8_0;
    out_channels_ch3_we0 <= yuv2rgb_1_U0_out_channels_ch3_we0;
    out_channels_ch3_we1 <= ap_const_logic_0;
    out_height <= yuv2rgb_1_U0_out_height;
    out_height_ap_vld <= yuv2rgb_1_U0_out_height_ap_vld;
    out_width <= yuv2rgb_1_U0_out_width;
    out_width_ap_vld <= yuv2rgb_1_U0_out_width_ap_vld;
    rgb2yuv_1_U0_ap_continue <= (ap_sync_channel_write_p_yuv_width and ap_sync_channel_write_p_yuv_height and ap_sync_channel_write_p_yuv_channels_ch3 and ap_sync_channel_write_p_yuv_channels_ch2 and ap_sync_channel_write_p_yuv_channels_ch1);
    rgb2yuv_1_U0_ap_start <= ((ap_sync_reg_rgb2yuv_1_U0_ap_ready xor ap_const_logic_1) and ap_start);
    rgb2yuv_1_U0_out_channels_ch1_full_n <= p_yuv_channels_ch1_i_full_n;
    rgb2yuv_1_U0_out_channels_ch2_full_n <= p_yuv_channels_ch2_i_full_n;
    rgb2yuv_1_U0_out_channels_ch3_full_n <= p_yuv_channels_ch3_i_full_n;
    yuv2rgb_1_U0_ap_continue <= ap_const_logic_1;
    yuv2rgb_1_U0_ap_start <= (p_scale_width_empty_n and p_scale_height_empty_n and p_scale_channels_ch3_t_empty_n and p_scale_channels_ch2_t_empty_n and p_scale_channels_ch1_t_empty_n);
    yuv_scale_U0_ap_continue <= (ap_sync_channel_write_p_scale_width and ap_sync_channel_write_p_scale_height and ap_sync_channel_write_p_scale_channels_ch3 and ap_sync_channel_write_p_scale_channels_ch2 and ap_sync_channel_write_p_scale_channels_ch1);
    yuv_scale_U0_ap_start <= (p_yuv_width_empty_n and p_yuv_height_empty_n and p_yuv_channels_ch3_t_empty_n and p_yuv_channels_ch2_t_empty_n and p_yuv_channels_ch1_t_empty_n);
    yuv_scale_U0_out_channels_ch1_full_n <= p_scale_channels_ch1_i_full_n;
    yuv_scale_U0_out_channels_ch2_full_n <= p_scale_channels_ch2_i_full_n;
    yuv_scale_U0_out_channels_ch3_full_n <= p_scale_channels_ch3_i_full_n;
end behav;

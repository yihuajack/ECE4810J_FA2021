-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
-- Version: 2021.1.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv_filter_yuv2rgb_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce0 : OUT STD_LOGIC;
    in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce0 : OUT STD_LOGIC;
    in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce0 : OUT STD_LOGIC;
    in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch1_ce0 : OUT STD_LOGIC;
    out_channels_ch1_we0 : OUT STD_LOGIC;
    out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch2_ce0 : OUT STD_LOGIC;
    out_channels_ch2_we0 : OUT STD_LOGIC;
    out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch3_ce0 : OUT STD_LOGIC;
    out_channels_ch3_we0 : OUT STD_LOGIC;
    out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_width : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_width_ap_vld : OUT STD_LOGIC;
    out_height : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_height_ap_vld : OUT STD_LOGIC );
end;


architecture behav of yuv_filter_yuv2rgb_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_1F0 : STD_LOGIC_VECTOR (8 downto 0) := "111110000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv17_1FF30 : STD_LOGIC_VECTOR (16 downto 0) := "11111111100110000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv18_12A : STD_LOGIC_VECTOR (17 downto 0) := "000000000100101010";
    constant ap_const_lv18_80 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_const_lv16_FF9C : STD_LOGIC_VECTOR (15 downto 0) := "1111111110011100";
    constant ap_const_lv18_199 : STD_LOGIC_VECTOR (17 downto 0) := "000000000110011001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_638_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_reg_711 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln92_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_719 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln89_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln72_fu_279_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln72_reg_724 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln94_1_fu_352_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln94_1_reg_729 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln94_1_fu_363_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln94_1_reg_734 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln94_1_reg_734_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln94_1_reg_734_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln94_1_reg_734_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln94_1_reg_734_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln94_1_reg_734_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal D_fu_378_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal D_reg_757 : STD_LOGIC_VECTOR (7 downto 0);
    signal D_reg_757_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal D_reg_757_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal E_fu_392_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal E_reg_773 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln101_1_fu_405_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_644_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal G_fu_473_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal G_reg_793 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_fu_577_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_reg_798 : STD_LOGIC_VECTOR (7 downto 0);
    signal R_fu_630_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal R_reg_803 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal y_fu_116 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_2_fu_287_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal x_fu_120 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln72_1_fu_312_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten_fu_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln89_fu_265_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_width_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal out_height_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal x_4_fu_306_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln94_fu_319_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln94_1_fu_331_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_cast_fu_323_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_2_cast_fu_335_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln94_fu_343_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln94_fu_349_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln97_fu_368_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal C_fu_372_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln101_1_fu_405_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_655_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln101_3_fu_417_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln101_1_fu_420_p2 : STD_LOGIC_VECTOR (17 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln101_1_fu_420_p2 : signal is "no";
    signal tmp_2_fu_425_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln101_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_441_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln101_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln101_fu_459_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln3_fu_449_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_481_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln102_1_fu_492_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln102_1_fu_488_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln102_2_fu_499_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln102_1_fu_503_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln102_fu_509_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln100_fu_411_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln102_3_fu_513_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln100_4_fu_414_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln102_fu_523_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_4_fu_529_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln102_2_fu_517_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln102_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_545_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln102_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln102_fu_563_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln4_fu_553_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_664_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_fu_585_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln100_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_600_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln100_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln100_fu_616_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln_fu_607_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_638_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_638_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_644_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_644_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_655_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_664_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_638_ce : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_638_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_638_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component yuv_filter_mul_8s_9s_17_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component yuv_filter_mul_mul_16ns_16ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component yuv_filter_mac_muladd_9s_9ns_8ns_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component yuv_filter_mac_muladd_8s_8s_17s_17_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component yuv_filter_mac_muladd_8s_9ns_18s_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    mul_8s_9s_17_1_1_U54 : component yuv_filter_mul_8s_9s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 9,
        dout_WIDTH => 17)
    port map (
        din0 => E_reg_773,
        din1 => mul_ln101_1_fu_405_p1,
        dout => mul_ln101_1_fu_405_p2);

    mul_mul_16ns_16ns_32_4_1_U55 : component yuv_filter_mul_mul_16ns_16ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_638_p0,
        din1 => grp_fu_638_p1,
        ce => grp_fu_638_ce,
        dout => grp_fu_638_p2);

    mac_muladd_9s_9ns_8ns_18_4_1_U56 : component yuv_filter_mac_muladd_9s_9ns_8ns_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => C_fu_372_p2,
        din1 => grp_fu_644_p1,
        din2 => grp_fu_644_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_644_p3);

    mac_muladd_8s_8s_17s_17_4_1_U57 : component yuv_filter_mac_muladd_8s_8s_17s_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 17,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => D_fu_378_p2,
        din1 => grp_fu_655_p1,
        din2 => mul_ln101_1_fu_405_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_655_p3);

    mac_muladd_8s_9ns_18s_18_4_1_U58 : component yuv_filter_mac_muladd_8s_9ns_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => E_fu_392_p2,
        din1 => grp_fu_664_p1,
        din2 => grp_fu_644_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_664_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    out_height_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_height_preg <= ap_const_lv16_0;
            else
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    out_height_preg <= p_read1;
                end if; 
            end if;
        end if;
    end process;


    out_width_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_width_preg <= ap_const_lv16_0;
            else
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    out_width_preg <= p_read;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_fu_124 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln89_fu_260_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_fu_124 <= add_ln89_fu_265_p2;
            end if; 
        end if;
    end process;

    x_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x_fu_120 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                x_fu_120 <= select_ln72_1_fu_312_p3;
            end if; 
        end if;
    end process;

    y_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y_fu_116 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln89_fu_260_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                y_fu_116 <= y_2_fu_287_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                B_reg_798 <= B_fu_577_p3;
                D_reg_757 <= D_fu_378_p2;
                D_reg_757_pp0_iter4_reg <= D_reg_757;
                D_reg_757_pp0_iter5_reg <= D_reg_757_pp0_iter4_reg;
                E_reg_773 <= E_fu_392_p2;
                G_reg_793 <= G_fu_473_p3;
                R_reg_803 <= R_fu_630_p3;
                    zext_ln94_1_reg_734(21 downto 0) <= zext_ln94_1_fu_363_p1(21 downto 0);
                    zext_ln94_1_reg_734_pp0_iter3_reg(21 downto 0) <= zext_ln94_1_reg_734(21 downto 0);
                    zext_ln94_1_reg_734_pp0_iter4_reg(21 downto 0) <= zext_ln94_1_reg_734_pp0_iter3_reg(21 downto 0);
                    zext_ln94_1_reg_734_pp0_iter5_reg(21 downto 0) <= zext_ln94_1_reg_734_pp0_iter4_reg(21 downto 0);
                    zext_ln94_1_reg_734_pp0_iter6_reg(21 downto 0) <= zext_ln94_1_reg_734_pp0_iter5_reg(21 downto 0);
                    zext_ln94_1_reg_734_pp0_iter7_reg(21 downto 0) <= zext_ln94_1_reg_734_pp0_iter6_reg(21 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln94_1_reg_729 <= add_ln94_1_fu_352_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                bound_reg_711 <= grp_fu_638_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln89_fu_260_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln92_reg_719 <= icmp_ln92_fu_274_p2;
                select_ln72_reg_724 <= select_ln72_fu_279_p3;
            end if;
        end if;
    end process;
    zext_ln94_1_reg_734(63 downto 22) <= "000000000000000000000000000000000000000000";
    zext_ln94_1_reg_734_pp0_iter3_reg(63 downto 22) <= "000000000000000000000000000000000000000000";
    zext_ln94_1_reg_734_pp0_iter4_reg(63 downto 22) <= "000000000000000000000000000000000000000000";
    zext_ln94_1_reg_734_pp0_iter5_reg(63 downto 22) <= "000000000000000000000000000000000000000000";
    zext_ln94_1_reg_734_pp0_iter6_reg(63 downto 22) <= "000000000000000000000000000000000000000000";
    zext_ln94_1_reg_734_pp0_iter7_reg(63 downto 22) <= "000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln89_fu_260_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln89_fu_260_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln89_fu_260_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    B_fu_577_p3 <= 
        select_ln102_fu_563_p3 when (or_ln102_fu_571_p2(0) = '1') else 
        trunc_ln4_fu_553_p4;
    C_fu_372_p2 <= std_logic_vector(unsigned(zext_ln97_fu_368_p1) + unsigned(ap_const_lv9_1F0));
    D_fu_378_p2 <= (in_channels_ch2_q0 xor ap_const_lv8_80);
    E_fu_392_p2 <= (in_channels_ch3_q0 xor ap_const_lv8_80);
    G_fu_473_p3 <= 
        select_ln101_fu_459_p3 when (or_ln101_fu_467_p2(0) = '1') else 
        trunc_ln3_fu_449_p4;
    R_fu_630_p3 <= 
        select_ln100_fu_616_p3 when (or_ln100_fu_624_p2(0) = '1') else 
        trunc_ln_fu_607_p4;
    add_ln101_1_fu_420_p2 <= std_logic_vector(signed(sext_ln101_3_fu_417_p1) + signed(grp_fu_644_p3));
    add_ln102_1_fu_503_p2 <= std_logic_vector(signed(sext_ln102_1_fu_488_p1) + signed(sext_ln102_2_fu_499_p1));
    add_ln102_2_fu_517_p2 <= std_logic_vector(unsigned(trunc_ln102_fu_509_p1) + unsigned(trunc_ln100_fu_411_p1));
    add_ln102_fu_523_p2 <= std_logic_vector(signed(sext_ln102_3_fu_513_p1) + signed(sext_ln100_4_fu_414_p1));
    add_ln89_fu_265_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_124) + unsigned(ap_const_lv32_1));
    add_ln94_1_fu_352_p2 <= std_logic_vector(unsigned(add_ln94_fu_343_p2) + unsigned(zext_ln94_fu_349_p1));
    add_ln94_fu_343_p2 <= std_logic_vector(unsigned(tmp_cast_fu_323_p3) + unsigned(tmp_2_cast_fu_335_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(5);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_ST_fsm_state14_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln89_fu_260_p2)
    begin
        if ((icmp_ln89_fu_260_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_638_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_logic_1 = ap_CS_fsm_state1) and ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))))) then 
            grp_fu_638_ce <= ap_const_logic_0;
        else 
            grp_fu_638_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_638_p0 <= grp_fu_638_p00(16 - 1 downto 0);
    grp_fu_638_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read),32));
    grp_fu_638_p1 <= grp_fu_638_p10(16 - 1 downto 0);
    grp_fu_638_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read1),32));
    grp_fu_644_p1 <= ap_const_lv18_12A(9 - 1 downto 0);
    grp_fu_644_p2 <= ap_const_lv18_80(8 - 1 downto 0);
    grp_fu_655_p1 <= ap_const_lv16_FF9C(8 - 1 downto 0);
    grp_fu_664_p1 <= ap_const_lv18_199(9 - 1 downto 0);
    icmp_ln100_fu_594_p2 <= "1" when (tmp_fu_585_p4 = ap_const_lv2_1) else "0";
    icmp_ln101_fu_435_p2 <= "1" when (tmp_2_fu_425_p4 = ap_const_lv2_1) else "0";
    icmp_ln102_fu_539_p2 <= "1" when (signed(tmp_4_fu_529_p4) > signed(ap_const_lv3_0)) else "0";
    icmp_ln89_fu_260_p2 <= "1" when (indvar_flatten_fu_124 = bound_reg_711) else "0";
    icmp_ln92_fu_274_p2 <= "1" when (y_fu_116 = p_read1) else "0";
    in_channels_ch1_address0 <= zext_ln94_1_fu_363_p1(22 - 1 downto 0);

    in_channels_ch1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch2_address0 <= zext_ln94_1_fu_363_p1(22 - 1 downto 0);

    in_channels_ch2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch3_address0 <= zext_ln94_1_reg_734(22 - 1 downto 0);

    in_channels_ch3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln101_1_fu_405_p1 <= ap_const_lv17_1FF30(9 - 1 downto 0);
    or_ln100_fu_624_p2 <= (tmp_1_fu_600_p3 or icmp_ln100_fu_594_p2);
    or_ln101_fu_467_p2 <= (tmp_3_fu_441_p3 or icmp_ln101_fu_435_p2);
    or_ln102_fu_571_p2 <= (tmp_5_fu_545_p3 or icmp_ln102_fu_539_p2);
    out_channels_ch1_address0 <= zext_ln94_1_reg_734_pp0_iter7_reg(22 - 1 downto 0);

    out_channels_ch1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_d0 <= R_reg_803;

    out_channels_ch1_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_channels_ch1_we0 <= ap_const_logic_1;
        else 
            out_channels_ch1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_address0 <= zext_ln94_1_reg_734_pp0_iter6_reg(22 - 1 downto 0);

    out_channels_ch2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_d0 <= G_reg_793;

    out_channels_ch2_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_channels_ch2_we0 <= ap_const_logic_1;
        else 
            out_channels_ch2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_address0 <= zext_ln94_1_reg_734_pp0_iter6_reg(22 - 1 downto 0);

    out_channels_ch3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_d0 <= B_reg_798;

    out_channels_ch3_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_channels_ch3_we0 <= ap_const_logic_1;
        else 
            out_channels_ch3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_height_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read1, out_height_preg)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_height <= p_read1;
        else 
            out_height <= out_height_preg;
        end if; 
    end process;


    out_height_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_height_ap_vld <= ap_const_logic_1;
        else 
            out_height_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out_width_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read, out_width_preg)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_width <= p_read;
        else 
            out_width <= out_width_preg;
        end if; 
    end process;


    out_width_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_width_ap_vld <= ap_const_logic_1;
        else 
            out_width_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln100_fu_616_p3 <= 
        ap_const_lv8_FF when (icmp_ln100_fu_594_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln101_fu_459_p3 <= 
        ap_const_lv8_FF when (icmp_ln101_fu_435_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln102_fu_563_p3 <= 
        ap_const_lv8_FF when (icmp_ln102_fu_539_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln72_1_fu_312_p3 <= 
        x_4_fu_306_p2 when (icmp_ln92_reg_719(0) = '1') else 
        x_fu_120;
    select_ln72_fu_279_p3 <= 
        ap_const_lv16_0 when (icmp_ln92_fu_274_p2(0) = '1') else 
        y_fu_116;
        sext_ln100_4_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_644_p3),19));

        sext_ln101_3_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_655_p3),18));

        sext_ln102_1_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_481_p3),18));

        sext_ln102_2_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln102_1_fu_492_p3),18));

        sext_ln102_3_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln102_1_fu_503_p2),19));

    shl_ln102_1_fu_492_p3 <= (D_reg_757_pp0_iter5_reg & ap_const_lv2_0);
    shl_ln_fu_481_p3 <= (D_reg_757_pp0_iter5_reg & ap_const_lv9_0);
    tmp_1_fu_600_p3 <= grp_fu_664_p3(17 downto 17);
    tmp_2_cast_fu_335_p3 <= (trunc_ln94_1_fu_331_p1 & ap_const_lv8_0);
    tmp_2_fu_425_p4 <= add_ln101_1_fu_420_p2(17 downto 16);
    tmp_3_fu_441_p3 <= add_ln101_1_fu_420_p2(17 downto 17);
    tmp_4_fu_529_p4 <= add_ln102_fu_523_p2(18 downto 16);
    tmp_5_fu_545_p3 <= add_ln102_fu_523_p2(18 downto 18);
    tmp_cast_fu_323_p3 <= (trunc_ln94_fu_319_p1 & ap_const_lv10_0);
    tmp_fu_585_p4 <= grp_fu_664_p3(17 downto 16);
    trunc_ln100_fu_411_p1 <= grp_fu_644_p3(16 - 1 downto 0);
    trunc_ln102_fu_509_p1 <= add_ln102_1_fu_503_p2(16 - 1 downto 0);
    trunc_ln3_fu_449_p4 <= add_ln101_1_fu_420_p2(15 downto 8);
    trunc_ln4_fu_553_p4 <= add_ln102_2_fu_517_p2(15 downto 8);
    trunc_ln94_1_fu_331_p1 <= select_ln72_1_fu_312_p3(14 - 1 downto 0);
    trunc_ln94_fu_319_p1 <= select_ln72_1_fu_312_p3(12 - 1 downto 0);
    trunc_ln_fu_607_p4 <= grp_fu_664_p3(15 downto 8);
    x_4_fu_306_p2 <= std_logic_vector(unsigned(x_fu_120) + unsigned(ap_const_lv16_1));
    y_2_fu_287_p2 <= std_logic_vector(unsigned(select_ln72_fu_279_p3) + unsigned(ap_const_lv16_1));
    zext_ln94_1_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln94_1_reg_729),64));
    zext_ln94_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln72_reg_724),22));
    zext_ln97_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_channels_ch1_q0),9));
end behav;

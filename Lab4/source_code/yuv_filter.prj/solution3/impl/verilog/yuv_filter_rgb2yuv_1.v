// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
// Version: 2021.1.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module yuv_filter_rgb2yuv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_channels_ch1_address0,
        in_channels_ch1_ce0,
        in_channels_ch1_q0,
        in_channels_ch2_address0,
        in_channels_ch2_ce0,
        in_channels_ch2_q0,
        in_channels_ch3_address0,
        in_channels_ch3_ce0,
        in_channels_ch3_q0,
        in_width,
        in_height,
        out_channels_ch1_address0,
        out_channels_ch1_ce0,
        out_channels_ch1_we0,
        out_channels_ch1_d0,
        out_channels_ch2_address0,
        out_channels_ch2_ce0,
        out_channels_ch2_we0,
        out_channels_ch2_d0,
        out_channels_ch3_address0,
        out_channels_ch3_ce0,
        out_channels_ch3_we0,
        out_channels_ch3_d0,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp0_stage0 = 6'd16;
parameter    ap_ST_fsm_state14 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [21:0] in_channels_ch1_address0;
output   in_channels_ch1_ce0;
input  [7:0] in_channels_ch1_q0;
output  [21:0] in_channels_ch2_address0;
output   in_channels_ch2_ce0;
input  [7:0] in_channels_ch2_q0;
output  [21:0] in_channels_ch3_address0;
output   in_channels_ch3_ce0;
input  [7:0] in_channels_ch3_q0;
input  [15:0] in_width;
input  [15:0] in_height;
output  [21:0] out_channels_ch1_address0;
output   out_channels_ch1_ce0;
output   out_channels_ch1_we0;
output  [7:0] out_channels_ch1_d0;
output  [21:0] out_channels_ch2_address0;
output   out_channels_ch2_ce0;
output   out_channels_ch2_we0;
output  [7:0] out_channels_ch2_d0;
output  [21:0] out_channels_ch3_address0;
output   out_channels_ch3_ce0;
output   out_channels_ch3_we0;
output  [7:0] out_channels_ch3_d0;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_channels_ch1_ce0;
reg in_channels_ch2_ce0;
reg in_channels_ch3_ce0;
reg out_channels_ch1_ce0;
reg out_channels_ch1_we0;
reg out_channels_ch2_ce0;
reg out_channels_ch2_we0;
reg out_channels_ch3_ce0;
reg out_channels_ch3_we0;
reg[15:0] ap_return_0;
reg[15:0] ap_return_1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [31:0] grp_fu_559_p2;
reg   [31:0] bound_reg_652;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln52_fu_246_p2;
reg   [0:0] icmp_ln52_reg_660;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state10_pp0_stage0_iter5;
wire    ap_block_state11_pp0_stage0_iter6;
wire    ap_block_state12_pp0_stage0_iter7;
wire    ap_block_state13_pp0_stage0_iter8;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln49_fu_232_p2;
wire   [15:0] select_ln34_fu_251_p3;
reg   [15:0] select_ln34_reg_665;
wire   [21:0] add_ln54_1_fu_324_p2;
reg   [21:0] add_ln54_1_reg_670;
wire   [63:0] zext_ln54_1_fu_335_p1;
reg   [63:0] zext_ln54_1_reg_675;
reg   [63:0] zext_ln54_1_reg_675_pp0_iter3_reg;
reg   [63:0] zext_ln54_1_reg_675_pp0_iter4_reg;
reg   [63:0] zext_ln54_1_reg_675_pp0_iter5_reg;
reg   [63:0] zext_ln54_1_reg_675_pp0_iter6_reg;
reg   [63:0] zext_ln54_1_reg_675_pp0_iter7_reg;
reg   [7:0] R_reg_698;
reg   [7:0] R_reg_698_pp0_iter4_reg;
reg   [7:0] B_reg_704;
reg   [7:0] B_reg_704_pp0_iter4_reg;
reg   [7:0] B_reg_704_pp0_iter5_reg;
reg   [7:0] B_reg_704_pp0_iter6_reg;
wire   [14:0] zext_ln57_fu_340_p1;
reg   [7:0] G_reg_722;
reg   [7:0] G_reg_722_pp0_iter5_reg;
wire   [15:0] zext_ln57_3_fu_348_p1;
wire   [14:0] add_ln57_fu_387_p2;
reg   [14:0] add_ln57_reg_739;
reg   [7:0] trunc_ln_reg_744;
wire   [11:0] shl_ln58_1_fu_432_p3;
reg   [11:0] shl_ln58_1_reg_749;
reg   [7:0] trunc_ln5_reg_764;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
wire    ap_block_pp0_stage0;
reg   [15:0] y_02_fu_104;
wire   [15:0] y_fu_259_p2;
reg    ap_block_state1;
reg   [15:0] x_fu_108;
wire   [15:0] select_ln34_1_fu_284_p3;
reg   [31:0] indvar_flatten_fu_112;
wire   [31:0] add_ln49_fu_237_p2;
wire   [15:0] x_5_fu_278_p2;
wire   [11:0] trunc_ln54_fu_291_p1;
wire   [13:0] trunc_ln54_1_fu_303_p1;
wire   [21:0] tmp_cast_fu_295_p3;
wire   [21:0] tmp_3_cast_fu_307_p3;
wire   [21:0] add_ln54_fu_315_p2;
wire   [21:0] zext_ln54_fu_321_p1;
wire   [13:0] shl_ln_fu_352_p3;
wire   [8:0] shl_ln57_1_fu_363_p3;
wire   [9:0] zext_ln57_2_fu_370_p1;
wire   [9:0] add_ln57_1_fu_377_p2;
wire   [14:0] zext_ln57_7_fu_383_p1;
wire   [14:0] zext_ln57_1_fu_359_p1;
wire   [14:0] shl_ln57_2_fu_393_p3;
wire   [15:0] zext_ln57_5_fu_400_p1;
wire   [15:0] zext_ln57_8_fu_404_p1;
wire   [12:0] grp_fu_565_p3;
wire   [15:0] zext_ln57_9_fu_413_p1;
wire   [15:0] add_ln57_3_fu_407_p2;
wire   [15:0] add_ln57_2_fu_416_p2;
wire  signed [14:0] grp_fu_574_p3;
wire   [12:0] zext_ln58_1_fu_439_p1;
wire   [12:0] sub_ln59_fu_446_p2;
wire   [8:0] shl_ln2_fu_456_p3;
wire  signed [13:0] sext_ln59_fu_452_p1;
wire   [13:0] zext_ln59_fu_463_p1;
wire   [13:0] sub_ln59_1_fu_467_p2;
wire   [14:0] grp_fu_583_p3;
wire   [15:0] zext_ln59_1_fu_477_p1;
wire  signed [15:0] sext_ln59_1_fu_473_p1;
wire   [14:0] shl_ln1_fu_492_p3;
wire   [15:0] zext_ln58_fu_499_p1;
wire   [15:0] zext_ln58_2_fu_503_p1;
wire  signed [15:0] grp_fu_592_p3;
wire   [15:0] sub_ln58_fu_506_p2;
(* use_dsp48 = "no" *) wire   [15:0] add_ln58_2_fu_512_p2;
wire  signed [15:0] grp_fu_601_p3;
wire   [7:0] trunc_ln6_fu_527_p4;
wire    ap_CS_fsm_state14;
wire   [15:0] grp_fu_559_p0;
wire   [15:0] grp_fu_559_p1;
wire   [7:0] grp_fu_565_p0;
wire   [4:0] grp_fu_565_p1;
wire   [7:0] grp_fu_565_p2;
wire   [7:0] grp_fu_574_p0;
wire  signed [6:0] grp_fu_574_p1;
wire   [7:0] grp_fu_574_p2;
wire   [7:0] grp_fu_583_p0;
wire   [6:0] grp_fu_583_p1;
wire   [7:0] grp_fu_583_p2;
wire   [7:0] grp_fu_592_p0;
wire  signed [7:0] grp_fu_592_p1;
wire   [7:0] grp_fu_601_p0;
wire  signed [7:0] grp_fu_601_p1;
wire  signed [15:0] grp_fu_601_p2;
reg    grp_fu_559_ce;
reg   [15:0] ap_return_0_preg;
reg   [15:0] ap_return_1_preg;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state14_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] grp_fu_559_p00;
wire   [31:0] grp_fu_559_p10;
wire   [12:0] grp_fu_565_p00;
wire   [12:0] grp_fu_565_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_return_0_preg = 16'd0;
#0 ap_return_1_preg = 16'd0;
end

yuv_filter_mul_mul_16ns_16ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16ns_16ns_32_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_559_p0),
    .din1(grp_fu_559_p1),
    .ce(grp_fu_559_ce),
    .dout(grp_fu_559_p2)
);

yuv_filter_mac_muladd_8ns_5ns_8ns_13_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 13 ))
mac_muladd_8ns_5ns_8ns_13_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_565_p0),
    .din1(grp_fu_565_p1),
    .din2(grp_fu_565_p2),
    .ce(1'b1),
    .dout(grp_fu_565_p3)
);

yuv_filter_mac_muladd_8ns_7s_8ns_15_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 15 ))
mac_muladd_8ns_7s_8ns_15_4_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_574_p0),
    .din1(grp_fu_574_p1),
    .din2(grp_fu_574_p2),
    .ce(1'b1),
    .dout(grp_fu_574_p3)
);

yuv_filter_mac_muladd_8ns_7ns_8ns_15_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 15 ))
mac_muladd_8ns_7ns_8ns_15_4_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_583_p0),
    .din1(grp_fu_583_p1),
    .din2(grp_fu_583_p2),
    .ce(1'b1),
    .dout(grp_fu_583_p3)
);

yuv_filter_mac_muladd_8ns_8s_15s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 15 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_8s_15s_16_4_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_592_p0),
    .din1(grp_fu_592_p1),
    .din2(grp_fu_574_p3),
    .ce(1'b1),
    .dout(grp_fu_592_p3)
);

yuv_filter_mac_muladd_8ns_8s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_8s_16s_16_4_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_601_p0),
    .din1(grp_fu_601_p1),
    .din2(grp_fu_601_p2),
    .ce(1'b1),
    .dout(grp_fu_601_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state5)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_return_0_preg <= in_width;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_return_1_preg <= in_height;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_fu_112 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln49_fu_232_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_fu_112 <= add_ln49_fu_237_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        x_fu_108 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_fu_108 <= select_ln34_1_fu_284_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_02_fu_104 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln49_fu_232_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        y_02_fu_104 <= y_fu_259_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        B_reg_704 <= in_channels_ch3_q0;
        B_reg_704_pp0_iter4_reg <= B_reg_704;
        B_reg_704_pp0_iter5_reg <= B_reg_704_pp0_iter4_reg;
        B_reg_704_pp0_iter6_reg <= B_reg_704_pp0_iter5_reg;
        G_reg_722 <= in_channels_ch2_q0;
        G_reg_722_pp0_iter5_reg <= G_reg_722;
        R_reg_698 <= in_channels_ch1_q0;
        R_reg_698_pp0_iter4_reg <= R_reg_698;
        add_ln57_reg_739[14 : 1] <= add_ln57_fu_387_p2[14 : 1];
        shl_ln58_1_reg_749[11 : 4] <= shl_ln58_1_fu_432_p3[11 : 4];
        trunc_ln5_reg_764 <= {{add_ln58_2_fu_512_p2[15:8]}};
        trunc_ln_reg_744 <= {{add_ln57_2_fu_416_p2[15:8]}};
        zext_ln54_1_reg_675[21 : 0] <= zext_ln54_1_fu_335_p1[21 : 0];
        zext_ln54_1_reg_675_pp0_iter3_reg[21 : 0] <= zext_ln54_1_reg_675[21 : 0];
        zext_ln54_1_reg_675_pp0_iter4_reg[21 : 0] <= zext_ln54_1_reg_675_pp0_iter3_reg[21 : 0];
        zext_ln54_1_reg_675_pp0_iter5_reg[21 : 0] <= zext_ln54_1_reg_675_pp0_iter4_reg[21 : 0];
        zext_ln54_1_reg_675_pp0_iter6_reg[21 : 0] <= zext_ln54_1_reg_675_pp0_iter5_reg[21 : 0];
        zext_ln54_1_reg_675_pp0_iter7_reg[21 : 0] <= zext_ln54_1_reg_675_pp0_iter6_reg[21 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln54_1_reg_670 <= add_ln54_1_fu_324_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bound_reg_652 <= grp_fu_559_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln49_fu_232_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln52_reg_660 <= icmp_ln52_fu_246_p2;
        select_ln34_reg_665 <= select_ln34_fu_251_p3;
    end
end

assign ap_ST_fsm_state14_blk = 1'b0;

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln49_fu_232_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_return_0 = in_width;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_return_1 = in_height;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) | (1'b1 == ap_CS_fsm_state14) | ((1'b1 == ap_CS_fsm_state1) & ((ap_done_reg == 1'b1) | (ap_start == 1'b0))))) begin
        grp_fu_559_ce = 1'b0;
    end else begin
        grp_fu_559_ce = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_channels_ch1_ce0 = 1'b1;
    end else begin
        in_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_channels_ch2_ce0 = 1'b1;
    end else begin
        in_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_channels_ch3_ce0 = 1'b1;
    end else begin
        in_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch1_ce0 = 1'b1;
    end else begin
        out_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch1_we0 = 1'b1;
    end else begin
        out_channels_ch1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch2_ce0 = 1'b1;
    end else begin
        out_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch2_we0 = 1'b1;
    end else begin
        out_channels_ch2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch3_ce0 = 1'b1;
    end else begin
        out_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch3_we0 = 1'b1;
    end else begin
        out_channels_ch3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln49_fu_232_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter8 == 1'b1) & (ap_enable_reg_pp0_iter7 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter8 == 1'b1) & (ap_enable_reg_pp0_iter7 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln49_fu_232_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln49_fu_237_p2 = (indvar_flatten_fu_112 + 32'd1);

assign add_ln54_1_fu_324_p2 = (add_ln54_fu_315_p2 + zext_ln54_fu_321_p1);

assign add_ln54_fu_315_p2 = (tmp_cast_fu_295_p3 + tmp_3_cast_fu_307_p3);

assign add_ln57_1_fu_377_p2 = (zext_ln57_2_fu_370_p1 + 10'd128);

assign add_ln57_2_fu_416_p2 = (zext_ln57_9_fu_413_p1 + add_ln57_3_fu_407_p2);

assign add_ln57_3_fu_407_p2 = (zext_ln57_5_fu_400_p1 + zext_ln57_8_fu_404_p1);

assign add_ln57_fu_387_p2 = (zext_ln57_7_fu_383_p1 + zext_ln57_1_fu_359_p1);

assign add_ln58_2_fu_512_p2 = ($signed(grp_fu_592_p3) + $signed(sub_ln58_fu_506_p2));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_559_p0 = grp_fu_559_p00;

assign grp_fu_559_p00 = in_width;

assign grp_fu_559_p1 = grp_fu_559_p10;

assign grp_fu_559_p10 = in_height;

assign grp_fu_565_p0 = grp_fu_565_p00;

assign grp_fu_565_p00 = in_channels_ch3_q0;

assign grp_fu_565_p1 = 13'd25;

assign grp_fu_565_p2 = grp_fu_565_p20;

assign grp_fu_565_p20 = G_reg_722;

assign grp_fu_574_p0 = zext_ln57_fu_340_p1;

assign grp_fu_574_p1 = 15'd32730;

assign grp_fu_574_p2 = 15'd128;

assign grp_fu_583_p0 = zext_ln57_fu_340_p1;

assign grp_fu_583_p1 = 15'd122;

assign grp_fu_583_p2 = 15'd128;

assign grp_fu_592_p0 = zext_ln57_3_fu_348_p1;

assign grp_fu_592_p1 = 16'd65462;

assign grp_fu_601_p0 = zext_ln57_3_fu_348_p1;

assign grp_fu_601_p1 = 16'd65442;

assign grp_fu_601_p2 = ($signed(zext_ln59_1_fu_477_p1) + $signed(sext_ln59_1_fu_473_p1));

assign icmp_ln49_fu_232_p2 = ((indvar_flatten_fu_112 == bound_reg_652) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_246_p2 = ((y_02_fu_104 == in_height) ? 1'b1 : 1'b0);

assign in_channels_ch1_address0 = zext_ln54_1_fu_335_p1;

assign in_channels_ch2_address0 = zext_ln54_1_reg_675;

assign in_channels_ch3_address0 = zext_ln54_1_fu_335_p1;

assign out_channels_ch1_address0 = zext_ln54_1_reg_675_pp0_iter6_reg;

assign out_channels_ch1_d0 = (trunc_ln_reg_744 + 8'd16);

assign out_channels_ch2_address0 = zext_ln54_1_reg_675_pp0_iter7_reg;

assign out_channels_ch2_d0 = (trunc_ln5_reg_764 ^ 8'd128);

assign out_channels_ch3_address0 = zext_ln54_1_reg_675_pp0_iter6_reg;

assign out_channels_ch3_d0 = (trunc_ln6_fu_527_p4 ^ 8'd128);

assign select_ln34_1_fu_284_p3 = ((icmp_ln52_reg_660[0:0] == 1'b1) ? x_5_fu_278_p2 : x_fu_108);

assign select_ln34_fu_251_p3 = ((icmp_ln52_fu_246_p2[0:0] == 1'b1) ? 16'd0 : y_02_fu_104);

assign sext_ln59_1_fu_473_p1 = $signed(sub_ln59_1_fu_467_p2);

assign sext_ln59_fu_452_p1 = $signed(sub_ln59_fu_446_p2);

assign shl_ln1_fu_492_p3 = {{B_reg_704_pp0_iter6_reg}, {7'd0}};

assign shl_ln2_fu_456_p3 = {{B_reg_704_pp0_iter5_reg}, {1'd0}};

assign shl_ln57_1_fu_363_p3 = {{R_reg_698_pp0_iter4_reg}, {1'd0}};

assign shl_ln57_2_fu_393_p3 = {{G_reg_722_pp0_iter5_reg}, {7'd0}};

assign shl_ln58_1_fu_432_p3 = {{B_reg_704_pp0_iter5_reg}, {4'd0}};

assign shl_ln_fu_352_p3 = {{R_reg_698_pp0_iter4_reg}, {6'd0}};

assign sub_ln58_fu_506_p2 = (zext_ln58_fu_499_p1 - zext_ln58_2_fu_503_p1);

assign sub_ln59_1_fu_467_p2 = ($signed(sext_ln59_fu_452_p1) - $signed(zext_ln59_fu_463_p1));

assign sub_ln59_fu_446_p2 = (13'd0 - zext_ln58_1_fu_439_p1);

assign tmp_3_cast_fu_307_p3 = {{trunc_ln54_1_fu_303_p1}, {8'd0}};

assign tmp_cast_fu_295_p3 = {{trunc_ln54_fu_291_p1}, {10'd0}};

assign trunc_ln54_1_fu_303_p1 = select_ln34_1_fu_284_p3[13:0];

assign trunc_ln54_fu_291_p1 = select_ln34_1_fu_284_p3[11:0];

assign trunc_ln6_fu_527_p4 = {{grp_fu_601_p3[15:8]}};

assign x_5_fu_278_p2 = (x_fu_108 + 16'd1);

assign y_fu_259_p2 = (select_ln34_fu_251_p3 + 16'd1);

assign zext_ln54_1_fu_335_p1 = add_ln54_1_reg_670;

assign zext_ln54_fu_321_p1 = select_ln34_reg_665;

assign zext_ln57_1_fu_359_p1 = shl_ln_fu_352_p3;

assign zext_ln57_2_fu_370_p1 = shl_ln57_1_fu_363_p3;

assign zext_ln57_3_fu_348_p1 = in_channels_ch2_q0;

assign zext_ln57_5_fu_400_p1 = shl_ln57_2_fu_393_p3;

assign zext_ln57_7_fu_383_p1 = add_ln57_1_fu_377_p2;

assign zext_ln57_8_fu_404_p1 = add_ln57_reg_739;

assign zext_ln57_9_fu_413_p1 = grp_fu_565_p3;

assign zext_ln57_fu_340_p1 = in_channels_ch1_q0;

assign zext_ln58_1_fu_439_p1 = shl_ln58_1_fu_432_p3;

assign zext_ln58_2_fu_503_p1 = shl_ln58_1_reg_749;

assign zext_ln58_fu_499_p1 = shl_ln1_fu_492_p3;

assign zext_ln59_1_fu_477_p1 = grp_fu_583_p3;

assign zext_ln59_fu_463_p1 = shl_ln2_fu_456_p3;

always @ (posedge ap_clk) begin
    zext_ln54_1_reg_675[63:22] <= 42'b000000000000000000000000000000000000000000;
    zext_ln54_1_reg_675_pp0_iter3_reg[63:22] <= 42'b000000000000000000000000000000000000000000;
    zext_ln54_1_reg_675_pp0_iter4_reg[63:22] <= 42'b000000000000000000000000000000000000000000;
    zext_ln54_1_reg_675_pp0_iter5_reg[63:22] <= 42'b000000000000000000000000000000000000000000;
    zext_ln54_1_reg_675_pp0_iter6_reg[63:22] <= 42'b000000000000000000000000000000000000000000;
    zext_ln54_1_reg_675_pp0_iter7_reg[63:22] <= 42'b000000000000000000000000000000000000000000;
    add_ln57_reg_739[0] <= 1'b0;
    shl_ln58_1_reg_749[3:0] <= 4'b0000;
end

endmodule //yuv_filter_rgb2yuv_1

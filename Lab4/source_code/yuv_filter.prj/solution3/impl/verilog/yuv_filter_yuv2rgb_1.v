// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
// Version: 2021.1.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module yuv_filter_yuv2rgb_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_channels_ch1_address0,
        in_channels_ch1_ce0,
        in_channels_ch1_q0,
        in_channels_ch2_address0,
        in_channels_ch2_ce0,
        in_channels_ch2_q0,
        in_channels_ch3_address0,
        in_channels_ch3_ce0,
        in_channels_ch3_q0,
        p_read,
        p_read1,
        out_channels_ch1_address0,
        out_channels_ch1_ce0,
        out_channels_ch1_we0,
        out_channels_ch1_d0,
        out_channels_ch2_address0,
        out_channels_ch2_ce0,
        out_channels_ch2_we0,
        out_channels_ch2_d0,
        out_channels_ch3_address0,
        out_channels_ch3_ce0,
        out_channels_ch3_we0,
        out_channels_ch3_d0,
        out_width,
        out_width_ap_vld,
        out_height,
        out_height_ap_vld
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp0_stage0 = 6'd16;
parameter    ap_ST_fsm_state14 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [21:0] in_channels_ch1_address0;
output   in_channels_ch1_ce0;
input  [7:0] in_channels_ch1_q0;
output  [21:0] in_channels_ch2_address0;
output   in_channels_ch2_ce0;
input  [7:0] in_channels_ch2_q0;
output  [21:0] in_channels_ch3_address0;
output   in_channels_ch3_ce0;
input  [7:0] in_channels_ch3_q0;
input  [15:0] p_read;
input  [15:0] p_read1;
output  [21:0] out_channels_ch1_address0;
output   out_channels_ch1_ce0;
output   out_channels_ch1_we0;
output  [7:0] out_channels_ch1_d0;
output  [21:0] out_channels_ch2_address0;
output   out_channels_ch2_ce0;
output   out_channels_ch2_we0;
output  [7:0] out_channels_ch2_d0;
output  [21:0] out_channels_ch3_address0;
output   out_channels_ch3_ce0;
output   out_channels_ch3_we0;
output  [7:0] out_channels_ch3_d0;
output  [15:0] out_width;
output   out_width_ap_vld;
output  [15:0] out_height;
output   out_height_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_channels_ch1_ce0;
reg in_channels_ch2_ce0;
reg in_channels_ch3_ce0;
reg out_channels_ch1_ce0;
reg out_channels_ch1_we0;
reg out_channels_ch2_ce0;
reg out_channels_ch2_we0;
reg out_channels_ch3_ce0;
reg out_channels_ch3_we0;
reg[15:0] out_width;
reg out_width_ap_vld;
reg[15:0] out_height;
reg out_height_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [31:0] grp_fu_638_p2;
reg   [31:0] bound_reg_711;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln92_fu_274_p2;
reg   [0:0] icmp_ln92_reg_719;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state10_pp0_stage0_iter5;
wire    ap_block_state11_pp0_stage0_iter6;
wire    ap_block_state12_pp0_stage0_iter7;
wire    ap_block_state13_pp0_stage0_iter8;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln89_fu_260_p2;
wire   [15:0] select_ln72_fu_279_p3;
reg   [15:0] select_ln72_reg_724;
wire   [21:0] add_ln94_1_fu_352_p2;
reg   [21:0] add_ln94_1_reg_729;
wire   [63:0] zext_ln94_1_fu_363_p1;
reg   [63:0] zext_ln94_1_reg_734;
reg   [63:0] zext_ln94_1_reg_734_pp0_iter3_reg;
reg   [63:0] zext_ln94_1_reg_734_pp0_iter4_reg;
reg   [63:0] zext_ln94_1_reg_734_pp0_iter5_reg;
reg   [63:0] zext_ln94_1_reg_734_pp0_iter6_reg;
reg   [63:0] zext_ln94_1_reg_734_pp0_iter7_reg;
wire  signed [7:0] D_fu_378_p2;
reg  signed [7:0] D_reg_757;
reg  signed [7:0] D_reg_757_pp0_iter4_reg;
reg  signed [7:0] D_reg_757_pp0_iter5_reg;
wire  signed [7:0] E_fu_392_p2;
reg  signed [7:0] E_reg_773;
wire  signed [16:0] mul_ln101_1_fu_405_p2;
wire  signed [17:0] grp_fu_644_p3;
reg    ap_enable_reg_pp0_iter6;
wire   [7:0] G_fu_473_p3;
reg   [7:0] G_reg_793;
wire   [7:0] B_fu_577_p3;
reg   [7:0] B_reg_798;
wire   [7:0] R_fu_630_p3;
reg   [7:0] R_reg_803;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
wire    ap_block_pp0_stage0;
reg   [15:0] y_fu_116;
wire   [15:0] y_2_fu_287_p2;
reg    ap_block_state1;
reg   [15:0] x_fu_120;
wire   [15:0] select_ln72_1_fu_312_p3;
reg   [31:0] indvar_flatten_fu_124;
wire   [31:0] add_ln89_fu_265_p2;
reg   [15:0] out_width_preg;
reg   [15:0] out_height_preg;
wire   [15:0] x_4_fu_306_p2;
wire   [11:0] trunc_ln94_fu_319_p1;
wire   [13:0] trunc_ln94_1_fu_331_p1;
wire   [21:0] tmp_cast_fu_323_p3;
wire   [21:0] tmp_2_cast_fu_335_p3;
wire   [21:0] add_ln94_fu_343_p2;
wire   [21:0] zext_ln94_fu_349_p1;
wire   [8:0] zext_ln97_fu_368_p1;
wire  signed [8:0] C_fu_372_p2;
wire  signed [8:0] mul_ln101_1_fu_405_p1;
wire  signed [16:0] grp_fu_655_p3;
wire  signed [17:0] sext_ln101_3_fu_417_p1;
(* use_dsp48 = "no" *) wire   [17:0] add_ln101_1_fu_420_p2;
wire   [1:0] tmp_2_fu_425_p4;
wire   [0:0] icmp_ln101_fu_435_p2;
wire   [0:0] tmp_3_fu_441_p3;
wire   [0:0] or_ln101_fu_467_p2;
wire   [7:0] select_ln101_fu_459_p3;
wire   [7:0] trunc_ln3_fu_449_p4;
wire   [16:0] shl_ln_fu_481_p3;
wire   [9:0] shl_ln102_1_fu_492_p3;
wire  signed [17:0] sext_ln102_1_fu_488_p1;
wire  signed [17:0] sext_ln102_2_fu_499_p1;
wire  signed [17:0] add_ln102_1_fu_503_p2;
wire   [15:0] trunc_ln102_fu_509_p1;
wire   [15:0] trunc_ln100_fu_411_p1;
wire  signed [18:0] sext_ln102_3_fu_513_p1;
wire  signed [18:0] sext_ln100_4_fu_414_p1;
wire   [18:0] add_ln102_fu_523_p2;
wire   [2:0] tmp_4_fu_529_p4;
wire   [15:0] add_ln102_2_fu_517_p2;
wire   [0:0] icmp_ln102_fu_539_p2;
wire   [0:0] tmp_5_fu_545_p3;
wire   [0:0] or_ln102_fu_571_p2;
wire   [7:0] select_ln102_fu_563_p3;
wire   [7:0] trunc_ln4_fu_553_p4;
wire  signed [17:0] grp_fu_664_p3;
wire   [1:0] tmp_fu_585_p4;
wire   [0:0] icmp_ln100_fu_594_p2;
wire   [0:0] tmp_1_fu_600_p3;
wire   [0:0] or_ln100_fu_624_p2;
wire   [7:0] select_ln100_fu_616_p3;
wire   [7:0] trunc_ln_fu_607_p4;
wire   [15:0] grp_fu_638_p0;
wire   [15:0] grp_fu_638_p1;
wire   [8:0] grp_fu_644_p1;
wire   [7:0] grp_fu_644_p2;
wire  signed [7:0] grp_fu_655_p1;
wire   [8:0] grp_fu_664_p1;
reg    grp_fu_638_ce;
wire    ap_CS_fsm_state14;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state14_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] grp_fu_638_p00;
wire   [31:0] grp_fu_638_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 out_width_preg = 16'd0;
#0 out_height_preg = 16'd0;
end

yuv_filter_mul_8s_9s_17_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 17 ))
mul_8s_9s_17_1_1_U54(
    .din0(E_reg_773),
    .din1(mul_ln101_1_fu_405_p1),
    .dout(mul_ln101_1_fu_405_p2)
);

yuv_filter_mul_mul_16ns_16ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16ns_16ns_32_4_1_U55(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_638_p0),
    .din1(grp_fu_638_p1),
    .ce(grp_fu_638_ce),
    .dout(grp_fu_638_p2)
);

yuv_filter_mac_muladd_9s_9ns_8ns_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
mac_muladd_9s_9ns_8ns_18_4_1_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(C_fu_372_p2),
    .din1(grp_fu_644_p1),
    .din2(grp_fu_644_p2),
    .ce(1'b1),
    .dout(grp_fu_644_p3)
);

yuv_filter_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U57(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(D_fu_378_p2),
    .din1(grp_fu_655_p1),
    .din2(mul_ln101_1_fu_405_p2),
    .ce(1'b1),
    .dout(grp_fu_655_p3)
);

yuv_filter_mac_muladd_8s_9ns_18s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
mac_muladd_8s_9ns_18s_18_4_1_U58(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(E_fu_392_p2),
    .din1(grp_fu_664_p1),
    .din2(grp_fu_644_p3),
    .ce(1'b1),
    .dout(grp_fu_664_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state5)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_height_preg <= 16'd0;
    end else begin
        if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            out_height_preg <= p_read1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_width_preg <= 16'd0;
    end else begin
        if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            out_width_preg <= p_read;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_fu_124 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln89_fu_260_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_fu_124 <= add_ln89_fu_265_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        x_fu_120 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_fu_120 <= select_ln72_1_fu_312_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_fu_116 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln89_fu_260_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        y_fu_116 <= y_2_fu_287_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        B_reg_798 <= B_fu_577_p3;
        D_reg_757 <= D_fu_378_p2;
        D_reg_757_pp0_iter4_reg <= D_reg_757;
        D_reg_757_pp0_iter5_reg <= D_reg_757_pp0_iter4_reg;
        E_reg_773 <= E_fu_392_p2;
        G_reg_793 <= G_fu_473_p3;
        R_reg_803 <= R_fu_630_p3;
        zext_ln94_1_reg_734[21 : 0] <= zext_ln94_1_fu_363_p1[21 : 0];
        zext_ln94_1_reg_734_pp0_iter3_reg[21 : 0] <= zext_ln94_1_reg_734[21 : 0];
        zext_ln94_1_reg_734_pp0_iter4_reg[21 : 0] <= zext_ln94_1_reg_734_pp0_iter3_reg[21 : 0];
        zext_ln94_1_reg_734_pp0_iter5_reg[21 : 0] <= zext_ln94_1_reg_734_pp0_iter4_reg[21 : 0];
        zext_ln94_1_reg_734_pp0_iter6_reg[21 : 0] <= zext_ln94_1_reg_734_pp0_iter5_reg[21 : 0];
        zext_ln94_1_reg_734_pp0_iter7_reg[21 : 0] <= zext_ln94_1_reg_734_pp0_iter6_reg[21 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln94_1_reg_729 <= add_ln94_1_fu_352_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bound_reg_711 <= grp_fu_638_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln89_fu_260_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln92_reg_719 <= icmp_ln92_fu_274_p2;
        select_ln72_reg_724 <= select_ln72_fu_279_p3;
    end
end

assign ap_ST_fsm_state14_blk = 1'b0;

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln89_fu_260_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) | (1'b1 == ap_CS_fsm_state14) | ((1'b1 == ap_CS_fsm_state1) & ((ap_done_reg == 1'b1) | (ap_start == 1'b0))))) begin
        grp_fu_638_ce = 1'b0;
    end else begin
        grp_fu_638_ce = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_channels_ch1_ce0 = 1'b1;
    end else begin
        in_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_channels_ch2_ce0 = 1'b1;
    end else begin
        in_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_channels_ch3_ce0 = 1'b1;
    end else begin
        in_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch1_ce0 = 1'b1;
    end else begin
        out_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch1_we0 = 1'b1;
    end else begin
        out_channels_ch1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch2_ce0 = 1'b1;
    end else begin
        out_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch2_we0 = 1'b1;
    end else begin
        out_channels_ch2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch3_ce0 = 1'b1;
    end else begin
        out_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch3_we0 = 1'b1;
    end else begin
        out_channels_ch3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_height = p_read1;
    end else begin
        out_height = out_height_preg;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_height_ap_vld = 1'b1;
    end else begin
        out_height_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_width = p_read;
    end else begin
        out_width = out_width_preg;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_width_ap_vld = 1'b1;
    end else begin
        out_width_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln89_fu_260_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter8 == 1'b1) & (ap_enable_reg_pp0_iter7 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter8 == 1'b1) & (ap_enable_reg_pp0_iter7 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln89_fu_260_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_fu_577_p3 = ((or_ln102_fu_571_p2[0:0] == 1'b1) ? select_ln102_fu_563_p3 : trunc_ln4_fu_553_p4);

assign C_fu_372_p2 = ($signed(zext_ln97_fu_368_p1) + $signed(9'd496));

assign D_fu_378_p2 = (in_channels_ch2_q0 ^ 8'd128);

assign E_fu_392_p2 = (in_channels_ch3_q0 ^ 8'd128);

assign G_fu_473_p3 = ((or_ln101_fu_467_p2[0:0] == 1'b1) ? select_ln101_fu_459_p3 : trunc_ln3_fu_449_p4);

assign R_fu_630_p3 = ((or_ln100_fu_624_p2[0:0] == 1'b1) ? select_ln100_fu_616_p3 : trunc_ln_fu_607_p4);

assign add_ln101_1_fu_420_p2 = ($signed(sext_ln101_3_fu_417_p1) + $signed(grp_fu_644_p3));

assign add_ln102_1_fu_503_p2 = ($signed(sext_ln102_1_fu_488_p1) + $signed(sext_ln102_2_fu_499_p1));

assign add_ln102_2_fu_517_p2 = (trunc_ln102_fu_509_p1 + trunc_ln100_fu_411_p1);

assign add_ln102_fu_523_p2 = ($signed(sext_ln102_3_fu_513_p1) + $signed(sext_ln100_4_fu_414_p1));

assign add_ln89_fu_265_p2 = (indvar_flatten_fu_124 + 32'd1);

assign add_ln94_1_fu_352_p2 = (add_ln94_fu_343_p2 + zext_ln94_fu_349_p1);

assign add_ln94_fu_343_p2 = (tmp_cast_fu_323_p3 + tmp_2_cast_fu_335_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_638_p0 = grp_fu_638_p00;

assign grp_fu_638_p00 = p_read;

assign grp_fu_638_p1 = grp_fu_638_p10;

assign grp_fu_638_p10 = p_read1;

assign grp_fu_644_p1 = 18'd298;

assign grp_fu_644_p2 = 18'd128;

assign grp_fu_655_p1 = 16'd65436;

assign grp_fu_664_p1 = 18'd409;

assign icmp_ln100_fu_594_p2 = ((tmp_fu_585_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln101_fu_435_p2 = ((tmp_2_fu_425_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln102_fu_539_p2 = (($signed(tmp_4_fu_529_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign icmp_ln89_fu_260_p2 = ((indvar_flatten_fu_124 == bound_reg_711) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_274_p2 = ((y_fu_116 == p_read1) ? 1'b1 : 1'b0);

assign in_channels_ch1_address0 = zext_ln94_1_fu_363_p1;

assign in_channels_ch2_address0 = zext_ln94_1_fu_363_p1;

assign in_channels_ch3_address0 = zext_ln94_1_reg_734;

assign mul_ln101_1_fu_405_p1 = 17'd130864;

assign or_ln100_fu_624_p2 = (tmp_1_fu_600_p3 | icmp_ln100_fu_594_p2);

assign or_ln101_fu_467_p2 = (tmp_3_fu_441_p3 | icmp_ln101_fu_435_p2);

assign or_ln102_fu_571_p2 = (tmp_5_fu_545_p3 | icmp_ln102_fu_539_p2);

assign out_channels_ch1_address0 = zext_ln94_1_reg_734_pp0_iter7_reg;

assign out_channels_ch1_d0 = R_reg_803;

assign out_channels_ch2_address0 = zext_ln94_1_reg_734_pp0_iter6_reg;

assign out_channels_ch2_d0 = G_reg_793;

assign out_channels_ch3_address0 = zext_ln94_1_reg_734_pp0_iter6_reg;

assign out_channels_ch3_d0 = B_reg_798;

assign select_ln100_fu_616_p3 = ((icmp_ln100_fu_594_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln101_fu_459_p3 = ((icmp_ln101_fu_435_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln102_fu_563_p3 = ((icmp_ln102_fu_539_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln72_1_fu_312_p3 = ((icmp_ln92_reg_719[0:0] == 1'b1) ? x_4_fu_306_p2 : x_fu_120);

assign select_ln72_fu_279_p3 = ((icmp_ln92_fu_274_p2[0:0] == 1'b1) ? 16'd0 : y_fu_116);

assign sext_ln100_4_fu_414_p1 = grp_fu_644_p3;

assign sext_ln101_3_fu_417_p1 = grp_fu_655_p3;

assign sext_ln102_1_fu_488_p1 = $signed(shl_ln_fu_481_p3);

assign sext_ln102_2_fu_499_p1 = $signed(shl_ln102_1_fu_492_p3);

assign sext_ln102_3_fu_513_p1 = add_ln102_1_fu_503_p2;

assign shl_ln102_1_fu_492_p3 = {{D_reg_757_pp0_iter5_reg}, {2'd0}};

assign shl_ln_fu_481_p3 = {{D_reg_757_pp0_iter5_reg}, {9'd0}};

assign tmp_1_fu_600_p3 = grp_fu_664_p3[32'd17];

assign tmp_2_cast_fu_335_p3 = {{trunc_ln94_1_fu_331_p1}, {8'd0}};

assign tmp_2_fu_425_p4 = {{add_ln101_1_fu_420_p2[17:16]}};

assign tmp_3_fu_441_p3 = add_ln101_1_fu_420_p2[32'd17];

assign tmp_4_fu_529_p4 = {{add_ln102_fu_523_p2[18:16]}};

assign tmp_5_fu_545_p3 = add_ln102_fu_523_p2[32'd18];

assign tmp_cast_fu_323_p3 = {{trunc_ln94_fu_319_p1}, {10'd0}};

assign tmp_fu_585_p4 = {{grp_fu_664_p3[17:16]}};

assign trunc_ln100_fu_411_p1 = grp_fu_644_p3[15:0];

assign trunc_ln102_fu_509_p1 = add_ln102_1_fu_503_p2[15:0];

assign trunc_ln3_fu_449_p4 = {{add_ln101_1_fu_420_p2[15:8]}};

assign trunc_ln4_fu_553_p4 = {{add_ln102_2_fu_517_p2[15:8]}};

assign trunc_ln94_1_fu_331_p1 = select_ln72_1_fu_312_p3[13:0];

assign trunc_ln94_fu_319_p1 = select_ln72_1_fu_312_p3[11:0];

assign trunc_ln_fu_607_p4 = {{grp_fu_664_p3[15:8]}};

assign x_4_fu_306_p2 = (x_fu_120 + 16'd1);

assign y_2_fu_287_p2 = (select_ln72_fu_279_p3 + 16'd1);

assign zext_ln94_1_fu_363_p1 = add_ln94_1_reg_729;

assign zext_ln94_fu_349_p1 = select_ln72_reg_724;

assign zext_ln97_fu_368_p1 = in_channels_ch1_q0;

always @ (posedge ap_clk) begin
    zext_ln94_1_reg_734[63:22] <= 42'b000000000000000000000000000000000000000000;
    zext_ln94_1_reg_734_pp0_iter3_reg[63:22] <= 42'b000000000000000000000000000000000000000000;
    zext_ln94_1_reg_734_pp0_iter4_reg[63:22] <= 42'b000000000000000000000000000000000000000000;
    zext_ln94_1_reg_734_pp0_iter5_reg[63:22] <= 42'b000000000000000000000000000000000000000000;
    zext_ln94_1_reg_734_pp0_iter6_reg[63:22] <= 42'b000000000000000000000000000000000000000000;
    zext_ln94_1_reg_734_pp0_iter7_reg[63:22] <= 42'b000000000000000000000000000000000000000000;
end

endmodule //yuv_filter_yuv2rgb_1

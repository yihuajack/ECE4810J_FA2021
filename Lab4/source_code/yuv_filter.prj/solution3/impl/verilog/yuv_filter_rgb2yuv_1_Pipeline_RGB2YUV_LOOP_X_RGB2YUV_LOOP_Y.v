// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
// Version: 2021.1.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module yuv_filter_rgb2yuv_1_Pipeline_RGB2YUV_LOOP_X_RGB2YUV_LOOP_Y (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_channels_ch1_din,
        out_channels_ch1_full_n,
        out_channels_ch1_write,
        out_channels_ch2_din,
        out_channels_ch2_full_n,
        out_channels_ch2_write,
        out_channels_ch3_din,
        out_channels_ch3_full_n,
        out_channels_ch3_write,
        bound,
        height,
        in_channels_ch1_address0,
        in_channels_ch1_ce0,
        in_channels_ch1_q0,
        in_channels_ch2_address0,
        in_channels_ch2_ce0,
        in_channels_ch2_q0,
        in_channels_ch3_address0,
        in_channels_ch3_ce0,
        in_channels_ch3_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] out_channels_ch1_din;
input   out_channels_ch1_full_n;
output   out_channels_ch1_write;
output  [7:0] out_channels_ch2_din;
input   out_channels_ch2_full_n;
output   out_channels_ch2_write;
output  [7:0] out_channels_ch3_din;
input   out_channels_ch3_full_n;
output   out_channels_ch3_write;
input  [31:0] bound;
input  [15:0] height;
output  [21:0] in_channels_ch1_address0;
output   in_channels_ch1_ce0;
input  [7:0] in_channels_ch1_q0;
output  [21:0] in_channels_ch2_address0;
output   in_channels_ch2_ce0;
input  [7:0] in_channels_ch2_q0;
output  [21:0] in_channels_ch3_address0;
output   in_channels_ch3_ce0;
input  [7:0] in_channels_ch3_q0;

reg ap_idle;
reg out_channels_ch1_write;
reg out_channels_ch2_write;
reg out_channels_ch3_write;
reg in_channels_ch1_ce0;
reg in_channels_ch2_ce0;
reg in_channels_ch3_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
reg    ap_block_state10_pp0_stage0_iter9;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln49_fu_216_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    out_channels_ch1_blk_n;
wire    ap_block_pp0_stage0;
reg    out_channels_ch2_blk_n;
reg    out_channels_ch3_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln52_fu_230_p2;
reg   [0:0] icmp_ln52_reg_611;
wire   [15:0] select_ln34_fu_235_p3;
reg   [15:0] select_ln34_reg_616;
wire   [21:0] add_ln54_1_fu_308_p2;
reg   [21:0] add_ln54_1_reg_621;
wire   [63:0] zext_ln54_1_fu_319_p1;
reg   [63:0] zext_ln54_1_reg_626;
reg   [7:0] R_reg_647;
reg   [7:0] R_reg_647_pp0_iter5_reg;
reg   [7:0] R_reg_647_pp0_iter6_reg;
wire   [14:0] zext_ln57_fu_323_p1;
reg   [7:0] G_reg_659;
reg   [7:0] G_reg_659_pp0_iter6_reg;
reg   [7:0] G_reg_659_pp0_iter7_reg;
reg   [7:0] B_reg_665;
reg   [7:0] B_reg_665_pp0_iter6_reg;
reg   [7:0] B_reg_665_pp0_iter7_reg;
wire   [15:0] zext_ln57_3_fu_327_p1;
wire   [14:0] add_ln57_fu_370_p2;
reg   [14:0] add_ln57_reg_688;
wire   [11:0] shl_ln58_1_fu_376_p3;
reg   [11:0] shl_ln58_1_reg_693;
reg   [7:0] trunc_ln_reg_708;
reg   [7:0] trunc_ln5_reg_713;
reg   [7:0] trunc_ln6_reg_718;
reg   [15:0] y_2_fu_114;
wire   [15:0] y_fu_243_p2;
wire    ap_loop_init;
reg   [15:0] x_fu_118;
wire   [15:0] select_ln34_1_fu_268_p3;
reg   [31:0] indvar_flatten_fu_122;
wire   [31:0] add_ln49_fu_221_p2;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] x_4_fu_262_p2;
wire   [11:0] trunc_ln54_fu_275_p1;
wire   [13:0] trunc_ln54_1_fu_287_p1;
wire   [21:0] tmp_cast_fu_279_p3;
wire   [21:0] tmp_2_cast_fu_291_p3;
wire   [21:0] add_ln54_fu_299_p2;
wire   [21:0] zext_ln54_fu_305_p1;
wire   [13:0] shl_ln_fu_335_p3;
wire   [8:0] shl_ln57_1_fu_346_p3;
wire   [9:0] zext_ln57_2_fu_353_p1;
wire   [9:0] add_ln57_1_fu_360_p2;
wire   [14:0] zext_ln57_7_fu_366_p1;
wire   [14:0] zext_ln57_1_fu_342_p1;
wire  signed [14:0] grp_fu_531_p3;
wire   [12:0] zext_ln58_1_fu_383_p1;
wire   [12:0] sub_ln59_fu_390_p2;
wire   [8:0] shl_ln2_fu_400_p3;
wire  signed [13:0] sext_ln59_fu_396_p1;
wire   [13:0] zext_ln59_fu_407_p1;
wire   [13:0] sub_ln59_1_fu_411_p2;
wire   [14:0] grp_fu_540_p3;
wire   [15:0] zext_ln59_1_fu_421_p1;
wire  signed [15:0] sext_ln59_1_fu_417_p1;
wire   [14:0] shl_ln57_2_fu_430_p3;
wire   [15:0] zext_ln57_5_fu_437_p1;
wire   [15:0] zext_ln57_8_fu_441_p1;
wire   [12:0] grp_fu_549_p3;
wire   [15:0] zext_ln57_9_fu_450_p1;
wire   [15:0] add_ln57_3_fu_444_p2;
wire   [15:0] add_ln57_2_fu_453_p2;
wire   [14:0] shl_ln1_fu_469_p3;
wire   [15:0] zext_ln58_fu_476_p1;
wire   [15:0] zext_ln58_2_fu_480_p1;
wire  signed [15:0] grp_fu_558_p3;
wire   [15:0] sub_ln58_fu_483_p2;
(* use_dsp48 = "no" *) wire   [15:0] add_ln58_2_fu_489_p2;
wire  signed [15:0] grp_fu_567_p3;
wire   [7:0] grp_fu_531_p0;
wire  signed [6:0] grp_fu_531_p1;
wire   [7:0] grp_fu_531_p2;
wire   [7:0] grp_fu_540_p0;
wire   [6:0] grp_fu_540_p1;
wire   [7:0] grp_fu_540_p2;
wire   [7:0] grp_fu_549_p0;
wire   [4:0] grp_fu_549_p1;
wire   [7:0] grp_fu_549_p2;
wire   [7:0] grp_fu_558_p0;
wire  signed [7:0] grp_fu_558_p1;
wire   [7:0] grp_fu_567_p0;
wire  signed [7:0] grp_fu_567_p1;
wire  signed [15:0] grp_fu_567_p2;
reg    grp_fu_531_ce;
reg    grp_fu_540_ce;
reg    grp_fu_549_ce;
reg    grp_fu_558_ce;
reg    grp_fu_567_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [12:0] grp_fu_549_p00;
wire   [12:0] grp_fu_549_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_done_reg = 1'b0;
end

yuv_filter_mac_muladd_8ns_7s_8ns_15_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 15 ))
mac_muladd_8ns_7s_8ns_15_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_531_p0),
    .din1(grp_fu_531_p1),
    .din2(grp_fu_531_p2),
    .ce(grp_fu_531_ce),
    .dout(grp_fu_531_p3)
);

yuv_filter_mac_muladd_8ns_7ns_8ns_15_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 15 ))
mac_muladd_8ns_7ns_8ns_15_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_540_p0),
    .din1(grp_fu_540_p1),
    .din2(grp_fu_540_p2),
    .ce(grp_fu_540_ce),
    .dout(grp_fu_540_p3)
);

yuv_filter_mac_muladd_8ns_5ns_8ns_13_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 13 ))
mac_muladd_8ns_5ns_8ns_13_4_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_549_p0),
    .din1(grp_fu_549_p1),
    .din2(grp_fu_549_p2),
    .ce(grp_fu_549_ce),
    .dout(grp_fu_549_p3)
);

yuv_filter_mac_muladd_8ns_8s_15s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 15 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_8s_15s_16_4_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_558_p0),
    .din1(grp_fu_558_p1),
    .din2(grp_fu_531_p3),
    .ce(grp_fu_558_ce),
    .dout(grp_fu_558_p3)
);

yuv_filter_mac_muladd_8ns_8s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_8s_16s_16_4_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_567_p0),
    .din1(grp_fu_567_p1),
    .din2(grp_fu_567_p2),
    .ce(grp_fu_567_ce),
    .dout(grp_fu_567_p3)
);

yuv_filter_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter8_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_122 <= 32'd0;
        end else if (((icmp_ln49_fu_216_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_122 <= add_ln49_fu_221_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            x_fu_118 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            x_fu_118 <= select_ln34_1_fu_268_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            y_2_fu_114 <= 16'd0;
        end else if (((icmp_ln49_fu_216_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            y_2_fu_114 <= y_fu_243_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        B_reg_665 <= in_channels_ch3_q0;
        B_reg_665_pp0_iter6_reg <= B_reg_665;
        B_reg_665_pp0_iter7_reg <= B_reg_665_pp0_iter6_reg;
        G_reg_659 <= in_channels_ch2_q0;
        G_reg_659_pp0_iter6_reg <= G_reg_659;
        G_reg_659_pp0_iter7_reg <= G_reg_659_pp0_iter6_reg;
        R_reg_647 <= in_channels_ch1_q0;
        R_reg_647_pp0_iter5_reg <= R_reg_647;
        R_reg_647_pp0_iter6_reg <= R_reg_647_pp0_iter5_reg;
        add_ln54_1_reg_621 <= add_ln54_1_fu_308_p2;
        add_ln57_reg_688[14 : 1] <= add_ln57_fu_370_p2[14 : 1];
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        shl_ln58_1_reg_693[11 : 4] <= shl_ln58_1_fu_376_p3[11 : 4];
        trunc_ln5_reg_713 <= {{add_ln58_2_fu_489_p2[15:8]}};
        trunc_ln6_reg_718 <= {{grp_fu_567_p3[15:8]}};
        trunc_ln_reg_708 <= {{add_ln57_2_fu_453_p2[15:8]}};
        zext_ln54_1_reg_626[21 : 0] <= zext_ln54_1_fu_319_p1[21 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_fu_216_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln52_reg_611 <= icmp_ln52_fu_230_p2;
        select_ln34_reg_616 <= select_ln34_fu_235_p3;
    end
end

always @ (*) begin
    if (((icmp_ln49_fu_216_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter8_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_531_ce = 1'b1;
    end else begin
        grp_fu_531_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_540_ce = 1'b1;
    end else begin
        grp_fu_540_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_549_ce = 1'b1;
    end else begin
        grp_fu_549_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_558_ce = 1'b1;
    end else begin
        grp_fu_558_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_567_ce = 1'b1;
    end else begin
        grp_fu_567_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        in_channels_ch1_ce0 = 1'b1;
    end else begin
        in_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        in_channels_ch2_ce0 = 1'b1;
    end else begin
        in_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        in_channels_ch3_ce0 = 1'b1;
    end else begin
        in_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        out_channels_ch1_blk_n = out_channels_ch1_full_n;
    end else begin
        out_channels_ch1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        out_channels_ch1_write = 1'b1;
    end else begin
        out_channels_ch1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        out_channels_ch2_blk_n = out_channels_ch2_full_n;
    end else begin
        out_channels_ch2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        out_channels_ch2_write = 1'b1;
    end else begin
        out_channels_ch2_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        out_channels_ch3_blk_n = out_channels_ch3_full_n;
    end else begin
        out_channels_ch3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        out_channels_ch3_write = 1'b1;
    end else begin
        out_channels_ch3_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln49_fu_221_p2 = (indvar_flatten_fu_122 + 32'd1);

assign add_ln54_1_fu_308_p2 = (add_ln54_fu_299_p2 + zext_ln54_fu_305_p1);

assign add_ln54_fu_299_p2 = (tmp_cast_fu_279_p3 + tmp_2_cast_fu_291_p3);

assign add_ln57_1_fu_360_p2 = (zext_ln57_2_fu_353_p1 + 10'd128);

assign add_ln57_2_fu_453_p2 = (zext_ln57_9_fu_450_p1 + add_ln57_3_fu_444_p2);

assign add_ln57_3_fu_444_p2 = (zext_ln57_5_fu_437_p1 + zext_ln57_8_fu_441_p1);

assign add_ln57_fu_370_p2 = (zext_ln57_7_fu_366_p1 + zext_ln57_1_fu_342_p1);

assign add_ln58_2_fu_489_p2 = ($signed(grp_fu_558_p3) + $signed(sub_ln58_fu_483_p2));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter9 == 1'b1) & ((out_channels_ch3_full_n == 1'b0) | (out_channels_ch2_full_n == 1'b0) | (out_channels_ch1_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter9 == 1'b1) & ((out_channels_ch3_full_n == 1'b0) | (out_channels_ch2_full_n == 1'b0) | (out_channels_ch1_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter9 == 1'b1) & ((out_channels_ch3_full_n == 1'b0) | (out_channels_ch2_full_n == 1'b0) | (out_channels_ch1_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter9 = ((out_channels_ch3_full_n == 1'b0) | (out_channels_ch2_full_n == 1'b0) | (out_channels_ch1_full_n == 1'b0));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign grp_fu_531_p0 = zext_ln57_fu_323_p1;

assign grp_fu_531_p1 = 15'd32730;

assign grp_fu_531_p2 = 15'd128;

assign grp_fu_540_p0 = zext_ln57_fu_323_p1;

assign grp_fu_540_p1 = 15'd122;

assign grp_fu_540_p2 = 15'd128;

assign grp_fu_549_p0 = grp_fu_549_p00;

assign grp_fu_549_p00 = in_channels_ch3_q0;

assign grp_fu_549_p1 = 13'd25;

assign grp_fu_549_p2 = grp_fu_549_p20;

assign grp_fu_549_p20 = G_reg_659_pp0_iter6_reg;

assign grp_fu_558_p0 = zext_ln57_3_fu_327_p1;

assign grp_fu_558_p1 = 16'd65462;

assign grp_fu_567_p0 = zext_ln57_3_fu_327_p1;

assign grp_fu_567_p1 = 16'd65442;

assign grp_fu_567_p2 = ($signed(zext_ln59_1_fu_421_p1) + $signed(sext_ln59_1_fu_417_p1));

assign icmp_ln49_fu_216_p2 = ((indvar_flatten_fu_122 == bound) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_230_p2 = ((y_2_fu_114 == height) ? 1'b1 : 1'b0);

assign in_channels_ch1_address0 = zext_ln54_1_fu_319_p1;

assign in_channels_ch2_address0 = zext_ln54_1_reg_626;

assign in_channels_ch3_address0 = zext_ln54_1_reg_626;

assign out_channels_ch1_din = (trunc_ln_reg_708 + 8'd16);

assign out_channels_ch2_din = (trunc_ln5_reg_713 ^ 8'd128);

assign out_channels_ch3_din = (trunc_ln6_reg_718 ^ 8'd128);

assign select_ln34_1_fu_268_p3 = ((icmp_ln52_reg_611[0:0] == 1'b1) ? x_4_fu_262_p2 : x_fu_118);

assign select_ln34_fu_235_p3 = ((icmp_ln52_fu_230_p2[0:0] == 1'b1) ? 16'd0 : y_2_fu_114);

assign sext_ln59_1_fu_417_p1 = $signed(sub_ln59_1_fu_411_p2);

assign sext_ln59_fu_396_p1 = $signed(sub_ln59_fu_390_p2);

assign shl_ln1_fu_469_p3 = {{B_reg_665_pp0_iter7_reg}, {7'd0}};

assign shl_ln2_fu_400_p3 = {{B_reg_665_pp0_iter6_reg}, {1'd0}};

assign shl_ln57_1_fu_346_p3 = {{R_reg_647_pp0_iter6_reg}, {1'd0}};

assign shl_ln57_2_fu_430_p3 = {{G_reg_659_pp0_iter7_reg}, {7'd0}};

assign shl_ln58_1_fu_376_p3 = {{B_reg_665_pp0_iter6_reg}, {4'd0}};

assign shl_ln_fu_335_p3 = {{R_reg_647_pp0_iter6_reg}, {6'd0}};

assign sub_ln58_fu_483_p2 = (zext_ln58_fu_476_p1 - zext_ln58_2_fu_480_p1);

assign sub_ln59_1_fu_411_p2 = ($signed(sext_ln59_fu_396_p1) - $signed(zext_ln59_fu_407_p1));

assign sub_ln59_fu_390_p2 = (13'd0 - zext_ln58_1_fu_383_p1);

assign tmp_2_cast_fu_291_p3 = {{trunc_ln54_1_fu_287_p1}, {8'd0}};

assign tmp_cast_fu_279_p3 = {{trunc_ln54_fu_275_p1}, {10'd0}};

assign trunc_ln54_1_fu_287_p1 = select_ln34_1_fu_268_p3[13:0];

assign trunc_ln54_fu_275_p1 = select_ln34_1_fu_268_p3[11:0];

assign x_4_fu_262_p2 = (x_fu_118 + 16'd1);

assign y_fu_243_p2 = (select_ln34_fu_235_p3 + 16'd1);

assign zext_ln54_1_fu_319_p1 = add_ln54_1_reg_621;

assign zext_ln54_fu_305_p1 = select_ln34_reg_616;

assign zext_ln57_1_fu_342_p1 = shl_ln_fu_335_p3;

assign zext_ln57_2_fu_353_p1 = shl_ln57_1_fu_346_p3;

assign zext_ln57_3_fu_327_p1 = in_channels_ch2_q0;

assign zext_ln57_5_fu_437_p1 = shl_ln57_2_fu_430_p3;

assign zext_ln57_7_fu_366_p1 = add_ln57_1_fu_360_p2;

assign zext_ln57_8_fu_441_p1 = add_ln57_reg_688;

assign zext_ln57_9_fu_450_p1 = grp_fu_549_p3;

assign zext_ln57_fu_323_p1 = in_channels_ch1_q0;

assign zext_ln58_1_fu_383_p1 = shl_ln58_1_fu_376_p3;

assign zext_ln58_2_fu_480_p1 = shl_ln58_1_reg_693;

assign zext_ln58_fu_476_p1 = shl_ln1_fu_469_p3;

assign zext_ln59_1_fu_421_p1 = grp_fu_540_p3;

assign zext_ln59_fu_407_p1 = shl_ln2_fu_400_p3;

always @ (posedge ap_clk) begin
    zext_ln54_1_reg_626[63:22] <= 42'b000000000000000000000000000000000000000000;
    add_ln57_reg_688[0] <= 1'b0;
    shl_ln58_1_reg_693[3:0] <= 4'b0000;
end

endmodule //yuv_filter_rgb2yuv_1_Pipeline_RGB2YUV_LOOP_X_RGB2YUV_LOOP_Y

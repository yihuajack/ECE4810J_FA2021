// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
// Version: 2021.1.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module yuv_filter_yuv_scale_Pipeline_YUV_SCALE_LOOP_X_YUV_SCALE_LOOP_Y (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        bound,
        in_height_read,
        in_channels_ch1_address0,
        in_channels_ch1_ce0,
        in_channels_ch1_q0,
        in_channels_ch2_address0,
        in_channels_ch2_ce0,
        in_channels_ch2_q0,
        in_channels_ch3_address0,
        in_channels_ch3_ce0,
        in_channels_ch3_q0,
        out_channels_ch1_address0,
        out_channels_ch1_ce0,
        out_channels_ch1_we0,
        out_channels_ch1_d0,
        out_channels_ch2_address0,
        out_channels_ch2_ce0,
        out_channels_ch2_we0,
        out_channels_ch2_d0,
        out_channels_ch3_address0,
        out_channels_ch3_ce0,
        out_channels_ch3_we0,
        out_channels_ch3_d0,
        zext_ln137,
        zext_ln138,
        zext_ln139
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] bound;
input  [15:0] in_height_read;
output  [21:0] in_channels_ch1_address0;
output   in_channels_ch1_ce0;
input  [7:0] in_channels_ch1_q0;
output  [21:0] in_channels_ch2_address0;
output   in_channels_ch2_ce0;
input  [7:0] in_channels_ch2_q0;
output  [21:0] in_channels_ch3_address0;
output   in_channels_ch3_ce0;
input  [7:0] in_channels_ch3_q0;
output  [21:0] out_channels_ch1_address0;
output   out_channels_ch1_ce0;
output   out_channels_ch1_we0;
output  [7:0] out_channels_ch1_d0;
output  [21:0] out_channels_ch2_address0;
output   out_channels_ch2_ce0;
output   out_channels_ch2_we0;
output  [7:0] out_channels_ch2_d0;
output  [21:0] out_channels_ch3_address0;
output   out_channels_ch3_ce0;
output   out_channels_ch3_we0;
output  [7:0] out_channels_ch3_d0;
input  [7:0] zext_ln137;
input  [7:0] zext_ln138;
input  [7:0] zext_ln139;

reg ap_idle;
reg in_channels_ch1_ce0;
reg in_channels_ch2_ce0;
reg in_channels_ch3_ce0;
reg out_channels_ch1_ce0;
reg out_channels_ch1_we0;
reg out_channels_ch2_ce0;
reg out_channels_ch2_we0;
reg out_channels_ch3_ce0;
reg out_channels_ch3_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln129_fu_222_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [14:0] zext_ln139_cast_fu_192_p1;
reg   [14:0] zext_ln139_cast_reg_416;
wire   [14:0] zext_ln138_cast_fu_196_p1;
reg   [14:0] zext_ln138_cast_reg_421;
wire   [14:0] zext_ln137_cast_fu_200_p1;
reg   [14:0] zext_ln137_cast_reg_426;
wire   [0:0] icmp_ln132_fu_236_p2;
reg   [0:0] icmp_ln132_reg_435;
wire   [15:0] select_ln118_fu_241_p3;
reg   [15:0] select_ln118_reg_440;
wire   [21:0] add_ln134_1_fu_314_p2;
reg   [21:0] add_ln134_1_reg_445;
wire   [63:0] zext_ln134_1_fu_325_p1;
reg   [63:0] zext_ln134_1_reg_450;
reg   [63:0] zext_ln134_1_reg_450_pp0_iter4_reg;
reg   [63:0] zext_ln134_1_reg_450_pp0_iter5_reg;
reg   [7:0] Y_reg_472;
reg   [7:0] U_reg_477;
reg   [7:0] V_reg_482;
reg   [7:0] trunc_ln_reg_487;
reg   [7:0] trunc_ln1_reg_492;
reg   [7:0] trunc_ln2_reg_497;
wire    ap_block_pp0_stage0;
reg   [15:0] y_fu_72;
wire   [15:0] y_1_fu_249_p2;
wire    ap_loop_init;
reg   [15:0] x_fu_76;
wire   [15:0] select_ln118_1_fu_274_p3;
reg   [31:0] indvar_flatten_fu_80;
wire   [31:0] add_ln129_fu_227_p2;
wire   [15:0] x_2_fu_268_p2;
wire   [11:0] trunc_ln134_fu_281_p1;
wire   [13:0] trunc_ln134_1_fu_293_p1;
wire   [21:0] tmp_cast_fu_285_p3;
wire   [21:0] tmp_1_cast_fu_297_p3;
wire   [21:0] add_ln134_fu_305_p2;
wire   [21:0] zext_ln134_fu_311_p1;
wire   [7:0] mul_ln137_fu_334_p0;
wire   [7:0] mul_ln137_fu_334_p1;
wire   [7:0] mul_ln138_fu_342_p0;
wire   [7:0] mul_ln138_fu_342_p1;
wire   [7:0] mul_ln139_fu_350_p0;
wire   [7:0] mul_ln139_fu_350_p1;
wire   [14:0] mul_ln137_fu_334_p2;
wire   [14:0] mul_ln138_fu_342_p2;
wire   [14:0] mul_ln139_fu_350_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [14:0] mul_ln137_fu_334_p00;
wire   [14:0] mul_ln138_fu_342_p00;
wire   [14:0] mul_ln139_fu_350_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_done_reg = 1'b0;
end

yuv_filter_mul_8ns_8ns_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 15 ))
mul_8ns_8ns_15_1_1_U27(
    .din0(mul_ln137_fu_334_p0),
    .din1(mul_ln137_fu_334_p1),
    .dout(mul_ln137_fu_334_p2)
);

yuv_filter_mul_8ns_8ns_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 15 ))
mul_8ns_8ns_15_1_1_U28(
    .din0(mul_ln138_fu_342_p0),
    .din1(mul_ln138_fu_342_p1),
    .dout(mul_ln138_fu_342_p2)
);

yuv_filter_mul_8ns_8ns_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 15 ))
mul_8ns_8ns_15_1_1_U29(
    .din0(mul_ln139_fu_350_p0),
    .din1(mul_ln139_fu_350_p1),
    .dout(mul_ln139_fu_350_p2)
);

yuv_filter_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_80 <= 32'd0;
        end else if (((icmp_ln129_fu_222_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_80 <= add_ln129_fu_227_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            x_fu_76 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            x_fu_76 <= select_ln118_1_fu_274_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            y_fu_72 <= 16'd0;
        end else if (((icmp_ln129_fu_222_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            y_fu_72 <= y_1_fu_249_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        U_reg_477 <= in_channels_ch2_q0;
        V_reg_482 <= in_channels_ch3_q0;
        Y_reg_472 <= in_channels_ch1_q0;
        add_ln134_1_reg_445 <= add_ln134_1_fu_314_p2;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        trunc_ln1_reg_492 <= {{mul_ln138_fu_342_p2[14:7]}};
        trunc_ln2_reg_497 <= {{mul_ln139_fu_350_p2[14:7]}};
        trunc_ln_reg_487 <= {{mul_ln137_fu_334_p2[14:7]}};
        zext_ln134_1_reg_450[21 : 0] <= zext_ln134_1_fu_325_p1[21 : 0];
        zext_ln134_1_reg_450_pp0_iter4_reg[21 : 0] <= zext_ln134_1_reg_450[21 : 0];
        zext_ln134_1_reg_450_pp0_iter5_reg[21 : 0] <= zext_ln134_1_reg_450_pp0_iter4_reg[21 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        zext_ln137_cast_reg_426[7 : 0] <= zext_ln137_cast_fu_200_p1[7 : 0];
        zext_ln138_cast_reg_421[7 : 0] <= zext_ln138_cast_fu_196_p1[7 : 0];
        zext_ln139_cast_reg_416[7 : 0] <= zext_ln139_cast_fu_192_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln129_fu_222_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln132_reg_435 <= icmp_ln132_fu_236_p2;
        select_ln118_reg_440 <= select_ln118_fu_241_p3;
    end
end

always @ (*) begin
    if (((icmp_ln129_fu_222_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        in_channels_ch1_ce0 = 1'b1;
    end else begin
        in_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        in_channels_ch2_ce0 = 1'b1;
    end else begin
        in_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        in_channels_ch3_ce0 = 1'b1;
    end else begin
        in_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        out_channels_ch1_ce0 = 1'b1;
    end else begin
        out_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        out_channels_ch1_we0 = 1'b1;
    end else begin
        out_channels_ch1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        out_channels_ch2_ce0 = 1'b1;
    end else begin
        out_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        out_channels_ch2_we0 = 1'b1;
    end else begin
        out_channels_ch2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        out_channels_ch3_ce0 = 1'b1;
    end else begin
        out_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        out_channels_ch3_we0 = 1'b1;
    end else begin
        out_channels_ch3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln129_fu_227_p2 = (indvar_flatten_fu_80 + 32'd1);

assign add_ln134_1_fu_314_p2 = (add_ln134_fu_305_p2 + zext_ln134_fu_311_p1);

assign add_ln134_fu_305_p2 = (tmp_cast_fu_285_p3 + tmp_1_cast_fu_297_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign icmp_ln129_fu_222_p2 = ((indvar_flatten_fu_80 == bound) ? 1'b1 : 1'b0);

assign icmp_ln132_fu_236_p2 = ((y_fu_72 == in_height_read) ? 1'b1 : 1'b0);

assign in_channels_ch1_address0 = zext_ln134_1_fu_325_p1;

assign in_channels_ch2_address0 = zext_ln134_1_fu_325_p1;

assign in_channels_ch3_address0 = zext_ln134_1_fu_325_p1;

assign mul_ln137_fu_334_p0 = mul_ln137_fu_334_p00;

assign mul_ln137_fu_334_p00 = Y_reg_472;

assign mul_ln137_fu_334_p1 = zext_ln137_cast_reg_426;

assign mul_ln138_fu_342_p0 = mul_ln138_fu_342_p00;

assign mul_ln138_fu_342_p00 = U_reg_477;

assign mul_ln138_fu_342_p1 = zext_ln138_cast_reg_421;

assign mul_ln139_fu_350_p0 = mul_ln139_fu_350_p00;

assign mul_ln139_fu_350_p00 = V_reg_482;

assign mul_ln139_fu_350_p1 = zext_ln139_cast_reg_416;

assign out_channels_ch1_address0 = zext_ln134_1_reg_450_pp0_iter5_reg;

assign out_channels_ch1_d0 = trunc_ln_reg_487;

assign out_channels_ch2_address0 = zext_ln134_1_reg_450_pp0_iter5_reg;

assign out_channels_ch2_d0 = trunc_ln1_reg_492;

assign out_channels_ch3_address0 = zext_ln134_1_reg_450_pp0_iter5_reg;

assign out_channels_ch3_d0 = trunc_ln2_reg_497;

assign select_ln118_1_fu_274_p3 = ((icmp_ln132_reg_435[0:0] == 1'b1) ? x_2_fu_268_p2 : x_fu_76);

assign select_ln118_fu_241_p3 = ((icmp_ln132_fu_236_p2[0:0] == 1'b1) ? 16'd0 : y_fu_72);

assign tmp_1_cast_fu_297_p3 = {{trunc_ln134_1_fu_293_p1}, {8'd0}};

assign tmp_cast_fu_285_p3 = {{trunc_ln134_fu_281_p1}, {10'd0}};

assign trunc_ln134_1_fu_293_p1 = select_ln118_1_fu_274_p3[13:0];

assign trunc_ln134_fu_281_p1 = select_ln118_1_fu_274_p3[11:0];

assign x_2_fu_268_p2 = (x_fu_76 + 16'd1);

assign y_1_fu_249_p2 = (select_ln118_fu_241_p3 + 16'd1);

assign zext_ln134_1_fu_325_p1 = add_ln134_1_reg_445;

assign zext_ln134_fu_311_p1 = select_ln118_reg_440;

assign zext_ln137_cast_fu_200_p1 = zext_ln137;

assign zext_ln138_cast_fu_196_p1 = zext_ln138;

assign zext_ln139_cast_fu_192_p1 = zext_ln139;

always @ (posedge ap_clk) begin
    zext_ln139_cast_reg_416[14:8] <= 7'b0000000;
    zext_ln138_cast_reg_421[14:8] <= 7'b0000000;
    zext_ln137_cast_reg_426[14:8] <= 7'b0000000;
    zext_ln134_1_reg_450[63:22] <= 42'b000000000000000000000000000000000000000000;
    zext_ln134_1_reg_450_pp0_iter4_reg[63:22] <= 42'b000000000000000000000000000000000000000000;
    zext_ln134_1_reg_450_pp0_iter5_reg[63:22] <= 42'b000000000000000000000000000000000000000000;
end

endmodule //yuv_filter_yuv_scale_Pipeline_YUV_SCALE_LOOP_X_YUV_SCALE_LOOP_Y

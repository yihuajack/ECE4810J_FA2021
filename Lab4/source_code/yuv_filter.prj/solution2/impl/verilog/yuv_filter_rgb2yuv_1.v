// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
// Version: 2021.1.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module yuv_filter_rgb2yuv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_channels_ch1_address0,
        in_channels_ch1_ce0,
        in_channels_ch1_q0,
        in_channels_ch2_address0,
        in_channels_ch2_ce0,
        in_channels_ch2_q0,
        in_channels_ch3_address0,
        in_channels_ch3_ce0,
        in_channels_ch3_q0,
        p_read,
        p_read1,
        out_channels_ch1_address0,
        out_channels_ch1_ce0,
        out_channels_ch1_we0,
        out_channels_ch1_d0,
        out_channels_ch2_address0,
        out_channels_ch2_ce0,
        out_channels_ch2_we0,
        out_channels_ch2_d0,
        out_channels_ch3_address0,
        out_channels_ch3_ce0,
        out_channels_ch3_we0,
        out_channels_ch3_d0,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp0_stage0 = 6'd16;
parameter    ap_ST_fsm_state13 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [21:0] in_channels_ch1_address0;
output   in_channels_ch1_ce0;
input  [7:0] in_channels_ch1_q0;
output  [21:0] in_channels_ch2_address0;
output   in_channels_ch2_ce0;
input  [7:0] in_channels_ch2_q0;
output  [21:0] in_channels_ch3_address0;
output   in_channels_ch3_ce0;
input  [7:0] in_channels_ch3_q0;
input  [15:0] p_read;
input  [15:0] p_read1;
output  [21:0] out_channels_ch1_address0;
output   out_channels_ch1_ce0;
output   out_channels_ch1_we0;
output  [7:0] out_channels_ch1_d0;
output  [21:0] out_channels_ch2_address0;
output   out_channels_ch2_ce0;
output   out_channels_ch2_we0;
output  [7:0] out_channels_ch2_d0;
output  [21:0] out_channels_ch3_address0;
output   out_channels_ch3_ce0;
output   out_channels_ch3_we0;
output  [7:0] out_channels_ch3_d0;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_channels_ch1_ce0;
reg in_channels_ch2_ce0;
reg in_channels_ch3_ce0;
reg out_channels_ch1_ce0;
reg out_channels_ch1_we0;
reg out_channels_ch2_ce0;
reg out_channels_ch2_we0;
reg out_channels_ch3_ce0;
reg out_channels_ch3_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [31:0] grp_fu_573_p2;
reg   [31:0] bound_reg_648;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln52_fu_248_p2;
reg   [0:0] icmp_ln52_reg_656;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state10_pp0_stage0_iter5;
wire    ap_block_state11_pp0_stage0_iter6;
wire    ap_block_state12_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln49_fu_234_p2;
wire   [15:0] select_ln34_fu_253_p3;
reg   [15:0] select_ln34_reg_661;
wire   [21:0] add_ln54_1_fu_326_p2;
reg   [21:0] add_ln54_1_reg_666;
wire   [63:0] zext_ln54_1_fu_337_p1;
reg   [63:0] zext_ln54_1_reg_671;
reg   [63:0] zext_ln54_1_reg_671_pp0_iter3_reg;
reg   [63:0] zext_ln54_1_reg_671_pp0_iter4_reg;
reg   [63:0] zext_ln54_1_reg_671_pp0_iter5_reg;
reg   [63:0] zext_ln54_1_reg_671_pp0_iter6_reg;
reg   [7:0] R_reg_694;
reg   [7:0] R_reg_694_pp0_iter4_reg;
reg   [7:0] R_reg_694_pp0_iter5_reg;
reg   [7:0] B_reg_700;
reg   [7:0] B_reg_700_pp0_iter4_reg;
wire   [14:0] zext_ln57_fu_342_p1;
reg   [7:0] G_reg_718;
reg   [7:0] G_reg_718_pp0_iter5_reg;
wire  signed [15:0] mul_ln58_1_fu_366_p2;
wire   [15:0] sub_ln58_fu_398_p2;
reg   [15:0] sub_ln58_reg_735;
wire   [15:0] mul_ln59_1_fu_404_p2;
wire   [13:0] add_ln59_1_fu_437_p2;
reg   [13:0] add_ln59_1_reg_745;
reg   [7:0] trunc_ln_reg_750;
reg   [7:0] trunc_ln5_reg_755;
reg   [7:0] trunc_ln6_reg_760;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
wire    ap_block_pp0_stage0;
reg   [15:0] y_02_fu_106;
wire   [15:0] y_fu_261_p2;
reg   [15:0] x_fu_110;
wire   [15:0] select_ln34_1_fu_286_p3;
reg   [31:0] indvar_flatten_fu_114;
wire   [31:0] add_ln49_fu_239_p2;
wire   [15:0] x_5_fu_280_p2;
wire   [11:0] trunc_ln54_fu_293_p1;
wire   [13:0] trunc_ln54_1_fu_305_p1;
wire   [21:0] tmp_cast_fu_297_p3;
wire   [21:0] tmp_3_cast_fu_309_p3;
wire   [21:0] add_ln54_fu_317_p2;
wire   [21:0] zext_ln54_fu_323_p1;
wire   [8:0] zext_ln57_4_fu_353_p1;
wire   [8:0] add_ln57_3_fu_356_p2;
wire   [7:0] mul_ln58_1_fu_366_p0;
wire   [15:0] zext_ln57_3_fu_350_p1;
wire  signed [7:0] mul_ln58_1_fu_366_p1;
wire   [14:0] shl_ln1_fu_372_p3;
wire   [11:0] shl_ln58_1_fu_383_p3;
wire   [15:0] zext_ln58_fu_379_p1;
wire   [15:0] zext_ln58_2_fu_394_p1;
wire   [7:0] mul_ln59_1_fu_404_p0;
wire  signed [7:0] mul_ln59_1_fu_404_p1;
wire   [12:0] zext_ln58_1_fu_390_p1;
wire   [12:0] sub_ln59_fu_410_p2;
wire   [8:0] shl_ln2_fu_420_p3;
wire  signed [13:0] sext_ln59_fu_416_p1;
wire   [13:0] zext_ln59_1_fu_427_p1;
wire   [13:0] sub_ln59_1_fu_431_p2;
wire   [13:0] shl_ln_fu_443_p3;
wire   [8:0] shl_ln57_1_fu_454_p3;
wire   [14:0] shl_ln57_2_fu_465_p3;
wire   [15:0] zext_ln57_2_fu_461_p1;
wire   [15:0] zext_ln57_5_fu_472_p1;
wire   [15:0] add_ln57_fu_476_p2;
wire   [15:0] zext_ln57_1_fu_450_p1;
wire   [12:0] grp_fu_579_p3;
wire   [15:0] zext_ln57_8_fu_488_p1;
wire   [15:0] add_ln57_1_fu_482_p2;
wire   [15:0] add_ln57_2_fu_491_p2;
wire   [15:0] add_ln58_1_fu_507_p2;
wire  signed [15:0] grp_fu_588_p3;
(* use_dsp48 = "no" *) wire   [15:0] add_ln58_2_fu_512_p2;
wire  signed [15:0] sext_ln59_1_fu_527_p1;
wire   [15:0] grp_fu_597_p3;
(* use_dsp48 = "no" *) wire   [15:0] add_ln59_2_fu_530_p2;
wire    ap_CS_fsm_state13;
wire   [15:0] grp_fu_573_p0;
wire   [15:0] grp_fu_573_p1;
wire   [7:0] grp_fu_579_p0;
wire   [4:0] grp_fu_579_p1;
wire   [8:0] grp_fu_579_p2;
wire   [7:0] grp_fu_588_p0;
wire  signed [6:0] grp_fu_588_p1;
wire   [7:0] grp_fu_597_p0;
wire   [6:0] grp_fu_597_p1;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state13_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] grp_fu_573_p00;
wire   [31:0] grp_fu_573_p10;
wire   [12:0] grp_fu_579_p00;
wire   [12:0] grp_fu_579_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
end

yuv_filter_mul_8ns_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8s_16_1_1_U1(
    .din0(mul_ln58_1_fu_366_p0),
    .din1(mul_ln58_1_fu_366_p1),
    .dout(mul_ln58_1_fu_366_p2)
);

yuv_filter_mul_8ns_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8s_16_1_1_U2(
    .din0(mul_ln59_1_fu_404_p0),
    .din1(mul_ln59_1_fu_404_p1),
    .dout(mul_ln59_1_fu_404_p2)
);

yuv_filter_mul_mul_16ns_16ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16ns_16ns_32_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_573_p0),
    .din1(grp_fu_573_p1),
    .ce(1'b1),
    .dout(grp_fu_573_p2)
);

yuv_filter_mac_muladd_8ns_5ns_9ns_13_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 13 ))
mac_muladd_8ns_5ns_9ns_13_4_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_579_p0),
    .din1(grp_fu_579_p1),
    .din2(grp_fu_579_p2),
    .ce(1'b1),
    .dout(grp_fu_579_p3)
);

yuv_filter_mac_muladd_8ns_7s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_7s_16s_16_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_588_p0),
    .din1(grp_fu_588_p1),
    .din2(mul_ln58_1_fu_366_p2),
    .ce(1'b1),
    .dout(grp_fu_588_p3)
);

yuv_filter_mac_muladd_8ns_7ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_7ns_16ns_16_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_597_p0),
    .din1(grp_fu_597_p1),
    .din2(mul_ln59_1_fu_404_p2),
    .ce(1'b1),
    .dout(grp_fu_597_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state5)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_fu_114 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln49_fu_234_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_fu_114 <= add_ln49_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        x_fu_110 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_fu_110 <= select_ln34_1_fu_286_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        y_02_fu_106 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln49_fu_234_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        y_02_fu_106 <= y_fu_261_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        B_reg_700 <= in_channels_ch3_q0;
        B_reg_700_pp0_iter4_reg <= B_reg_700;
        G_reg_718 <= in_channels_ch2_q0;
        G_reg_718_pp0_iter5_reg <= G_reg_718;
        R_reg_694 <= in_channels_ch1_q0;
        R_reg_694_pp0_iter4_reg <= R_reg_694;
        R_reg_694_pp0_iter5_reg <= R_reg_694_pp0_iter4_reg;
        add_ln59_1_reg_745[13 : 1] <= add_ln59_1_fu_437_p2[13 : 1];
        sub_ln58_reg_735[15 : 4] <= sub_ln58_fu_398_p2[15 : 4];
        trunc_ln5_reg_755 <= {{add_ln58_2_fu_512_p2[15:8]}};
        trunc_ln6_reg_760 <= {{add_ln59_2_fu_530_p2[15:8]}};
        trunc_ln_reg_750 <= {{add_ln57_2_fu_491_p2[15:8]}};
        zext_ln54_1_reg_671[21 : 0] <= zext_ln54_1_fu_337_p1[21 : 0];
        zext_ln54_1_reg_671_pp0_iter3_reg[21 : 0] <= zext_ln54_1_reg_671[21 : 0];
        zext_ln54_1_reg_671_pp0_iter4_reg[21 : 0] <= zext_ln54_1_reg_671_pp0_iter3_reg[21 : 0];
        zext_ln54_1_reg_671_pp0_iter5_reg[21 : 0] <= zext_ln54_1_reg_671_pp0_iter4_reg[21 : 0];
        zext_ln54_1_reg_671_pp0_iter6_reg[21 : 0] <= zext_ln54_1_reg_671_pp0_iter5_reg[21 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln54_1_reg_666 <= add_ln54_1_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bound_reg_648 <= grp_fu_573_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln49_fu_234_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln52_reg_656 <= icmp_ln52_fu_248_p2;
        select_ln34_reg_661 <= select_ln34_fu_253_p3;
    end
end

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln49_fu_234_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_channels_ch1_ce0 = 1'b1;
    end else begin
        in_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_channels_ch2_ce0 = 1'b1;
    end else begin
        in_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_channels_ch3_ce0 = 1'b1;
    end else begin
        in_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch1_ce0 = 1'b1;
    end else begin
        out_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch1_we0 = 1'b1;
    end else begin
        out_channels_ch1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch2_ce0 = 1'b1;
    end else begin
        out_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch2_we0 = 1'b1;
    end else begin
        out_channels_ch2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch3_ce0 = 1'b1;
    end else begin
        out_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch3_we0 = 1'b1;
    end else begin
        out_channels_ch3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln49_fu_234_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter7 == 1'b1) & (ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter7 == 1'b1) & (ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln49_fu_234_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln49_fu_239_p2 = (indvar_flatten_fu_114 + 32'd1);

assign add_ln54_1_fu_326_p2 = (add_ln54_fu_317_p2 + zext_ln54_fu_323_p1);

assign add_ln54_fu_317_p2 = (tmp_cast_fu_297_p3 + tmp_3_cast_fu_309_p3);

assign add_ln57_1_fu_482_p2 = (add_ln57_fu_476_p2 + zext_ln57_1_fu_450_p1);

assign add_ln57_2_fu_491_p2 = (zext_ln57_8_fu_488_p1 + add_ln57_1_fu_482_p2);

assign add_ln57_3_fu_356_p2 = (zext_ln57_4_fu_353_p1 + 9'd128);

assign add_ln57_fu_476_p2 = (zext_ln57_2_fu_461_p1 + zext_ln57_5_fu_472_p1);

assign add_ln58_1_fu_507_p2 = (sub_ln58_reg_735 + 16'd128);

assign add_ln58_2_fu_512_p2 = ($signed(add_ln58_1_fu_507_p2) + $signed(grp_fu_588_p3));

assign add_ln59_1_fu_437_p2 = (sub_ln59_1_fu_431_p2 + 14'd128);

assign add_ln59_2_fu_530_p2 = ($signed(sext_ln59_1_fu_527_p1) + $signed(grp_fu_597_p3));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = p_read;

assign ap_return_1 = p_read1;

assign grp_fu_573_p0 = grp_fu_573_p00;

assign grp_fu_573_p00 = p_read;

assign grp_fu_573_p1 = grp_fu_573_p10;

assign grp_fu_573_p10 = p_read1;

assign grp_fu_579_p0 = grp_fu_579_p00;

assign grp_fu_579_p00 = in_channels_ch3_q0;

assign grp_fu_579_p1 = 13'd25;

assign grp_fu_579_p2 = grp_fu_579_p20;

assign grp_fu_579_p20 = add_ln57_3_fu_356_p2;

assign grp_fu_588_p0 = zext_ln57_fu_342_p1;

assign grp_fu_588_p1 = 15'd32730;

assign grp_fu_597_p0 = zext_ln57_fu_342_p1;

assign grp_fu_597_p1 = 15'd122;

assign icmp_ln49_fu_234_p2 = ((indvar_flatten_fu_114 == bound_reg_648) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_248_p2 = ((y_02_fu_106 == p_read1) ? 1'b1 : 1'b0);

assign in_channels_ch1_address0 = zext_ln54_1_fu_337_p1;

assign in_channels_ch2_address0 = zext_ln54_1_reg_671;

assign in_channels_ch3_address0 = zext_ln54_1_fu_337_p1;

assign mul_ln58_1_fu_366_p0 = zext_ln57_3_fu_350_p1;

assign mul_ln58_1_fu_366_p1 = 16'd65462;

assign mul_ln59_1_fu_404_p0 = zext_ln57_3_fu_350_p1;

assign mul_ln59_1_fu_404_p1 = 16'd65442;

assign out_channels_ch1_address0 = zext_ln54_1_reg_671_pp0_iter6_reg;

assign out_channels_ch1_d0 = (trunc_ln_reg_750 + 8'd16);

assign out_channels_ch2_address0 = zext_ln54_1_reg_671_pp0_iter6_reg;

assign out_channels_ch2_d0 = (trunc_ln5_reg_755 ^ 8'd128);

assign out_channels_ch3_address0 = zext_ln54_1_reg_671_pp0_iter6_reg;

assign out_channels_ch3_d0 = (trunc_ln6_reg_760 ^ 8'd128);

assign select_ln34_1_fu_286_p3 = ((icmp_ln52_reg_656[0:0] == 1'b1) ? x_5_fu_280_p2 : x_fu_110);

assign select_ln34_fu_253_p3 = ((icmp_ln52_fu_248_p2[0:0] == 1'b1) ? 16'd0 : y_02_fu_106);

assign sext_ln59_1_fu_527_p1 = $signed(add_ln59_1_reg_745);

assign sext_ln59_fu_416_p1 = $signed(sub_ln59_fu_410_p2);

assign shl_ln1_fu_372_p3 = {{B_reg_700_pp0_iter4_reg}, {7'd0}};

assign shl_ln2_fu_420_p3 = {{B_reg_700_pp0_iter4_reg}, {1'd0}};

assign shl_ln57_1_fu_454_p3 = {{R_reg_694_pp0_iter5_reg}, {1'd0}};

assign shl_ln57_2_fu_465_p3 = {{G_reg_718_pp0_iter5_reg}, {7'd0}};

assign shl_ln58_1_fu_383_p3 = {{B_reg_700_pp0_iter4_reg}, {4'd0}};

assign shl_ln_fu_443_p3 = {{R_reg_694_pp0_iter5_reg}, {6'd0}};

assign sub_ln58_fu_398_p2 = (zext_ln58_fu_379_p1 - zext_ln58_2_fu_394_p1);

assign sub_ln59_1_fu_431_p2 = ($signed(sext_ln59_fu_416_p1) - $signed(zext_ln59_1_fu_427_p1));

assign sub_ln59_fu_410_p2 = (13'd0 - zext_ln58_1_fu_390_p1);

assign tmp_3_cast_fu_309_p3 = {{trunc_ln54_1_fu_305_p1}, {8'd0}};

assign tmp_cast_fu_297_p3 = {{trunc_ln54_fu_293_p1}, {10'd0}};

assign trunc_ln54_1_fu_305_p1 = select_ln34_1_fu_286_p3[13:0];

assign trunc_ln54_fu_293_p1 = select_ln34_1_fu_286_p3[11:0];

assign x_5_fu_280_p2 = (x_fu_110 + 16'd1);

assign y_fu_261_p2 = (select_ln34_fu_253_p3 + 16'd1);

assign zext_ln54_1_fu_337_p1 = add_ln54_1_reg_666;

assign zext_ln54_fu_323_p1 = select_ln34_reg_661;

assign zext_ln57_1_fu_450_p1 = shl_ln_fu_443_p3;

assign zext_ln57_2_fu_461_p1 = shl_ln57_1_fu_454_p3;

assign zext_ln57_3_fu_350_p1 = G_reg_718;

assign zext_ln57_4_fu_353_p1 = G_reg_718;

assign zext_ln57_5_fu_472_p1 = shl_ln57_2_fu_465_p3;

assign zext_ln57_8_fu_488_p1 = grp_fu_579_p3;

assign zext_ln57_fu_342_p1 = in_channels_ch1_q0;

assign zext_ln58_1_fu_390_p1 = shl_ln58_1_fu_383_p3;

assign zext_ln58_2_fu_394_p1 = shl_ln58_1_fu_383_p3;

assign zext_ln58_fu_379_p1 = shl_ln1_fu_372_p3;

assign zext_ln59_1_fu_427_p1 = shl_ln2_fu_420_p3;

always @ (posedge ap_clk) begin
    zext_ln54_1_reg_671[63:22] <= 42'b000000000000000000000000000000000000000000;
    zext_ln54_1_reg_671_pp0_iter3_reg[63:22] <= 42'b000000000000000000000000000000000000000000;
    zext_ln54_1_reg_671_pp0_iter4_reg[63:22] <= 42'b000000000000000000000000000000000000000000;
    zext_ln54_1_reg_671_pp0_iter5_reg[63:22] <= 42'b000000000000000000000000000000000000000000;
    zext_ln54_1_reg_671_pp0_iter6_reg[63:22] <= 42'b000000000000000000000000000000000000000000;
    sub_ln58_reg_735[3:0] <= 4'b0000;
    add_ln59_1_reg_745[0] <= 1'b0;
end

endmodule //yuv_filter_rgb2yuv_1

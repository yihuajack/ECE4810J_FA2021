-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
-- Version: 2021.1.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv_filter_yuv_scale is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce0 : OUT STD_LOGIC;
    in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce0 : OUT STD_LOGIC;
    in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce0 : OUT STD_LOGIC;
    in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_width_read : IN STD_LOGIC_VECTOR (15 downto 0);
    in_height_read : IN STD_LOGIC_VECTOR (15 downto 0);
    out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch1_ce0 : OUT STD_LOGIC;
    out_channels_ch1_we0 : OUT STD_LOGIC;
    out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch2_ce0 : OUT STD_LOGIC;
    out_channels_ch2_we0 : OUT STD_LOGIC;
    out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch3_ce0 : OUT STD_LOGIC;
    out_channels_ch3_we0 : OUT STD_LOGIC;
    out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Y_scale : IN STD_LOGIC_VECTOR (7 downto 0);
    U_scale : IN STD_LOGIC_VECTOR (7 downto 0);
    V_scale : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of yuv_filter_yuv_scale is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln137_fu_215_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln137_reg_451 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln138_fu_219_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln138_reg_456 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln139_fu_223_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln139_reg_461 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_403_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln111_reg_466 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln132_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_reg_474 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln129_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln118_fu_249_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln118_reg_479 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln134_1_fu_322_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln134_1_reg_484 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln134_1_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln134_1_reg_489 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln134_1_reg_489_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln134_1_reg_489_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal Y_reg_511 : STD_LOGIC_VECTOR (7 downto 0);
    signal U_reg_516 : STD_LOGIC_VECTOR (7 downto 0);
    signal V_reg_521 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln_reg_526 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1_reg_531 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln2_reg_536 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal y_fu_72 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_1_fu_257_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_fu_76 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln118_1_fu_282_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln129_fu_235_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_2_fu_276_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln134_fu_289_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln134_1_fu_301_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_cast_fu_293_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_1_cast_fu_305_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln134_fu_313_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln134_fu_319_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln137_fu_342_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln137_fu_342_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln138_fu_350_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln138_fu_350_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln139_fu_358_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln139_fu_358_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln137_fu_342_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln138_fu_350_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln139_fu_358_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_403_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_403_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_403_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_403_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln137_fu_342_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln138_fu_350_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln139_fu_358_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component yuv_filter_mul_8ns_8ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component yuv_filter_mul_mul_16ns_16ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mul_8ns_8ns_15_1_1_U20 : component yuv_filter_mul_8ns_8ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln137_fu_342_p0,
        din1 => mul_ln137_fu_342_p1,
        dout => mul_ln137_fu_342_p2);

    mul_8ns_8ns_15_1_1_U21 : component yuv_filter_mul_8ns_8ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln138_fu_350_p0,
        din1 => mul_ln138_fu_350_p1,
        dout => mul_ln138_fu_350_p2);

    mul_8ns_8ns_15_1_1_U22 : component yuv_filter_mul_8ns_8ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln139_fu_358_p0,
        din1 => mul_ln139_fu_358_p1,
        dout => mul_ln139_fu_358_p2);

    mul_mul_16ns_16ns_32_4_1_U23 : component yuv_filter_mul_mul_16ns_16ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_403_p0,
        din1 => grp_fu_403_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_403_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_fu_80 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln129_fu_230_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_fu_80 <= add_ln129_fu_235_p2;
            end if; 
        end if;
    end process;

    x_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                x_fu_76 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                x_fu_76 <= select_ln118_1_fu_282_p3;
            end if; 
        end if;
    end process;

    y_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                y_fu_72 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln129_fu_230_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                y_fu_72 <= y_1_fu_257_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                U_reg_516 <= in_channels_ch2_q0;
                V_reg_521 <= in_channels_ch3_q0;
                Y_reg_511 <= in_channels_ch1_q0;
                trunc_ln1_reg_531 <= mul_ln138_fu_350_p2(14 downto 7);
                trunc_ln2_reg_536 <= mul_ln139_fu_358_p2(14 downto 7);
                trunc_ln_reg_526 <= mul_ln137_fu_342_p2(14 downto 7);
                    zext_ln134_1_reg_489(21 downto 0) <= zext_ln134_1_fu_333_p1(21 downto 0);
                    zext_ln134_1_reg_489_pp0_iter3_reg(21 downto 0) <= zext_ln134_1_reg_489(21 downto 0);
                    zext_ln134_1_reg_489_pp0_iter4_reg(21 downto 0) <= zext_ln134_1_reg_489_pp0_iter3_reg(21 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln134_1_reg_484 <= add_ln134_1_fu_322_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln129_fu_230_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln132_reg_474 <= icmp_ln132_fu_244_p2;
                select_ln118_reg_479 <= select_ln118_fu_249_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                mul_ln111_reg_466 <= grp_fu_403_p2;
                    zext_ln137_reg_451(7 downto 0) <= zext_ln137_fu_215_p1(7 downto 0);
                    zext_ln138_reg_456(7 downto 0) <= zext_ln138_fu_219_p1(7 downto 0);
                    zext_ln139_reg_461(7 downto 0) <= zext_ln139_fu_223_p1(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln137_reg_451(14 downto 8) <= "0000000";
    zext_ln138_reg_456(14 downto 8) <= "0000000";
    zext_ln139_reg_461(14 downto 8) <= "0000000";
    zext_ln134_1_reg_489(63 downto 22) <= "000000000000000000000000000000000000000000";
    zext_ln134_1_reg_489_pp0_iter3_reg(63 downto 22) <= "000000000000000000000000000000000000000000";
    zext_ln134_1_reg_489_pp0_iter4_reg(63 downto 22) <= "000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln129_fu_230_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln129_fu_230_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln129_fu_230_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln129_fu_235_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_80) + unsigned(ap_const_lv32_1));
    add_ln134_1_fu_322_p2 <= std_logic_vector(unsigned(add_ln134_fu_313_p2) + unsigned(zext_ln134_fu_319_p1));
    add_ln134_fu_313_p2 <= std_logic_vector(unsigned(tmp_cast_fu_293_p3) + unsigned(tmp_1_cast_fu_305_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(5);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln129_fu_230_p2)
    begin
        if ((icmp_ln129_fu_230_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= in_width_read;
    ap_return_1 <= in_height_read;
    grp_fu_403_p0 <= grp_fu_403_p00(16 - 1 downto 0);
    grp_fu_403_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_width_read),32));
    grp_fu_403_p1 <= grp_fu_403_p10(16 - 1 downto 0);
    grp_fu_403_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_height_read),32));
    icmp_ln129_fu_230_p2 <= "1" when (indvar_flatten_fu_80 = mul_ln111_reg_466) else "0";
    icmp_ln132_fu_244_p2 <= "1" when (y_fu_72 = in_height_read) else "0";
    in_channels_ch1_address0 <= zext_ln134_1_fu_333_p1(22 - 1 downto 0);

    in_channels_ch1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch2_address0 <= zext_ln134_1_fu_333_p1(22 - 1 downto 0);

    in_channels_ch2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch3_address0 <= zext_ln134_1_fu_333_p1(22 - 1 downto 0);

    in_channels_ch3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln137_fu_342_p0 <= mul_ln137_fu_342_p00(8 - 1 downto 0);
    mul_ln137_fu_342_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Y_reg_511),15));
    mul_ln137_fu_342_p1 <= zext_ln137_reg_451(8 - 1 downto 0);
    mul_ln138_fu_350_p0 <= mul_ln138_fu_350_p00(8 - 1 downto 0);
    mul_ln138_fu_350_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(U_reg_516),15));
    mul_ln138_fu_350_p1 <= zext_ln138_reg_456(8 - 1 downto 0);
    mul_ln139_fu_358_p0 <= mul_ln139_fu_358_p00(8 - 1 downto 0);
    mul_ln139_fu_358_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(V_reg_521),15));
    mul_ln139_fu_358_p1 <= zext_ln139_reg_461(8 - 1 downto 0);
    out_channels_ch1_address0 <= zext_ln134_1_reg_489_pp0_iter4_reg(22 - 1 downto 0);

    out_channels_ch1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_d0 <= trunc_ln_reg_526;

    out_channels_ch1_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_channels_ch1_we0 <= ap_const_logic_1;
        else 
            out_channels_ch1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_address0 <= zext_ln134_1_reg_489_pp0_iter4_reg(22 - 1 downto 0);

    out_channels_ch2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_d0 <= trunc_ln1_reg_531;

    out_channels_ch2_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_channels_ch2_we0 <= ap_const_logic_1;
        else 
            out_channels_ch2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_address0 <= zext_ln134_1_reg_489_pp0_iter4_reg(22 - 1 downto 0);

    out_channels_ch3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_d0 <= trunc_ln2_reg_536;

    out_channels_ch3_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_channels_ch3_we0 <= ap_const_logic_1;
        else 
            out_channels_ch3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln118_1_fu_282_p3 <= 
        x_2_fu_276_p2 when (icmp_ln132_reg_474(0) = '1') else 
        x_fu_76;
    select_ln118_fu_249_p3 <= 
        ap_const_lv16_0 when (icmp_ln132_fu_244_p2(0) = '1') else 
        y_fu_72;
    tmp_1_cast_fu_305_p3 <= (trunc_ln134_1_fu_301_p1 & ap_const_lv8_0);
    tmp_cast_fu_293_p3 <= (trunc_ln134_fu_289_p1 & ap_const_lv10_0);
    trunc_ln134_1_fu_301_p1 <= select_ln118_1_fu_282_p3(14 - 1 downto 0);
    trunc_ln134_fu_289_p1 <= select_ln118_1_fu_282_p3(12 - 1 downto 0);
    x_2_fu_276_p2 <= std_logic_vector(unsigned(x_fu_76) + unsigned(ap_const_lv16_1));
    y_1_fu_257_p2 <= std_logic_vector(unsigned(select_ln118_fu_249_p3) + unsigned(ap_const_lv16_1));
    zext_ln134_1_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln134_1_reg_484),64));
    zext_ln134_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln118_reg_479),22));
    zext_ln137_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Y_scale),15));
    zext_ln138_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(U_scale),15));
    zext_ln139_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(V_scale),15));
end behav;

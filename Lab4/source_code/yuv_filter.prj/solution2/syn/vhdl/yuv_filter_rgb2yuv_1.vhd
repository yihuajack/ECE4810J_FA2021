-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
-- Version: 2021.1.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv_filter_rgb2yuv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce0 : OUT STD_LOGIC;
    in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce0 : OUT STD_LOGIC;
    in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce0 : OUT STD_LOGIC;
    in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch1_ce0 : OUT STD_LOGIC;
    out_channels_ch1_we0 : OUT STD_LOGIC;
    out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch2_ce0 : OUT STD_LOGIC;
    out_channels_ch2_we0 : OUT STD_LOGIC;
    out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch3_ce0 : OUT STD_LOGIC;
    out_channels_ch3_we0 : OUT STD_LOGIC;
    out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of yuv_filter_rgb2yuv_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_80 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_const_lv16_FFB6 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110110110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_FFA2 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110100010";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv14_80 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_80 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv13_19 : STD_LOGIC_VECTOR (12 downto 0) := "0000000011001";
    constant ap_const_lv15_7FDA : STD_LOGIC_VECTOR (14 downto 0) := "111111111011010";
    constant ap_const_lv15_7A : STD_LOGIC_VECTOR (14 downto 0) := "000000001111010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_573_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_reg_648 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln52_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_656 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln49_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_fu_253_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln34_reg_661 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln54_1_fu_326_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln54_1_reg_666 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln54_1_fu_337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_1_reg_671 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_1_reg_671_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_1_reg_671_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_1_reg_671_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_1_reg_671_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal R_reg_694 : STD_LOGIC_VECTOR (7 downto 0);
    signal R_reg_694_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal R_reg_694_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal B_reg_700 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_reg_700_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln57_fu_342_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal G_reg_718 : STD_LOGIC_VECTOR (7 downto 0);
    signal G_reg_718_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln58_1_fu_366_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln58_fu_398_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln58_reg_735 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln59_1_fu_404_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln59_1_fu_437_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln59_1_reg_745 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln_reg_750 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln5_reg_755 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln6_reg_760 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal y_02_fu_106 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_fu_261_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_fu_110 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln34_1_fu_286_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten_fu_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln49_fu_239_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_5_fu_280_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln54_fu_293_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln54_1_fu_305_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_cast_fu_297_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_3_cast_fu_309_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln54_fu_317_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln54_fu_323_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln57_4_fu_353_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln57_3_fu_356_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln58_1_fu_366_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln57_3_fu_350_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln58_1_fu_366_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1_fu_372_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln58_1_fu_383_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln58_fu_379_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln58_2_fu_394_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln59_1_fu_404_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln59_1_fu_404_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln58_1_fu_390_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln59_fu_410_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln2_fu_420_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln59_fu_416_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln59_1_fu_427_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln59_1_fu_431_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln_fu_443_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln57_1_fu_454_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln57_2_fu_465_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln57_2_fu_461_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln57_5_fu_472_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln57_fu_476_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln57_1_fu_450_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_579_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln57_8_fu_488_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln57_1_fu_482_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln57_2_fu_491_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_1_fu_507_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_588_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_2_fu_512_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln58_2_fu_512_p2 : signal is "no";
    signal sext_ln59_1_fu_527_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_597_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln59_2_fu_530_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln59_2_fu_530_p2 : signal is "no";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_573_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_573_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_579_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_579_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_579_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_588_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_588_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_597_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_597_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_573_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_573_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_579_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_579_p20 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component yuv_filter_mul_8ns_8s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component yuv_filter_mul_mul_16ns_16ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component yuv_filter_mac_muladd_8ns_5ns_9ns_13_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component yuv_filter_mac_muladd_8ns_7s_16s_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component yuv_filter_mac_muladd_8ns_7ns_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    mul_8ns_8s_16_1_1_U1 : component yuv_filter_mul_8ns_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln58_1_fu_366_p0,
        din1 => mul_ln58_1_fu_366_p1,
        dout => mul_ln58_1_fu_366_p2);

    mul_8ns_8s_16_1_1_U2 : component yuv_filter_mul_8ns_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln59_1_fu_404_p0,
        din1 => mul_ln59_1_fu_404_p1,
        dout => mul_ln59_1_fu_404_p2);

    mul_mul_16ns_16ns_32_4_1_U3 : component yuv_filter_mul_mul_16ns_16ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_573_p0,
        din1 => grp_fu_573_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_573_p2);

    mac_muladd_8ns_5ns_9ns_13_4_1_U4 : component yuv_filter_mac_muladd_8ns_5ns_9ns_13_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 5,
        din2_WIDTH => 9,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_579_p0,
        din1 => grp_fu_579_p1,
        din2 => grp_fu_579_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_579_p3);

    mac_muladd_8ns_7s_16s_16_4_1_U5 : component yuv_filter_mac_muladd_8ns_7s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 7,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_588_p0,
        din1 => grp_fu_588_p1,
        din2 => mul_ln58_1_fu_366_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_588_p3);

    mac_muladd_8ns_7ns_16ns_16_4_1_U6 : component yuv_filter_mac_muladd_8ns_7ns_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 7,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_597_p0,
        din1 => grp_fu_597_p1,
        din2 => mul_ln59_1_fu_404_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_597_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_fu_114 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln49_fu_234_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_fu_114 <= add_ln49_fu_239_p2;
            end if; 
        end if;
    end process;

    x_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                x_fu_110 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                x_fu_110 <= select_ln34_1_fu_286_p3;
            end if; 
        end if;
    end process;

    y_02_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                y_02_fu_106 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln49_fu_234_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                y_02_fu_106 <= y_fu_261_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                B_reg_700 <= in_channels_ch3_q0;
                B_reg_700_pp0_iter4_reg <= B_reg_700;
                G_reg_718 <= in_channels_ch2_q0;
                G_reg_718_pp0_iter5_reg <= G_reg_718;
                R_reg_694 <= in_channels_ch1_q0;
                R_reg_694_pp0_iter4_reg <= R_reg_694;
                R_reg_694_pp0_iter5_reg <= R_reg_694_pp0_iter4_reg;
                    add_ln59_1_reg_745(13 downto 1) <= add_ln59_1_fu_437_p2(13 downto 1);
                    sub_ln58_reg_735(15 downto 4) <= sub_ln58_fu_398_p2(15 downto 4);
                trunc_ln5_reg_755 <= add_ln58_2_fu_512_p2(15 downto 8);
                trunc_ln6_reg_760 <= add_ln59_2_fu_530_p2(15 downto 8);
                trunc_ln_reg_750 <= add_ln57_2_fu_491_p2(15 downto 8);
                    zext_ln54_1_reg_671(21 downto 0) <= zext_ln54_1_fu_337_p1(21 downto 0);
                    zext_ln54_1_reg_671_pp0_iter3_reg(21 downto 0) <= zext_ln54_1_reg_671(21 downto 0);
                    zext_ln54_1_reg_671_pp0_iter4_reg(21 downto 0) <= zext_ln54_1_reg_671_pp0_iter3_reg(21 downto 0);
                    zext_ln54_1_reg_671_pp0_iter5_reg(21 downto 0) <= zext_ln54_1_reg_671_pp0_iter4_reg(21 downto 0);
                    zext_ln54_1_reg_671_pp0_iter6_reg(21 downto 0) <= zext_ln54_1_reg_671_pp0_iter5_reg(21 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln54_1_reg_666 <= add_ln54_1_fu_326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                bound_reg_648 <= grp_fu_573_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln49_fu_234_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln52_reg_656 <= icmp_ln52_fu_248_p2;
                select_ln34_reg_661 <= select_ln34_fu_253_p3;
            end if;
        end if;
    end process;
    zext_ln54_1_reg_671(63 downto 22) <= "000000000000000000000000000000000000000000";
    zext_ln54_1_reg_671_pp0_iter3_reg(63 downto 22) <= "000000000000000000000000000000000000000000";
    zext_ln54_1_reg_671_pp0_iter4_reg(63 downto 22) <= "000000000000000000000000000000000000000000";
    zext_ln54_1_reg_671_pp0_iter5_reg(63 downto 22) <= "000000000000000000000000000000000000000000";
    zext_ln54_1_reg_671_pp0_iter6_reg(63 downto 22) <= "000000000000000000000000000000000000000000";
    sub_ln58_reg_735(3 downto 0) <= "0000";
    add_ln59_1_reg_745(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln49_fu_234_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln49_fu_234_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln49_fu_234_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln49_fu_239_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_114) + unsigned(ap_const_lv32_1));
    add_ln54_1_fu_326_p2 <= std_logic_vector(unsigned(add_ln54_fu_317_p2) + unsigned(zext_ln54_fu_323_p1));
    add_ln54_fu_317_p2 <= std_logic_vector(unsigned(tmp_cast_fu_297_p3) + unsigned(tmp_3_cast_fu_309_p3));
    add_ln57_1_fu_482_p2 <= std_logic_vector(unsigned(add_ln57_fu_476_p2) + unsigned(zext_ln57_1_fu_450_p1));
    add_ln57_2_fu_491_p2 <= std_logic_vector(unsigned(zext_ln57_8_fu_488_p1) + unsigned(add_ln57_1_fu_482_p2));
    add_ln57_3_fu_356_p2 <= std_logic_vector(unsigned(zext_ln57_4_fu_353_p1) + unsigned(ap_const_lv9_80));
    add_ln57_fu_476_p2 <= std_logic_vector(unsigned(zext_ln57_2_fu_461_p1) + unsigned(zext_ln57_5_fu_472_p1));
    add_ln58_1_fu_507_p2 <= std_logic_vector(unsigned(sub_ln58_reg_735) + unsigned(ap_const_lv16_80));
    add_ln58_2_fu_512_p2 <= std_logic_vector(unsigned(add_ln58_1_fu_507_p2) + unsigned(grp_fu_588_p3));
    add_ln59_1_fu_437_p2 <= std_logic_vector(unsigned(sub_ln59_1_fu_431_p2) + unsigned(ap_const_lv14_80));
    add_ln59_2_fu_530_p2 <= std_logic_vector(signed(sext_ln59_1_fu_527_p1) + signed(grp_fu_597_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(5);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln49_fu_234_p2)
    begin
        if ((icmp_ln49_fu_234_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= p_read;
    ap_return_1 <= p_read1;
    grp_fu_573_p0 <= grp_fu_573_p00(16 - 1 downto 0);
    grp_fu_573_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read),32));
    grp_fu_573_p1 <= grp_fu_573_p10(16 - 1 downto 0);
    grp_fu_573_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read1),32));
    grp_fu_579_p0 <= grp_fu_579_p00(8 - 1 downto 0);
    grp_fu_579_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_channels_ch3_q0),13));
    grp_fu_579_p1 <= ap_const_lv13_19(5 - 1 downto 0);
    grp_fu_579_p2 <= grp_fu_579_p20(9 - 1 downto 0);
    grp_fu_579_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln57_3_fu_356_p2),13));
    grp_fu_588_p0 <= zext_ln57_fu_342_p1(8 - 1 downto 0);
    grp_fu_588_p1 <= ap_const_lv15_7FDA(7 - 1 downto 0);
    grp_fu_597_p0 <= zext_ln57_fu_342_p1(8 - 1 downto 0);
    grp_fu_597_p1 <= ap_const_lv15_7A(7 - 1 downto 0);
    icmp_ln49_fu_234_p2 <= "1" when (indvar_flatten_fu_114 = bound_reg_648) else "0";
    icmp_ln52_fu_248_p2 <= "1" when (y_02_fu_106 = p_read1) else "0";
    in_channels_ch1_address0 <= zext_ln54_1_fu_337_p1(22 - 1 downto 0);

    in_channels_ch1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch2_address0 <= zext_ln54_1_reg_671(22 - 1 downto 0);

    in_channels_ch2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch3_address0 <= zext_ln54_1_fu_337_p1(22 - 1 downto 0);

    in_channels_ch3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln58_1_fu_366_p0 <= zext_ln57_3_fu_350_p1(8 - 1 downto 0);
    mul_ln58_1_fu_366_p1 <= ap_const_lv16_FFB6(8 - 1 downto 0);
    mul_ln59_1_fu_404_p0 <= zext_ln57_3_fu_350_p1(8 - 1 downto 0);
    mul_ln59_1_fu_404_p1 <= ap_const_lv16_FFA2(8 - 1 downto 0);
    out_channels_ch1_address0 <= zext_ln54_1_reg_671_pp0_iter6_reg(22 - 1 downto 0);

    out_channels_ch1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_d0 <= std_logic_vector(unsigned(trunc_ln_reg_750) + unsigned(ap_const_lv8_10));

    out_channels_ch1_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_channels_ch1_we0 <= ap_const_logic_1;
        else 
            out_channels_ch1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_address0 <= zext_ln54_1_reg_671_pp0_iter6_reg(22 - 1 downto 0);

    out_channels_ch2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_d0 <= (trunc_ln5_reg_755 xor ap_const_lv8_80);

    out_channels_ch2_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_channels_ch2_we0 <= ap_const_logic_1;
        else 
            out_channels_ch2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_address0 <= zext_ln54_1_reg_671_pp0_iter6_reg(22 - 1 downto 0);

    out_channels_ch3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_d0 <= (trunc_ln6_reg_760 xor ap_const_lv8_80);

    out_channels_ch3_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_channels_ch3_we0 <= ap_const_logic_1;
        else 
            out_channels_ch3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln34_1_fu_286_p3 <= 
        x_5_fu_280_p2 when (icmp_ln52_reg_656(0) = '1') else 
        x_fu_110;
    select_ln34_fu_253_p3 <= 
        ap_const_lv16_0 when (icmp_ln52_fu_248_p2(0) = '1') else 
        y_02_fu_106;
        sext_ln59_1_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln59_1_reg_745),16));

        sext_ln59_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln59_fu_410_p2),14));

    shl_ln1_fu_372_p3 <= (B_reg_700_pp0_iter4_reg & ap_const_lv7_0);
    shl_ln2_fu_420_p3 <= (B_reg_700_pp0_iter4_reg & ap_const_lv1_0);
    shl_ln57_1_fu_454_p3 <= (R_reg_694_pp0_iter5_reg & ap_const_lv1_0);
    shl_ln57_2_fu_465_p3 <= (G_reg_718_pp0_iter5_reg & ap_const_lv7_0);
    shl_ln58_1_fu_383_p3 <= (B_reg_700_pp0_iter4_reg & ap_const_lv4_0);
    shl_ln_fu_443_p3 <= (R_reg_694_pp0_iter5_reg & ap_const_lv6_0);
    sub_ln58_fu_398_p2 <= std_logic_vector(unsigned(zext_ln58_fu_379_p1) - unsigned(zext_ln58_2_fu_394_p1));
    sub_ln59_1_fu_431_p2 <= std_logic_vector(signed(sext_ln59_fu_416_p1) - signed(zext_ln59_1_fu_427_p1));
    sub_ln59_fu_410_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(zext_ln58_1_fu_390_p1));
    tmp_3_cast_fu_309_p3 <= (trunc_ln54_1_fu_305_p1 & ap_const_lv8_0);
    tmp_cast_fu_297_p3 <= (trunc_ln54_fu_293_p1 & ap_const_lv10_0);
    trunc_ln54_1_fu_305_p1 <= select_ln34_1_fu_286_p3(14 - 1 downto 0);
    trunc_ln54_fu_293_p1 <= select_ln34_1_fu_286_p3(12 - 1 downto 0);
    x_5_fu_280_p2 <= std_logic_vector(unsigned(x_fu_110) + unsigned(ap_const_lv16_1));
    y_fu_261_p2 <= std_logic_vector(unsigned(select_ln34_fu_253_p3) + unsigned(ap_const_lv16_1));
    zext_ln54_1_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_1_reg_666),64));
    zext_ln54_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_reg_661),22));
    zext_ln57_1_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_443_p3),16));
    zext_ln57_2_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln57_1_fu_454_p3),16));
    zext_ln57_3_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(G_reg_718),16));
    zext_ln57_4_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(G_reg_718),9));
    zext_ln57_5_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln57_2_fu_465_p3),16));
    zext_ln57_8_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_579_p3),16));
    zext_ln57_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_channels_ch1_q0),15));
    zext_ln58_1_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln58_1_fu_383_p3),13));
    zext_ln58_2_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln58_1_fu_383_p3),16));
    zext_ln58_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_372_p3),16));
    zext_ln59_1_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_420_p3),14));
end behav;

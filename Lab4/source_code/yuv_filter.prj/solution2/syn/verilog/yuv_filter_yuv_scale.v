// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
// Version: 2021.1.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module yuv_filter_yuv_scale (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_channels_ch1_address0,
        in_channels_ch1_ce0,
        in_channels_ch1_q0,
        in_channels_ch2_address0,
        in_channels_ch2_ce0,
        in_channels_ch2_q0,
        in_channels_ch3_address0,
        in_channels_ch3_ce0,
        in_channels_ch3_q0,
        in_width_read,
        in_height_read,
        out_channels_ch1_address0,
        out_channels_ch1_ce0,
        out_channels_ch1_we0,
        out_channels_ch1_d0,
        out_channels_ch2_address0,
        out_channels_ch2_ce0,
        out_channels_ch2_we0,
        out_channels_ch2_d0,
        out_channels_ch3_address0,
        out_channels_ch3_ce0,
        out_channels_ch3_we0,
        out_channels_ch3_d0,
        Y_scale,
        U_scale,
        V_scale,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp0_stage0 = 6'd16;
parameter    ap_ST_fsm_state11 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [21:0] in_channels_ch1_address0;
output   in_channels_ch1_ce0;
input  [7:0] in_channels_ch1_q0;
output  [21:0] in_channels_ch2_address0;
output   in_channels_ch2_ce0;
input  [7:0] in_channels_ch2_q0;
output  [21:0] in_channels_ch3_address0;
output   in_channels_ch3_ce0;
input  [7:0] in_channels_ch3_q0;
input  [15:0] in_width_read;
input  [15:0] in_height_read;
output  [21:0] out_channels_ch1_address0;
output   out_channels_ch1_ce0;
output   out_channels_ch1_we0;
output  [7:0] out_channels_ch1_d0;
output  [21:0] out_channels_ch2_address0;
output   out_channels_ch2_ce0;
output   out_channels_ch2_we0;
output  [7:0] out_channels_ch2_d0;
output  [21:0] out_channels_ch3_address0;
output   out_channels_ch3_ce0;
output   out_channels_ch3_we0;
output  [7:0] out_channels_ch3_d0;
input  [7:0] Y_scale;
input  [7:0] U_scale;
input  [7:0] V_scale;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_channels_ch1_ce0;
reg in_channels_ch2_ce0;
reg in_channels_ch3_ce0;
reg out_channels_ch1_ce0;
reg out_channels_ch1_we0;
reg out_channels_ch2_ce0;
reg out_channels_ch2_we0;
reg out_channels_ch3_ce0;
reg out_channels_ch3_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [14:0] zext_ln137_fu_215_p1;
reg   [14:0] zext_ln137_reg_451;
wire    ap_CS_fsm_state4;
wire   [14:0] zext_ln138_fu_219_p1;
reg   [14:0] zext_ln138_reg_456;
wire   [14:0] zext_ln139_fu_223_p1;
reg   [14:0] zext_ln139_reg_461;
wire  signed [31:0] grp_fu_403_p2;
reg   [31:0] mul_ln111_reg_466;
wire   [0:0] icmp_ln132_fu_244_p2;
reg   [0:0] icmp_ln132_reg_474;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state10_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln129_fu_230_p2;
wire   [15:0] select_ln118_fu_249_p3;
reg   [15:0] select_ln118_reg_479;
wire   [21:0] add_ln134_1_fu_322_p2;
reg   [21:0] add_ln134_1_reg_484;
wire   [63:0] zext_ln134_1_fu_333_p1;
reg   [63:0] zext_ln134_1_reg_489;
reg   [63:0] zext_ln134_1_reg_489_pp0_iter3_reg;
reg   [63:0] zext_ln134_1_reg_489_pp0_iter4_reg;
reg   [7:0] Y_reg_511;
reg   [7:0] U_reg_516;
reg   [7:0] V_reg_521;
reg   [7:0] trunc_ln_reg_526;
reg   [7:0] trunc_ln1_reg_531;
reg   [7:0] trunc_ln2_reg_536;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
wire    ap_block_pp0_stage0;
reg   [15:0] y_fu_72;
wire   [15:0] y_1_fu_257_p2;
reg   [15:0] x_fu_76;
wire   [15:0] select_ln118_1_fu_282_p3;
reg   [31:0] indvar_flatten_fu_80;
wire   [31:0] add_ln129_fu_235_p2;
wire   [15:0] x_2_fu_276_p2;
wire   [11:0] trunc_ln134_fu_289_p1;
wire   [13:0] trunc_ln134_1_fu_301_p1;
wire   [21:0] tmp_cast_fu_293_p3;
wire   [21:0] tmp_1_cast_fu_305_p3;
wire   [21:0] add_ln134_fu_313_p2;
wire   [21:0] zext_ln134_fu_319_p1;
wire   [7:0] mul_ln137_fu_342_p0;
wire   [7:0] mul_ln137_fu_342_p1;
wire   [7:0] mul_ln138_fu_350_p0;
wire   [7:0] mul_ln138_fu_350_p1;
wire   [7:0] mul_ln139_fu_358_p0;
wire   [7:0] mul_ln139_fu_358_p1;
wire   [14:0] mul_ln137_fu_342_p2;
wire   [14:0] mul_ln138_fu_350_p2;
wire   [14:0] mul_ln139_fu_358_p2;
wire    ap_CS_fsm_state11;
wire   [15:0] grp_fu_403_p0;
wire   [15:0] grp_fu_403_p1;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] grp_fu_403_p00;
wire   [31:0] grp_fu_403_p10;
wire   [14:0] mul_ln137_fu_342_p00;
wire   [14:0] mul_ln138_fu_350_p00;
wire   [14:0] mul_ln139_fu_358_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

yuv_filter_mul_8ns_8ns_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 15 ))
mul_8ns_8ns_15_1_1_U20(
    .din0(mul_ln137_fu_342_p0),
    .din1(mul_ln137_fu_342_p1),
    .dout(mul_ln137_fu_342_p2)
);

yuv_filter_mul_8ns_8ns_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 15 ))
mul_8ns_8ns_15_1_1_U21(
    .din0(mul_ln138_fu_350_p0),
    .din1(mul_ln138_fu_350_p1),
    .dout(mul_ln138_fu_350_p2)
);

yuv_filter_mul_8ns_8ns_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 15 ))
mul_8ns_8ns_15_1_1_U22(
    .din0(mul_ln139_fu_358_p0),
    .din1(mul_ln139_fu_358_p1),
    .dout(mul_ln139_fu_358_p2)
);

yuv_filter_mul_mul_16ns_16ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16ns_16ns_32_4_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_403_p0),
    .din1(grp_fu_403_p1),
    .ce(1'b1),
    .dout(grp_fu_403_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state5)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_fu_80 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln129_fu_230_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_fu_80 <= add_ln129_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        x_fu_76 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_fu_76 <= select_ln118_1_fu_282_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        y_fu_72 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln129_fu_230_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        y_fu_72 <= y_1_fu_257_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        U_reg_516 <= in_channels_ch2_q0;
        V_reg_521 <= in_channels_ch3_q0;
        Y_reg_511 <= in_channels_ch1_q0;
        trunc_ln1_reg_531 <= {{mul_ln138_fu_350_p2[14:7]}};
        trunc_ln2_reg_536 <= {{mul_ln139_fu_358_p2[14:7]}};
        trunc_ln_reg_526 <= {{mul_ln137_fu_342_p2[14:7]}};
        zext_ln134_1_reg_489[21 : 0] <= zext_ln134_1_fu_333_p1[21 : 0];
        zext_ln134_1_reg_489_pp0_iter3_reg[21 : 0] <= zext_ln134_1_reg_489[21 : 0];
        zext_ln134_1_reg_489_pp0_iter4_reg[21 : 0] <= zext_ln134_1_reg_489_pp0_iter3_reg[21 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln134_1_reg_484 <= add_ln134_1_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln129_fu_230_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln132_reg_474 <= icmp_ln132_fu_244_p2;
        select_ln118_reg_479 <= select_ln118_fu_249_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mul_ln111_reg_466 <= grp_fu_403_p2;
        zext_ln137_reg_451[7 : 0] <= zext_ln137_fu_215_p1[7 : 0];
        zext_ln138_reg_456[7 : 0] <= zext_ln138_fu_219_p1[7 : 0];
        zext_ln139_reg_461[7 : 0] <= zext_ln139_fu_223_p1[7 : 0];
    end
end

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln129_fu_230_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_channels_ch1_ce0 = 1'b1;
    end else begin
        in_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_channels_ch2_ce0 = 1'b1;
    end else begin
        in_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_channels_ch3_ce0 = 1'b1;
    end else begin
        in_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch1_ce0 = 1'b1;
    end else begin
        out_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch1_we0 = 1'b1;
    end else begin
        out_channels_ch1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch2_ce0 = 1'b1;
    end else begin
        out_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch2_we0 = 1'b1;
    end else begin
        out_channels_ch2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch3_ce0 = 1'b1;
    end else begin
        out_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch3_we0 = 1'b1;
    end else begin
        out_channels_ch3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln129_fu_230_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln129_fu_230_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln129_fu_235_p2 = (indvar_flatten_fu_80 + 32'd1);

assign add_ln134_1_fu_322_p2 = (add_ln134_fu_313_p2 + zext_ln134_fu_319_p1);

assign add_ln134_fu_313_p2 = (tmp_cast_fu_293_p3 + tmp_1_cast_fu_305_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = in_width_read;

assign ap_return_1 = in_height_read;

assign grp_fu_403_p0 = grp_fu_403_p00;

assign grp_fu_403_p00 = in_width_read;

assign grp_fu_403_p1 = grp_fu_403_p10;

assign grp_fu_403_p10 = in_height_read;

assign icmp_ln129_fu_230_p2 = ((indvar_flatten_fu_80 == mul_ln111_reg_466) ? 1'b1 : 1'b0);

assign icmp_ln132_fu_244_p2 = ((y_fu_72 == in_height_read) ? 1'b1 : 1'b0);

assign in_channels_ch1_address0 = zext_ln134_1_fu_333_p1;

assign in_channels_ch2_address0 = zext_ln134_1_fu_333_p1;

assign in_channels_ch3_address0 = zext_ln134_1_fu_333_p1;

assign mul_ln137_fu_342_p0 = mul_ln137_fu_342_p00;

assign mul_ln137_fu_342_p00 = Y_reg_511;

assign mul_ln137_fu_342_p1 = zext_ln137_reg_451;

assign mul_ln138_fu_350_p0 = mul_ln138_fu_350_p00;

assign mul_ln138_fu_350_p00 = U_reg_516;

assign mul_ln138_fu_350_p1 = zext_ln138_reg_456;

assign mul_ln139_fu_358_p0 = mul_ln139_fu_358_p00;

assign mul_ln139_fu_358_p00 = V_reg_521;

assign mul_ln139_fu_358_p1 = zext_ln139_reg_461;

assign out_channels_ch1_address0 = zext_ln134_1_reg_489_pp0_iter4_reg;

assign out_channels_ch1_d0 = trunc_ln_reg_526;

assign out_channels_ch2_address0 = zext_ln134_1_reg_489_pp0_iter4_reg;

assign out_channels_ch2_d0 = trunc_ln1_reg_531;

assign out_channels_ch3_address0 = zext_ln134_1_reg_489_pp0_iter4_reg;

assign out_channels_ch3_d0 = trunc_ln2_reg_536;

assign select_ln118_1_fu_282_p3 = ((icmp_ln132_reg_474[0:0] == 1'b1) ? x_2_fu_276_p2 : x_fu_76);

assign select_ln118_fu_249_p3 = ((icmp_ln132_fu_244_p2[0:0] == 1'b1) ? 16'd0 : y_fu_72);

assign tmp_1_cast_fu_305_p3 = {{trunc_ln134_1_fu_301_p1}, {8'd0}};

assign tmp_cast_fu_293_p3 = {{trunc_ln134_fu_289_p1}, {10'd0}};

assign trunc_ln134_1_fu_301_p1 = select_ln118_1_fu_282_p3[13:0];

assign trunc_ln134_fu_289_p1 = select_ln118_1_fu_282_p3[11:0];

assign x_2_fu_276_p2 = (x_fu_76 + 16'd1);

assign y_1_fu_257_p2 = (select_ln118_fu_249_p3 + 16'd1);

assign zext_ln134_1_fu_333_p1 = add_ln134_1_reg_484;

assign zext_ln134_fu_319_p1 = select_ln118_reg_479;

assign zext_ln137_fu_215_p1 = Y_scale;

assign zext_ln138_fu_219_p1 = U_scale;

assign zext_ln139_fu_223_p1 = V_scale;

always @ (posedge ap_clk) begin
    zext_ln137_reg_451[14:8] <= 7'b0000000;
    zext_ln138_reg_456[14:8] <= 7'b0000000;
    zext_ln139_reg_461[14:8] <= 7'b0000000;
    zext_ln134_1_reg_489[63:22] <= 42'b000000000000000000000000000000000000000000;
    zext_ln134_1_reg_489_pp0_iter3_reg[63:22] <= 42'b000000000000000000000000000000000000000000;
    zext_ln134_1_reg_489_pp0_iter4_reg[63:22] <= 42'b000000000000000000000000000000000000000000;
end

endmodule //yuv_filter_yuv_scale

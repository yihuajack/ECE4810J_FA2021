// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
// Version: 2021.1.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module yuv_filter_yuv2rgb_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_channels_ch1_address0,
        in_channels_ch1_ce0,
        in_channels_ch1_q0,
        in_channels_ch2_address0,
        in_channels_ch2_ce0,
        in_channels_ch2_q0,
        in_channels_ch3_address0,
        in_channels_ch3_ce0,
        in_channels_ch3_q0,
        p_read,
        p_read1,
        out_channels_ch1_address0,
        out_channels_ch1_ce0,
        out_channels_ch1_we0,
        out_channels_ch1_d0,
        out_channels_ch2_address0,
        out_channels_ch2_ce0,
        out_channels_ch2_we0,
        out_channels_ch2_d0,
        out_channels_ch3_address0,
        out_channels_ch3_ce0,
        out_channels_ch3_we0,
        out_channels_ch3_d0,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp0_stage0 = 6'd16;
parameter    ap_ST_fsm_state15 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [21:0] in_channels_ch1_address0;
output   in_channels_ch1_ce0;
input  [7:0] in_channels_ch1_q0;
output  [21:0] in_channels_ch2_address0;
output   in_channels_ch2_ce0;
input  [7:0] in_channels_ch2_q0;
output  [21:0] in_channels_ch3_address0;
output   in_channels_ch3_ce0;
input  [7:0] in_channels_ch3_q0;
input  [15:0] p_read;
input  [15:0] p_read1;
output  [21:0] out_channels_ch1_address0;
output   out_channels_ch1_ce0;
output   out_channels_ch1_we0;
output  [7:0] out_channels_ch1_d0;
output  [21:0] out_channels_ch2_address0;
output   out_channels_ch2_ce0;
output   out_channels_ch2_we0;
output  [7:0] out_channels_ch2_d0;
output  [21:0] out_channels_ch3_address0;
output   out_channels_ch3_ce0;
output   out_channels_ch3_we0;
output  [7:0] out_channels_ch3_d0;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_channels_ch1_ce0;
reg in_channels_ch2_ce0;
reg in_channels_ch3_ce0;
reg out_channels_ch1_ce0;
reg out_channels_ch1_we0;
reg out_channels_ch2_ce0;
reg out_channels_ch2_we0;
reg out_channels_ch3_ce0;
reg out_channels_ch3_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [31:0] grp_fu_592_p2;
reg   [31:0] bound_reg_679;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln92_fu_254_p2;
reg   [0:0] icmp_ln92_reg_687;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state10_pp0_stage0_iter5;
wire    ap_block_state11_pp0_stage0_iter6;
wire    ap_block_state12_pp0_stage0_iter7;
wire    ap_block_state13_pp0_stage0_iter8;
wire    ap_block_state14_pp0_stage0_iter9;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln89_fu_240_p2;
wire   [15:0] select_ln72_fu_259_p3;
reg   [15:0] select_ln72_reg_692;
wire   [21:0] add_ln94_1_fu_332_p2;
reg   [21:0] add_ln94_1_reg_697;
wire   [63:0] zext_ln94_1_fu_343_p1;
reg   [63:0] zext_ln94_1_reg_702;
reg   [63:0] zext_ln94_1_reg_702_pp0_iter3_reg;
reg   [63:0] zext_ln94_1_reg_702_pp0_iter4_reg;
reg   [63:0] zext_ln94_1_reg_702_pp0_iter5_reg;
reg   [63:0] zext_ln94_1_reg_702_pp0_iter6_reg;
reg   [63:0] zext_ln94_1_reg_702_pp0_iter7_reg;
reg   [63:0] zext_ln94_1_reg_702_pp0_iter8_reg;
wire  signed [7:0] D_fu_375_p2;
reg  signed [7:0] D_reg_741;
wire  signed [17:0] grp_fu_598_p3;
reg    ap_enable_reg_pp0_iter6;
wire   [18:0] add_ln102_fu_416_p2;
reg   [18:0] add_ln102_reg_758;
reg   [2:0] tmp_4_reg_764;
wire   [7:0] R_fu_477_p3;
reg   [7:0] R_reg_769;
wire  signed [17:0] grp_fu_618_p3;
reg    ap_enable_reg_pp0_iter7;
wire   [7:0] G_fu_574_p3;
reg   [7:0] G_reg_779;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
wire    ap_block_pp0_stage0;
reg   [15:0] y_fu_112;
wire   [15:0] y_2_fu_267_p2;
reg   [15:0] x_fu_116;
wire   [15:0] select_ln72_1_fu_292_p3;
reg   [31:0] indvar_flatten_fu_120;
wire   [31:0] add_ln89_fu_245_p2;
wire   [15:0] x_4_fu_286_p2;
wire   [11:0] trunc_ln94_fu_299_p1;
wire   [13:0] trunc_ln94_1_fu_311_p1;
wire   [21:0] tmp_cast_fu_303_p3;
wire   [21:0] tmp_2_cast_fu_315_p3;
wire   [21:0] add_ln94_fu_323_p2;
wire   [21:0] zext_ln94_fu_329_p1;
wire   [8:0] zext_ln97_fu_347_p1;
wire  signed [8:0] C_fu_351_p2;
wire  signed [7:0] E_fu_361_p2;
wire   [16:0] shl_ln_fu_385_p3;
wire   [9:0] shl_ln102_1_fu_396_p3;
wire  signed [17:0] sext_ln102_2_fu_403_p1;
(* use_dsp48 = "no" *) wire   [17:0] add_ln102_1_fu_407_p2;
wire  signed [18:0] sext_ln102_3_fu_412_p1;
wire  signed [18:0] sext_ln102_1_fu_392_p1;
wire  signed [17:0] grp_fu_607_p3;
wire   [1:0] tmp_fu_432_p4;
wire   [0:0] icmp_ln100_fu_441_p2;
wire   [0:0] tmp_1_fu_447_p3;
wire   [0:0] or_ln100_fu_471_p2;
wire   [7:0] select_ln100_fu_463_p3;
wire   [7:0] trunc_ln_fu_454_p4;
wire   [0:0] icmp_ln102_fu_485_p2;
wire   [0:0] tmp_5_fu_490_p3;
wire   [0:0] or_ln102_fu_514_p2;
wire   [7:0] select_ln102_fu_506_p3;
wire   [7:0] trunc_ln4_fu_497_p4;
wire  signed [17:0] grp_fu_626_p3;
wire   [1:0] tmp_2_fu_529_p4;
wire   [0:0] icmp_ln101_fu_538_p2;
wire   [0:0] tmp_3_fu_544_p3;
wire   [0:0] or_ln101_fu_568_p2;
wire   [7:0] select_ln101_fu_560_p3;
wire   [7:0] trunc_ln3_fu_551_p4;
wire    ap_CS_fsm_state15;
wire   [15:0] grp_fu_592_p0;
wire   [15:0] grp_fu_592_p1;
wire   [8:0] grp_fu_598_p1;
wire   [7:0] grp_fu_598_p2;
wire   [8:0] grp_fu_607_p1;
wire  signed [8:0] grp_fu_618_p1;
wire  signed [7:0] grp_fu_626_p1;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state15_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] grp_fu_592_p00;
wire   [31:0] grp_fu_592_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
end

yuv_filter_mul_mul_16ns_16ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16ns_16ns_32_4_1_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_592_p0),
    .din1(grp_fu_592_p1),
    .ce(1'b1),
    .dout(grp_fu_592_p2)
);

yuv_filter_mac_muladd_9s_9ns_8ns_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
mac_muladd_9s_9ns_8ns_18_4_1_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(C_fu_351_p2),
    .din1(grp_fu_598_p1),
    .din2(grp_fu_598_p2),
    .ce(1'b1),
    .dout(grp_fu_598_p3)
);

yuv_filter_mac_muladd_8s_9ns_18s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
mac_muladd_8s_9ns_18s_18_4_1_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(E_fu_361_p2),
    .din1(grp_fu_607_p1),
    .din2(grp_fu_598_p3),
    .ce(1'b1),
    .dout(grp_fu_607_p3)
);

yuv_filter_mac_muladd_8s_9s_18s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
mac_muladd_8s_9s_18s_18_4_1_U39(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(E_fu_361_p2),
    .din1(grp_fu_618_p1),
    .din2(grp_fu_598_p3),
    .ce(1'b1),
    .dout(grp_fu_618_p3)
);

yuv_filter_mac_muladd_8s_8s_18s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
mac_muladd_8s_8s_18s_18_4_1_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(D_fu_375_p2),
    .din1(grp_fu_626_p1),
    .din2(grp_fu_618_p3),
    .ce(1'b1),
    .dout(grp_fu_626_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state5)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter9 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_fu_120 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln89_fu_240_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_fu_120 <= add_ln89_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        x_fu_116 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_fu_116 <= select_ln72_1_fu_292_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        y_fu_112 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln89_fu_240_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        y_fu_112 <= y_2_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        D_reg_741 <= D_fu_375_p2;
        G_reg_779 <= G_fu_574_p3;
        R_reg_769 <= R_fu_477_p3;
        add_ln102_reg_758 <= add_ln102_fu_416_p2;
        tmp_4_reg_764 <= {{add_ln102_fu_416_p2[18:16]}};
        zext_ln94_1_reg_702[21 : 0] <= zext_ln94_1_fu_343_p1[21 : 0];
        zext_ln94_1_reg_702_pp0_iter3_reg[21 : 0] <= zext_ln94_1_reg_702[21 : 0];
        zext_ln94_1_reg_702_pp0_iter4_reg[21 : 0] <= zext_ln94_1_reg_702_pp0_iter3_reg[21 : 0];
        zext_ln94_1_reg_702_pp0_iter5_reg[21 : 0] <= zext_ln94_1_reg_702_pp0_iter4_reg[21 : 0];
        zext_ln94_1_reg_702_pp0_iter6_reg[21 : 0] <= zext_ln94_1_reg_702_pp0_iter5_reg[21 : 0];
        zext_ln94_1_reg_702_pp0_iter7_reg[21 : 0] <= zext_ln94_1_reg_702_pp0_iter6_reg[21 : 0];
        zext_ln94_1_reg_702_pp0_iter8_reg[21 : 0] <= zext_ln94_1_reg_702_pp0_iter7_reg[21 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln94_1_reg_697 <= add_ln94_1_fu_332_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bound_reg_679 <= grp_fu_592_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln89_fu_240_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln92_reg_687 <= icmp_ln92_fu_254_p2;
        select_ln72_reg_692 <= select_ln72_fu_259_p3;
    end
end

assign ap_ST_fsm_state15_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln89_fu_240_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_channels_ch1_ce0 = 1'b1;
    end else begin
        in_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_channels_ch2_ce0 = 1'b1;
    end else begin
        in_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_channels_ch3_ce0 = 1'b1;
    end else begin
        in_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch1_ce0 = 1'b1;
    end else begin
        out_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch1_we0 = 1'b1;
    end else begin
        out_channels_ch1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch2_ce0 = 1'b1;
    end else begin
        out_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch2_we0 = 1'b1;
    end else begin
        out_channels_ch2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch3_ce0 = 1'b1;
    end else begin
        out_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_channels_ch3_we0 = 1'b1;
    end else begin
        out_channels_ch3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln89_fu_240_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter9 == 1'b1) & (ap_enable_reg_pp0_iter8 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter9 == 1'b1) & (ap_enable_reg_pp0_iter8 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln89_fu_240_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_fu_351_p2 = ($signed(zext_ln97_fu_347_p1) + $signed(9'd496));

assign D_fu_375_p2 = (in_channels_ch2_q0 ^ 8'd128);

assign E_fu_361_p2 = (in_channels_ch3_q0 ^ 8'd128);

assign G_fu_574_p3 = ((or_ln101_fu_568_p2[0:0] == 1'b1) ? select_ln101_fu_560_p3 : trunc_ln3_fu_551_p4);

assign R_fu_477_p3 = ((or_ln100_fu_471_p2[0:0] == 1'b1) ? select_ln100_fu_463_p3 : trunc_ln_fu_454_p4);

assign add_ln102_1_fu_407_p2 = ($signed(sext_ln102_2_fu_403_p1) + $signed(grp_fu_598_p3));

assign add_ln102_fu_416_p2 = ($signed(sext_ln102_3_fu_412_p1) + $signed(sext_ln102_1_fu_392_p1));

assign add_ln89_fu_245_p2 = (indvar_flatten_fu_120 + 32'd1);

assign add_ln94_1_fu_332_p2 = (add_ln94_fu_323_p2 + zext_ln94_fu_329_p1);

assign add_ln94_fu_323_p2 = (tmp_cast_fu_303_p3 + tmp_2_cast_fu_315_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = p_read;

assign ap_return_1 = p_read1;

assign grp_fu_592_p0 = grp_fu_592_p00;

assign grp_fu_592_p00 = p_read;

assign grp_fu_592_p1 = grp_fu_592_p10;

assign grp_fu_592_p10 = p_read1;

assign grp_fu_598_p1 = 18'd298;

assign grp_fu_598_p2 = 18'd128;

assign grp_fu_607_p1 = 18'd409;

assign grp_fu_618_p1 = 17'd130864;

assign grp_fu_626_p1 = 16'd65436;

assign icmp_ln100_fu_441_p2 = ((tmp_fu_432_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln101_fu_538_p2 = ((tmp_2_fu_529_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln102_fu_485_p2 = (($signed(tmp_4_reg_764) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign icmp_ln89_fu_240_p2 = ((indvar_flatten_fu_120 == bound_reg_679) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_254_p2 = ((y_fu_112 == p_read1) ? 1'b1 : 1'b0);

assign in_channels_ch1_address0 = zext_ln94_1_fu_343_p1;

assign in_channels_ch2_address0 = zext_ln94_1_reg_702_pp0_iter3_reg;

assign in_channels_ch3_address0 = zext_ln94_1_reg_702;

assign or_ln100_fu_471_p2 = (tmp_1_fu_447_p3 | icmp_ln100_fu_441_p2);

assign or_ln101_fu_568_p2 = (tmp_3_fu_544_p3 | icmp_ln101_fu_538_p2);

assign or_ln102_fu_514_p2 = (tmp_5_fu_490_p3 | icmp_ln102_fu_485_p2);

assign out_channels_ch1_address0 = zext_ln94_1_reg_702_pp0_iter7_reg;

assign out_channels_ch1_d0 = R_reg_769;

assign out_channels_ch2_address0 = zext_ln94_1_reg_702_pp0_iter8_reg;

assign out_channels_ch2_d0 = G_reg_779;

assign out_channels_ch3_address0 = zext_ln94_1_reg_702_pp0_iter6_reg;

assign out_channels_ch3_d0 = ((or_ln102_fu_514_p2[0:0] == 1'b1) ? select_ln102_fu_506_p3 : trunc_ln4_fu_497_p4);

assign select_ln100_fu_463_p3 = ((icmp_ln100_fu_441_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln101_fu_560_p3 = ((icmp_ln101_fu_538_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln102_fu_506_p3 = ((icmp_ln102_fu_485_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln72_1_fu_292_p3 = ((icmp_ln92_reg_687[0:0] == 1'b1) ? x_4_fu_286_p2 : x_fu_116);

assign select_ln72_fu_259_p3 = ((icmp_ln92_fu_254_p2[0:0] == 1'b1) ? 16'd0 : y_fu_112);

assign sext_ln102_1_fu_392_p1 = $signed(shl_ln_fu_385_p3);

assign sext_ln102_2_fu_403_p1 = $signed(shl_ln102_1_fu_396_p3);

assign sext_ln102_3_fu_412_p1 = $signed(add_ln102_1_fu_407_p2);

assign shl_ln102_1_fu_396_p3 = {{D_reg_741}, {2'd0}};

assign shl_ln_fu_385_p3 = {{D_reg_741}, {9'd0}};

assign tmp_1_fu_447_p3 = grp_fu_607_p3[32'd17];

assign tmp_2_cast_fu_315_p3 = {{trunc_ln94_1_fu_311_p1}, {8'd0}};

assign tmp_2_fu_529_p4 = {{grp_fu_626_p3[17:16]}};

assign tmp_3_fu_544_p3 = grp_fu_626_p3[32'd17];

assign tmp_5_fu_490_p3 = add_ln102_reg_758[32'd18];

assign tmp_cast_fu_303_p3 = {{trunc_ln94_fu_299_p1}, {10'd0}};

assign tmp_fu_432_p4 = {{grp_fu_607_p3[17:16]}};

assign trunc_ln3_fu_551_p4 = {{grp_fu_626_p3[15:8]}};

assign trunc_ln4_fu_497_p4 = {{add_ln102_reg_758[15:8]}};

assign trunc_ln94_1_fu_311_p1 = select_ln72_1_fu_292_p3[13:0];

assign trunc_ln94_fu_299_p1 = select_ln72_1_fu_292_p3[11:0];

assign trunc_ln_fu_454_p4 = {{grp_fu_607_p3[15:8]}};

assign x_4_fu_286_p2 = (x_fu_116 + 16'd1);

assign y_2_fu_267_p2 = (select_ln72_fu_259_p3 + 16'd1);

assign zext_ln94_1_fu_343_p1 = add_ln94_1_reg_697;

assign zext_ln94_fu_329_p1 = select_ln72_reg_692;

assign zext_ln97_fu_347_p1 = in_channels_ch1_q0;

always @ (posedge ap_clk) begin
    zext_ln94_1_reg_702[63:22] <= 42'b000000000000000000000000000000000000000000;
    zext_ln94_1_reg_702_pp0_iter3_reg[63:22] <= 42'b000000000000000000000000000000000000000000;
    zext_ln94_1_reg_702_pp0_iter4_reg[63:22] <= 42'b000000000000000000000000000000000000000000;
    zext_ln94_1_reg_702_pp0_iter5_reg[63:22] <= 42'b000000000000000000000000000000000000000000;
    zext_ln94_1_reg_702_pp0_iter6_reg[63:22] <= 42'b000000000000000000000000000000000000000000;
    zext_ln94_1_reg_702_pp0_iter7_reg[63:22] <= 42'b000000000000000000000000000000000000000000;
    zext_ln94_1_reg_702_pp0_iter8_reg[63:22] <= 42'b000000000000000000000000000000000000000000;
end

endmodule //yuv_filter_yuv2rgb_1

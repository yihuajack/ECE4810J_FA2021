// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
// Version: 2021.1.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module yuv_filter_yuv2rgb_1_Pipeline_YUV2RGB_LOOP_X_YUV2RGB_LOOP_Y (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_channels_ch1_dout,
        in_channels_ch1_empty_n,
        in_channels_ch1_read,
        in_channels_ch2_dout,
        in_channels_ch2_empty_n,
        in_channels_ch2_read,
        in_channels_ch3_dout,
        in_channels_ch3_empty_n,
        in_channels_ch3_read,
        bound,
        height,
        out_channels_ch1_address0,
        out_channels_ch1_ce0,
        out_channels_ch1_we0,
        out_channels_ch1_d0,
        out_channels_ch2_address0,
        out_channels_ch2_ce0,
        out_channels_ch2_we0,
        out_channels_ch2_d0,
        out_channels_ch3_address0,
        out_channels_ch3_ce0,
        out_channels_ch3_we0,
        out_channels_ch3_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] in_channels_ch1_dout;
input   in_channels_ch1_empty_n;
output   in_channels_ch1_read;
input  [7:0] in_channels_ch2_dout;
input   in_channels_ch2_empty_n;
output   in_channels_ch2_read;
input  [7:0] in_channels_ch3_dout;
input   in_channels_ch3_empty_n;
output   in_channels_ch3_read;
input  [31:0] bound;
input  [15:0] height;
output  [21:0] out_channels_ch1_address0;
output   out_channels_ch1_ce0;
output   out_channels_ch1_we0;
output  [7:0] out_channels_ch1_d0;
output  [21:0] out_channels_ch2_address0;
output   out_channels_ch2_ce0;
output   out_channels_ch2_we0;
output  [7:0] out_channels_ch2_d0;
output  [21:0] out_channels_ch3_address0;
output   out_channels_ch3_ce0;
output   out_channels_ch3_we0;
output  [7:0] out_channels_ch3_d0;

reg ap_idle;
reg in_channels_ch1_read;
reg in_channels_ch2_read;
reg in_channels_ch3_read;
reg out_channels_ch1_ce0;
reg out_channels_ch1_we0;
reg out_channels_ch2_ce0;
reg out_channels_ch2_we0;
reg out_channels_ch3_ce0;
reg out_channels_ch3_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln89_fu_219_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    in_channels_ch1_blk_n;
wire    ap_block_pp0_stage0;
reg    in_channels_ch2_blk_n;
reg    in_channels_ch3_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [7:0] V_reg_658;
wire  signed [7:0] D_fu_246_p2;
reg  signed [7:0] D_reg_663;
reg  signed [7:0] D_reg_663_pp0_iter2_reg;
reg  signed [7:0] D_reg_663_pp0_iter3_reg;
wire  signed [7:0] E_fu_260_p2;
reg  signed [7:0] E_reg_679;
wire   [0:0] icmp_ln92_fu_272_p2;
reg   [0:0] icmp_ln92_reg_689;
wire   [15:0] select_ln72_fu_277_p3;
reg   [15:0] select_ln72_reg_694;
wire  signed [16:0] mul_ln101_1_fu_288_p2;
wire   [21:0] add_ln103_1_fu_354_p2;
reg   [21:0] add_ln103_1_reg_704;
wire  signed [17:0] grp_fu_597_p3;
wire   [7:0] G_fu_422_p3;
reg   [7:0] G_reg_714;
wire   [7:0] B_fu_526_p3;
reg   [7:0] B_reg_719;
wire   [63:0] zext_ln103_1_fu_539_p1;
reg   [63:0] zext_ln103_1_reg_724;
wire   [7:0] R_fu_589_p3;
reg   [7:0] R_reg_729;
reg   [15:0] y_fu_120;
wire   [15:0] y_1_fu_294_p2;
wire    ap_loop_init;
reg   [15:0] x_fu_124;
wire   [15:0] select_ln72_1_fu_314_p3;
reg   [31:0] indvar_flatten_fu_128;
reg   [31:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [31:0] add_ln89_fu_225_p2;
wire   [8:0] zext_ln97_fu_236_p1;
wire  signed [8:0] C_fu_240_p2;
wire  signed [8:0] mul_ln101_1_fu_288_p1;
wire   [15:0] x_2_fu_308_p2;
wire   [11:0] trunc_ln103_fu_321_p1;
wire   [13:0] trunc_ln103_1_fu_333_p1;
wire   [21:0] tmp_cast_fu_325_p3;
wire   [21:0] tmp_1_cast_fu_337_p3;
wire   [21:0] add_ln103_fu_345_p2;
wire   [21:0] zext_ln103_fu_351_p1;
wire  signed [16:0] grp_fu_608_p3;
wire  signed [17:0] sext_ln101_3_fu_366_p1;
(* use_dsp48 = "no" *) wire   [17:0] add_ln101_1_fu_369_p2;
wire   [1:0] tmp_2_fu_374_p4;
wire   [0:0] icmp_ln101_fu_384_p2;
wire   [0:0] tmp_3_fu_390_p3;
wire   [0:0] or_ln101_fu_416_p2;
wire   [7:0] select_ln101_fu_408_p3;
wire   [7:0] trunc_ln3_fu_398_p4;
wire   [16:0] shl_ln_fu_430_p3;
wire   [9:0] shl_ln102_1_fu_441_p3;
wire  signed [17:0] sext_ln102_1_fu_437_p1;
wire  signed [17:0] sext_ln102_2_fu_448_p1;
wire  signed [17:0] add_ln102_1_fu_452_p2;
wire   [15:0] trunc_ln102_fu_458_p1;
wire   [15:0] trunc_ln100_fu_360_p1;
wire  signed [18:0] sext_ln102_3_fu_462_p1;
wire  signed [18:0] sext_ln100_4_fu_363_p1;
wire   [18:0] add_ln102_fu_472_p2;
wire   [2:0] tmp_4_fu_478_p4;
wire   [15:0] add_ln102_2_fu_466_p2;
wire   [0:0] icmp_ln102_fu_488_p2;
wire   [0:0] tmp_5_fu_494_p3;
wire   [0:0] or_ln102_fu_520_p2;
wire   [7:0] select_ln102_fu_512_p3;
wire   [7:0] trunc_ln4_fu_502_p4;
wire  signed [17:0] grp_fu_617_p3;
wire   [1:0] tmp_fu_544_p4;
wire   [0:0] icmp_ln100_fu_553_p2;
wire   [0:0] tmp_1_fu_559_p3;
wire   [0:0] or_ln100_fu_583_p2;
wire   [7:0] select_ln100_fu_575_p3;
wire   [7:0] trunc_ln_fu_566_p4;
wire   [8:0] grp_fu_597_p1;
wire   [7:0] grp_fu_597_p2;
wire  signed [7:0] grp_fu_608_p1;
wire   [8:0] grp_fu_617_p1;
reg    grp_fu_597_ce;
reg    grp_fu_608_ce;
reg    grp_fu_617_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_done_reg = 1'b0;
end

yuv_filter_mul_8s_9s_17_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 17 ))
mul_8s_9s_17_1_1_U65(
    .din0(E_reg_679),
    .din1(mul_ln101_1_fu_288_p1),
    .dout(mul_ln101_1_fu_288_p2)
);

yuv_filter_mac_muladd_9s_9ns_8ns_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
mac_muladd_9s_9ns_8ns_18_4_1_U66(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(C_fu_240_p2),
    .din1(grp_fu_597_p1),
    .din2(grp_fu_597_p2),
    .ce(grp_fu_597_ce),
    .dout(grp_fu_597_p3)
);

yuv_filter_mac_muladd_8s_8s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_17s_17_4_1_U67(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(D_fu_246_p2),
    .din1(grp_fu_608_p1),
    .din2(mul_ln101_1_fu_288_p2),
    .ce(grp_fu_608_ce),
    .dout(grp_fu_608_p3)
);

yuv_filter_mac_muladd_8s_9ns_18s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
mac_muladd_8s_9ns_18s_18_4_1_U68(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(E_fu_260_p2),
    .din1(grp_fu_617_p1),
    .din2(grp_fu_597_p3),
    .ce(grp_fu_617_ce),
    .dout(grp_fu_617_p3)
);

yuv_filter_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln89_fu_219_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_128 <= add_ln89_fu_225_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_128 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            x_fu_124 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            x_fu_124 <= select_ln72_1_fu_314_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            y_fu_120 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            y_fu_120 <= y_1_fu_294_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        B_reg_719 <= B_fu_526_p3;
        D_reg_663_pp0_iter2_reg <= D_reg_663;
        D_reg_663_pp0_iter3_reg <= D_reg_663_pp0_iter2_reg;
        E_reg_679 <= E_fu_260_p2;
        G_reg_714 <= G_fu_422_p3;
        R_reg_729 <= R_fu_589_p3;
        add_ln103_1_reg_704 <= add_ln103_1_fu_354_p2;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        icmp_ln92_reg_689 <= icmp_ln92_fu_272_p2;
        select_ln72_reg_694 <= select_ln72_fu_277_p3;
        zext_ln103_1_reg_724[21 : 0] <= zext_ln103_1_fu_539_p1[21 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        D_reg_663 <= D_fu_246_p2;
        V_reg_658 <= in_channels_ch3_dout;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (*) begin
    if (((icmp_ln89_fu_219_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 32'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_128;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_597_ce = 1'b1;
    end else begin
        grp_fu_597_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_608_ce = 1'b1;
    end else begin
        grp_fu_608_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_617_ce = 1'b1;
    end else begin
        grp_fu_617_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_channels_ch1_blk_n = in_channels_ch1_empty_n;
    end else begin
        in_channels_ch1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_channels_ch1_read = 1'b1;
    end else begin
        in_channels_ch1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_channels_ch2_blk_n = in_channels_ch2_empty_n;
    end else begin
        in_channels_ch2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_channels_ch2_read = 1'b1;
    end else begin
        in_channels_ch2_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_channels_ch3_blk_n = in_channels_ch3_empty_n;
    end else begin
        in_channels_ch3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_channels_ch3_read = 1'b1;
    end else begin
        in_channels_ch3_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        out_channels_ch1_ce0 = 1'b1;
    end else begin
        out_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        out_channels_ch1_we0 = 1'b1;
    end else begin
        out_channels_ch1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        out_channels_ch2_ce0 = 1'b1;
    end else begin
        out_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        out_channels_ch2_we0 = 1'b1;
    end else begin
        out_channels_ch2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        out_channels_ch3_ce0 = 1'b1;
    end else begin
        out_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        out_channels_ch3_we0 = 1'b1;
    end else begin
        out_channels_ch3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_fu_526_p3 = ((or_ln102_fu_520_p2[0:0] == 1'b1) ? select_ln102_fu_512_p3 : trunc_ln4_fu_502_p4);

assign C_fu_240_p2 = ($signed(zext_ln97_fu_236_p1) + $signed(9'd496));

assign D_fu_246_p2 = (in_channels_ch2_dout ^ 8'd128);

assign E_fu_260_p2 = (8'd128 ^ V_reg_658);

assign G_fu_422_p3 = ((or_ln101_fu_416_p2[0:0] == 1'b1) ? select_ln101_fu_408_p3 : trunc_ln3_fu_398_p4);

assign R_fu_589_p3 = ((or_ln100_fu_583_p2[0:0] == 1'b1) ? select_ln100_fu_575_p3 : trunc_ln_fu_566_p4);

assign add_ln101_1_fu_369_p2 = ($signed(sext_ln101_3_fu_366_p1) + $signed(grp_fu_597_p3));

assign add_ln102_1_fu_452_p2 = ($signed(sext_ln102_1_fu_437_p1) + $signed(sext_ln102_2_fu_448_p1));

assign add_ln102_2_fu_466_p2 = (trunc_ln102_fu_458_p1 + trunc_ln100_fu_360_p1);

assign add_ln102_fu_472_p2 = ($signed(sext_ln102_3_fu_462_p1) + $signed(sext_ln100_4_fu_363_p1));

assign add_ln103_1_fu_354_p2 = (add_ln103_fu_345_p2 + zext_ln103_fu_351_p1);

assign add_ln103_fu_345_p2 = (tmp_cast_fu_325_p3 + tmp_1_cast_fu_337_p3);

assign add_ln89_fu_225_p2 = (ap_sig_allocacmp_indvar_flatten_load + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((in_channels_ch3_empty_n == 1'b0) | (in_channels_ch2_empty_n == 1'b0) | (in_channels_ch1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((in_channels_ch3_empty_n == 1'b0) | (in_channels_ch2_empty_n == 1'b0) | (in_channels_ch1_empty_n == 1'b0)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((in_channels_ch3_empty_n == 1'b0) | (in_channels_ch2_empty_n == 1'b0) | (in_channels_ch1_empty_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_597_p1 = 18'd298;

assign grp_fu_597_p2 = 18'd128;

assign grp_fu_608_p1 = 16'd65436;

assign grp_fu_617_p1 = 18'd409;

assign icmp_ln100_fu_553_p2 = ((tmp_fu_544_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln101_fu_384_p2 = ((tmp_2_fu_374_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln102_fu_488_p2 = (($signed(tmp_4_fu_478_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign icmp_ln89_fu_219_p2 = ((ap_sig_allocacmp_indvar_flatten_load == bound) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_272_p2 = ((y_fu_120 == height) ? 1'b1 : 1'b0);

assign mul_ln101_1_fu_288_p1 = 17'd130864;

assign or_ln100_fu_583_p2 = (tmp_1_fu_559_p3 | icmp_ln100_fu_553_p2);

assign or_ln101_fu_416_p2 = (tmp_3_fu_390_p3 | icmp_ln101_fu_384_p2);

assign or_ln102_fu_520_p2 = (tmp_5_fu_494_p3 | icmp_ln102_fu_488_p2);

assign out_channels_ch1_address0 = zext_ln103_1_reg_724;

assign out_channels_ch1_d0 = R_reg_729;

assign out_channels_ch2_address0 = zext_ln103_1_fu_539_p1;

assign out_channels_ch2_d0 = G_reg_714;

assign out_channels_ch3_address0 = zext_ln103_1_fu_539_p1;

assign out_channels_ch3_d0 = B_reg_719;

assign select_ln100_fu_575_p3 = ((icmp_ln100_fu_553_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln101_fu_408_p3 = ((icmp_ln101_fu_384_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln102_fu_512_p3 = ((icmp_ln102_fu_488_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln72_1_fu_314_p3 = ((icmp_ln92_reg_689[0:0] == 1'b1) ? x_2_fu_308_p2 : x_fu_124);

assign select_ln72_fu_277_p3 = ((icmp_ln92_fu_272_p2[0:0] == 1'b1) ? 16'd0 : y_fu_120);

assign sext_ln100_4_fu_363_p1 = grp_fu_597_p3;

assign sext_ln101_3_fu_366_p1 = grp_fu_608_p3;

assign sext_ln102_1_fu_437_p1 = $signed(shl_ln_fu_430_p3);

assign sext_ln102_2_fu_448_p1 = $signed(shl_ln102_1_fu_441_p3);

assign sext_ln102_3_fu_462_p1 = add_ln102_1_fu_452_p2;

assign shl_ln102_1_fu_441_p3 = {{D_reg_663_pp0_iter3_reg}, {2'd0}};

assign shl_ln_fu_430_p3 = {{D_reg_663_pp0_iter3_reg}, {9'd0}};

assign tmp_1_cast_fu_337_p3 = {{trunc_ln103_1_fu_333_p1}, {8'd0}};

assign tmp_1_fu_559_p3 = grp_fu_617_p3[32'd17];

assign tmp_2_fu_374_p4 = {{add_ln101_1_fu_369_p2[17:16]}};

assign tmp_3_fu_390_p3 = add_ln101_1_fu_369_p2[32'd17];

assign tmp_4_fu_478_p4 = {{add_ln102_fu_472_p2[18:16]}};

assign tmp_5_fu_494_p3 = add_ln102_fu_472_p2[32'd18];

assign tmp_cast_fu_325_p3 = {{trunc_ln103_fu_321_p1}, {10'd0}};

assign tmp_fu_544_p4 = {{grp_fu_617_p3[17:16]}};

assign trunc_ln100_fu_360_p1 = grp_fu_597_p3[15:0];

assign trunc_ln102_fu_458_p1 = add_ln102_1_fu_452_p2[15:0];

assign trunc_ln103_1_fu_333_p1 = select_ln72_1_fu_314_p3[13:0];

assign trunc_ln103_fu_321_p1 = select_ln72_1_fu_314_p3[11:0];

assign trunc_ln3_fu_398_p4 = {{add_ln101_1_fu_369_p2[15:8]}};

assign trunc_ln4_fu_502_p4 = {{add_ln102_2_fu_466_p2[15:8]}};

assign trunc_ln_fu_566_p4 = {{grp_fu_617_p3[15:8]}};

assign x_2_fu_308_p2 = (x_fu_124 + 16'd1);

assign y_1_fu_294_p2 = (select_ln72_fu_277_p3 + 16'd1);

assign zext_ln103_1_fu_539_p1 = add_ln103_1_reg_704;

assign zext_ln103_fu_351_p1 = select_ln72_reg_694;

assign zext_ln97_fu_236_p1 = in_channels_ch1_dout;

always @ (posedge ap_clk) begin
    zext_ln103_1_reg_724[63:22] <= 42'b000000000000000000000000000000000000000000;
end

endmodule //yuv_filter_yuv2rgb_1_Pipeline_YUV2RGB_LOOP_X_YUV2RGB_LOOP_Y

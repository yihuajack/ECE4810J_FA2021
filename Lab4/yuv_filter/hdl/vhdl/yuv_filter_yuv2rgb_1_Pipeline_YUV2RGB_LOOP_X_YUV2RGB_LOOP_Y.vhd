-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
-- Version: 2021.1.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv_filter_yuv2rgb_1_Pipeline_YUV2RGB_LOOP_X_YUV2RGB_LOOP_Y is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_channels_ch1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch1_empty_n : IN STD_LOGIC;
    in_channels_ch1_read : OUT STD_LOGIC;
    in_channels_ch2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_empty_n : IN STD_LOGIC;
    in_channels_ch2_read : OUT STD_LOGIC;
    in_channels_ch3_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_empty_n : IN STD_LOGIC;
    in_channels_ch3_read : OUT STD_LOGIC;
    bound : IN STD_LOGIC_VECTOR (31 downto 0);
    height : IN STD_LOGIC_VECTOR (15 downto 0);
    out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch1_ce0 : OUT STD_LOGIC;
    out_channels_ch1_we0 : OUT STD_LOGIC;
    out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch2_ce0 : OUT STD_LOGIC;
    out_channels_ch2_we0 : OUT STD_LOGIC;
    out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch3_ce0 : OUT STD_LOGIC;
    out_channels_ch3_we0 : OUT STD_LOGIC;
    out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of yuv_filter_yuv2rgb_1_Pipeline_YUV2RGB_LOOP_X_YUV2RGB_LOOP_Y is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv9_1F0 : STD_LOGIC_VECTOR (8 downto 0) := "111110000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv17_1FF30 : STD_LOGIC_VECTOR (16 downto 0) := "11111111100110000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv18_12A : STD_LOGIC_VECTOR (17 downto 0) := "000000000100101010";
    constant ap_const_lv18_80 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_const_lv16_FF9C : STD_LOGIC_VECTOR (15 downto 0) := "1111111110011100";
    constant ap_const_lv18_199 : STD_LOGIC_VECTOR (17 downto 0) := "000000000110011001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln89_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal in_channels_ch1_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal in_channels_ch2_blk_n : STD_LOGIC;
    signal in_channels_ch3_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal V_reg_658 : STD_LOGIC_VECTOR (7 downto 0);
    signal D_fu_246_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal D_reg_663 : STD_LOGIC_VECTOR (7 downto 0);
    signal D_reg_663_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal D_reg_663_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal E_fu_260_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal E_reg_679 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln92_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_689 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln72_fu_277_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln72_reg_694 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln101_1_fu_288_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln103_1_fu_354_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln103_1_reg_704 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_597_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal G_fu_422_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal G_reg_714 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_fu_526_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_reg_719 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln103_1_fu_539_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln103_1_reg_724 : STD_LOGIC_VECTOR (63 downto 0);
    signal R_fu_589_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal R_reg_729 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_fu_120 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_1_fu_294_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal x_fu_124 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln72_1_fu_314_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten_fu_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln89_fu_225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln97_fu_236_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal C_fu_240_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln101_1_fu_288_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_2_fu_308_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln103_fu_321_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln103_1_fu_333_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_cast_fu_325_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_1_cast_fu_337_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln103_fu_345_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln103_fu_351_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_608_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln101_3_fu_366_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln101_1_fu_369_p2 : STD_LOGIC_VECTOR (17 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln101_1_fu_369_p2 : signal is "no";
    signal tmp_2_fu_374_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln101_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_390_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln101_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln101_fu_408_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln3_fu_398_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_430_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln102_1_fu_441_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln102_1_fu_437_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln102_2_fu_448_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln102_1_fu_452_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln102_fu_458_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln100_fu_360_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln102_3_fu_462_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln100_4_fu_363_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln102_fu_472_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_4_fu_478_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln102_2_fu_466_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln102_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_494_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln102_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln102_fu_512_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln4_fu_502_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_617_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_fu_544_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln100_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_559_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln100_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln100_fu_575_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln_fu_566_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_597_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_597_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_608_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_617_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_597_ce : STD_LOGIC;
    signal grp_fu_608_ce : STD_LOGIC;
    signal grp_fu_617_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component yuv_filter_mul_8s_9s_17_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component yuv_filter_mac_muladd_9s_9ns_8ns_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component yuv_filter_mac_muladd_8s_8s_17s_17_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component yuv_filter_mac_muladd_8s_9ns_18s_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component yuv_filter_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_8s_9s_17_1_1_U65 : component yuv_filter_mul_8s_9s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 9,
        dout_WIDTH => 17)
    port map (
        din0 => E_reg_679,
        din1 => mul_ln101_1_fu_288_p1,
        dout => mul_ln101_1_fu_288_p2);

    mac_muladd_9s_9ns_8ns_18_4_1_U66 : component yuv_filter_mac_muladd_9s_9ns_8ns_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => C_fu_240_p2,
        din1 => grp_fu_597_p1,
        din2 => grp_fu_597_p2,
        ce => grp_fu_597_ce,
        dout => grp_fu_597_p3);

    mac_muladd_8s_8s_17s_17_4_1_U67 : component yuv_filter_mac_muladd_8s_8s_17s_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 17,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => D_fu_246_p2,
        din1 => grp_fu_608_p1,
        din2 => mul_ln101_1_fu_288_p2,
        ce => grp_fu_608_ce,
        dout => grp_fu_608_p3);

    mac_muladd_8s_9ns_18s_18_4_1_U68 : component yuv_filter_mac_muladd_8s_9ns_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => E_fu_260_p2,
        din1 => grp_fu_617_p1,
        din2 => grp_fu_597_p3,
        ce => grp_fu_617_ce,
        dout => grp_fu_617_p3);

    flow_control_loop_pipe_sequential_init_U : component yuv_filter_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln89_fu_219_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_128 <= add_ln89_fu_225_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_128 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    x_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    x_fu_124 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    x_fu_124 <= select_ln72_1_fu_314_p3;
                end if;
            end if; 
        end if;
    end process;

    y_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    y_fu_120 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    y_fu_120 <= y_1_fu_294_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                B_reg_719 <= B_fu_526_p3;
                D_reg_663_pp0_iter2_reg <= D_reg_663;
                D_reg_663_pp0_iter3_reg <= D_reg_663_pp0_iter2_reg;
                E_reg_679 <= E_fu_260_p2;
                G_reg_714 <= G_fu_422_p3;
                R_reg_729 <= R_fu_589_p3;
                add_ln103_1_reg_704 <= add_ln103_1_fu_354_p2;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                icmp_ln92_reg_689 <= icmp_ln92_fu_272_p2;
                select_ln72_reg_694 <= select_ln72_fu_277_p3;
                    zext_ln103_1_reg_724(21 downto 0) <= zext_ln103_1_fu_539_p1(21 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                D_reg_663 <= D_fu_246_p2;
                V_reg_658 <= in_channels_ch3_dout;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if;
        end if;
    end process;
    zext_ln103_1_reg_724(63 downto 22) <= "000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    B_fu_526_p3 <= 
        select_ln102_fu_512_p3 when (or_ln102_fu_520_p2(0) = '1') else 
        trunc_ln4_fu_502_p4;
    C_fu_240_p2 <= std_logic_vector(unsigned(zext_ln97_fu_236_p1) + unsigned(ap_const_lv9_1F0));
    D_fu_246_p2 <= (in_channels_ch2_dout xor ap_const_lv8_80);
    E_fu_260_p2 <= (ap_const_lv8_80 xor V_reg_658);
    G_fu_422_p3 <= 
        select_ln101_fu_408_p3 when (or_ln101_fu_416_p2(0) = '1') else 
        trunc_ln3_fu_398_p4;
    R_fu_589_p3 <= 
        select_ln100_fu_575_p3 when (or_ln100_fu_583_p2(0) = '1') else 
        trunc_ln_fu_566_p4;
    add_ln101_1_fu_369_p2 <= std_logic_vector(signed(sext_ln101_3_fu_366_p1) + signed(grp_fu_597_p3));
    add_ln102_1_fu_452_p2 <= std_logic_vector(signed(sext_ln102_1_fu_437_p1) + signed(sext_ln102_2_fu_448_p1));
    add_ln102_2_fu_466_p2 <= std_logic_vector(unsigned(trunc_ln102_fu_458_p1) + unsigned(trunc_ln100_fu_360_p1));
    add_ln102_fu_472_p2 <= std_logic_vector(signed(sext_ln102_3_fu_462_p1) + signed(sext_ln100_4_fu_363_p1));
    add_ln103_1_fu_354_p2 <= std_logic_vector(unsigned(add_ln103_fu_345_p2) + unsigned(zext_ln103_fu_351_p1));
    add_ln103_fu_345_p2 <= std_logic_vector(unsigned(tmp_cast_fu_325_p3) + unsigned(tmp_1_cast_fu_337_p3));
    add_ln89_fu_225_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, in_channels_ch1_empty_n, in_channels_ch2_empty_n, in_channels_ch3_empty_n)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((in_channels_ch3_empty_n = ap_const_logic_0) or (in_channels_ch2_empty_n = ap_const_logic_0) or (in_channels_ch1_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, in_channels_ch1_empty_n, in_channels_ch2_empty_n, in_channels_ch3_empty_n)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((in_channels_ch3_empty_n = ap_const_logic_0) or (in_channels_ch2_empty_n = ap_const_logic_0) or (in_channels_ch1_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(in_channels_ch1_empty_n, in_channels_ch2_empty_n, in_channels_ch3_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((in_channels_ch3_empty_n = ap_const_logic_0) or (in_channels_ch2_empty_n = ap_const_logic_0) or (in_channels_ch1_empty_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln89_fu_219_p2)
    begin
        if (((icmp_ln89_fu_219_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_128)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv32_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_128;
        end if; 
    end process;


    grp_fu_597_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_597_ce <= ap_const_logic_1;
        else 
            grp_fu_597_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_597_p1 <= ap_const_lv18_12A(9 - 1 downto 0);
    grp_fu_597_p2 <= ap_const_lv18_80(8 - 1 downto 0);

    grp_fu_608_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_608_ce <= ap_const_logic_1;
        else 
            grp_fu_608_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_608_p1 <= ap_const_lv16_FF9C(8 - 1 downto 0);

    grp_fu_617_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_617_ce <= ap_const_logic_1;
        else 
            grp_fu_617_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_617_p1 <= ap_const_lv18_199(9 - 1 downto 0);
    icmp_ln100_fu_553_p2 <= "1" when (tmp_fu_544_p4 = ap_const_lv2_1) else "0";
    icmp_ln101_fu_384_p2 <= "1" when (tmp_2_fu_374_p4 = ap_const_lv2_1) else "0";
    icmp_ln102_fu_488_p2 <= "1" when (signed(tmp_4_fu_478_p4) > signed(ap_const_lv3_0)) else "0";
    icmp_ln89_fu_219_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = bound) else "0";
    icmp_ln92_fu_272_p2 <= "1" when (y_fu_120 = height) else "0";

    in_channels_ch1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, in_channels_ch1_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_channels_ch1_blk_n <= in_channels_ch1_empty_n;
        else 
            in_channels_ch1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_channels_ch1_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_channels_ch1_read <= ap_const_logic_1;
        else 
            in_channels_ch1_read <= ap_const_logic_0;
        end if; 
    end process;


    in_channels_ch2_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, in_channels_ch2_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_channels_ch2_blk_n <= in_channels_ch2_empty_n;
        else 
            in_channels_ch2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_channels_ch2_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_channels_ch2_read <= ap_const_logic_1;
        else 
            in_channels_ch2_read <= ap_const_logic_0;
        end if; 
    end process;


    in_channels_ch3_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, in_channels_ch3_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_channels_ch3_blk_n <= in_channels_ch3_empty_n;
        else 
            in_channels_ch3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_channels_ch3_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_channels_ch3_read <= ap_const_logic_1;
        else 
            in_channels_ch3_read <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln101_1_fu_288_p1 <= ap_const_lv17_1FF30(9 - 1 downto 0);
    or_ln100_fu_583_p2 <= (tmp_1_fu_559_p3 or icmp_ln100_fu_553_p2);
    or_ln101_fu_416_p2 <= (tmp_3_fu_390_p3 or icmp_ln101_fu_384_p2);
    or_ln102_fu_520_p2 <= (tmp_5_fu_494_p3 or icmp_ln102_fu_488_p2);
    out_channels_ch1_address0 <= zext_ln103_1_reg_724(22 - 1 downto 0);

    out_channels_ch1_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            out_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_d0 <= R_reg_729;

    out_channels_ch1_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            out_channels_ch1_we0 <= ap_const_logic_1;
        else 
            out_channels_ch1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_address0 <= zext_ln103_1_fu_539_p1(22 - 1 downto 0);

    out_channels_ch2_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            out_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_d0 <= G_reg_714;

    out_channels_ch2_we0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            out_channels_ch2_we0 <= ap_const_logic_1;
        else 
            out_channels_ch2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_address0 <= zext_ln103_1_fu_539_p1(22 - 1 downto 0);

    out_channels_ch3_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            out_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_d0 <= B_reg_719;

    out_channels_ch3_we0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            out_channels_ch3_we0 <= ap_const_logic_1;
        else 
            out_channels_ch3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln100_fu_575_p3 <= 
        ap_const_lv8_FF when (icmp_ln100_fu_553_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln101_fu_408_p3 <= 
        ap_const_lv8_FF when (icmp_ln101_fu_384_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln102_fu_512_p3 <= 
        ap_const_lv8_FF when (icmp_ln102_fu_488_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln72_1_fu_314_p3 <= 
        x_2_fu_308_p2 when (icmp_ln92_reg_689(0) = '1') else 
        x_fu_124;
    select_ln72_fu_277_p3 <= 
        ap_const_lv16_0 when (icmp_ln92_fu_272_p2(0) = '1') else 
        y_fu_120;
        sext_ln100_4_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_597_p3),19));

        sext_ln101_3_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_608_p3),18));

        sext_ln102_1_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_430_p3),18));

        sext_ln102_2_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln102_1_fu_441_p3),18));

        sext_ln102_3_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln102_1_fu_452_p2),19));

    shl_ln102_1_fu_441_p3 <= (D_reg_663_pp0_iter3_reg & ap_const_lv2_0);
    shl_ln_fu_430_p3 <= (D_reg_663_pp0_iter3_reg & ap_const_lv9_0);
    tmp_1_cast_fu_337_p3 <= (trunc_ln103_1_fu_333_p1 & ap_const_lv8_0);
    tmp_1_fu_559_p3 <= grp_fu_617_p3(17 downto 17);
    tmp_2_fu_374_p4 <= add_ln101_1_fu_369_p2(17 downto 16);
    tmp_3_fu_390_p3 <= add_ln101_1_fu_369_p2(17 downto 17);
    tmp_4_fu_478_p4 <= add_ln102_fu_472_p2(18 downto 16);
    tmp_5_fu_494_p3 <= add_ln102_fu_472_p2(18 downto 18);
    tmp_cast_fu_325_p3 <= (trunc_ln103_fu_321_p1 & ap_const_lv10_0);
    tmp_fu_544_p4 <= grp_fu_617_p3(17 downto 16);
    trunc_ln100_fu_360_p1 <= grp_fu_597_p3(16 - 1 downto 0);
    trunc_ln102_fu_458_p1 <= add_ln102_1_fu_452_p2(16 - 1 downto 0);
    trunc_ln103_1_fu_333_p1 <= select_ln72_1_fu_314_p3(14 - 1 downto 0);
    trunc_ln103_fu_321_p1 <= select_ln72_1_fu_314_p3(12 - 1 downto 0);
    trunc_ln3_fu_398_p4 <= add_ln101_1_fu_369_p2(15 downto 8);
    trunc_ln4_fu_502_p4 <= add_ln102_2_fu_466_p2(15 downto 8);
    trunc_ln_fu_566_p4 <= grp_fu_617_p3(15 downto 8);
    x_2_fu_308_p2 <= std_logic_vector(unsigned(x_fu_124) + unsigned(ap_const_lv16_1));
    y_1_fu_294_p2 <= std_logic_vector(unsigned(select_ln72_fu_277_p3) + unsigned(ap_const_lv16_1));
    zext_ln103_1_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln103_1_reg_704),64));
    zext_ln103_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln72_reg_694),22));
    zext_ln97_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_channels_ch1_dout),9));
end behav;

-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
-- Version: 2021.1.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv_filter_yuv_scale_Pipeline_YUV_SCALE_LOOP_X_YUV_SCALE_LOOP_Y is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_channels_ch1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch1_empty_n : IN STD_LOGIC;
    in_channels_ch1_read : OUT STD_LOGIC;
    in_channels_ch2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_empty_n : IN STD_LOGIC;
    in_channels_ch2_read : OUT STD_LOGIC;
    in_channels_ch3_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_empty_n : IN STD_LOGIC;
    in_channels_ch3_read : OUT STD_LOGIC;
    out_channels_ch1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch1_full_n : IN STD_LOGIC;
    out_channels_ch1_write : OUT STD_LOGIC;
    out_channels_ch2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_full_n : IN STD_LOGIC;
    out_channels_ch2_write : OUT STD_LOGIC;
    out_channels_ch3_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_full_n : IN STD_LOGIC;
    out_channels_ch3_write : OUT STD_LOGIC;
    bound : IN STD_LOGIC_VECTOR (31 downto 0);
    zext_ln137 : IN STD_LOGIC_VECTOR (7 downto 0);
    zext_ln138 : IN STD_LOGIC_VECTOR (7 downto 0);
    zext_ln139 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of yuv_filter_yuv_scale_Pipeline_YUV_SCALE_LOOP_X_YUV_SCALE_LOOP_Y is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln129_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal in_channels_ch1_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal in_channels_ch2_blk_n : STD_LOGIC;
    signal in_channels_ch3_blk_n : STD_LOGIC;
    signal out_channels_ch1_blk_n : STD_LOGIC;
    signal out_channels_ch2_blk_n : STD_LOGIC;
    signal out_channels_ch3_blk_n : STD_LOGIC;
    signal zext_ln139_cast_fu_135_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln139_cast_reg_233 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln138_cast_fu_139_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln138_cast_reg_238 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln137_cast_fu_143_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln137_cast_reg_243 : STD_LOGIC_VECTOR (14 downto 0);
    signal Y_reg_252 : STD_LOGIC_VECTOR (7 downto 0);
    signal U_reg_257 : STD_LOGIC_VECTOR (7 downto 0);
    signal V_reg_262 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln_reg_267 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1_reg_272 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln2_reg_277 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_fu_68 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln129_fu_161_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln137_fu_175_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln137_fu_175_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln138_fu_183_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln138_fu_183_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln139_fu_191_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln139_fu_191_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln137_fu_175_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln138_fu_183_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln139_fu_191_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln137_fu_175_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln138_fu_183_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln139_fu_191_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component yuv_filter_mul_8ns_8ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component yuv_filter_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_8ns_8ns_15_1_1_U37 : component yuv_filter_mul_8ns_8ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln137_fu_175_p0,
        din1 => mul_ln137_fu_175_p1,
        dout => mul_ln137_fu_175_p2);

    mul_8ns_8ns_15_1_1_U38 : component yuv_filter_mul_8ns_8ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln138_fu_183_p0,
        din1 => mul_ln138_fu_183_p1,
        dout => mul_ln138_fu_183_p2);

    mul_8ns_8ns_15_1_1_U39 : component yuv_filter_mul_8ns_8ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln139_fu_191_p0,
        din1 => mul_ln139_fu_191_p1,
        dout => mul_ln139_fu_191_p2);

    flow_control_loop_pipe_sequential_init_U : component yuv_filter_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln129_fu_155_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_68 <= add_ln129_fu_161_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_68 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                U_reg_257 <= in_channels_ch2_dout;
                V_reg_262 <= in_channels_ch3_dout;
                Y_reg_252 <= in_channels_ch1_dout;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                    zext_ln137_cast_reg_243(7 downto 0) <= zext_ln137_cast_fu_143_p1(7 downto 0);
                    zext_ln138_cast_reg_238(7 downto 0) <= zext_ln138_cast_fu_139_p1(7 downto 0);
                    zext_ln139_cast_reg_233(7 downto 0) <= zext_ln139_cast_fu_135_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                trunc_ln1_reg_272 <= mul_ln138_fu_183_p2(14 downto 7);
                trunc_ln2_reg_277 <= mul_ln139_fu_191_p2(14 downto 7);
                trunc_ln_reg_267 <= mul_ln137_fu_175_p2(14 downto 7);
            end if;
        end if;
    end process;
    zext_ln139_cast_reg_233(14 downto 8) <= "0000000";
    zext_ln138_cast_reg_238(14 downto 8) <= "0000000";
    zext_ln137_cast_reg_243(14 downto 8) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln129_fu_161_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, in_channels_ch1_empty_n, in_channels_ch2_empty_n, in_channels_ch3_empty_n, out_channels_ch1_full_n, out_channels_ch2_full_n, out_channels_ch3_full_n)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((out_channels_ch3_full_n = ap_const_logic_0) or (out_channels_ch2_full_n = ap_const_logic_0) or (out_channels_ch1_full_n = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((in_channels_ch3_empty_n = ap_const_logic_0) or (in_channels_ch2_empty_n = ap_const_logic_0) or (in_channels_ch1_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, in_channels_ch1_empty_n, in_channels_ch2_empty_n, in_channels_ch3_empty_n, out_channels_ch1_full_n, out_channels_ch2_full_n, out_channels_ch3_full_n)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((out_channels_ch3_full_n = ap_const_logic_0) or (out_channels_ch2_full_n = ap_const_logic_0) or (out_channels_ch1_full_n = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((in_channels_ch3_empty_n = ap_const_logic_0) or (in_channels_ch2_empty_n = ap_const_logic_0) or (in_channels_ch1_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, in_channels_ch1_empty_n, in_channels_ch2_empty_n, in_channels_ch3_empty_n, out_channels_ch1_full_n, out_channels_ch2_full_n, out_channels_ch3_full_n)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((out_channels_ch3_full_n = ap_const_logic_0) or (out_channels_ch2_full_n = ap_const_logic_0) or (out_channels_ch1_full_n = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((in_channels_ch3_empty_n = ap_const_logic_0) or (in_channels_ch2_empty_n = ap_const_logic_0) or (in_channels_ch1_empty_n = ap_const_logic_0))));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(in_channels_ch1_empty_n, in_channels_ch2_empty_n, in_channels_ch3_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((in_channels_ch3_empty_n = ap_const_logic_0) or (in_channels_ch2_empty_n = ap_const_logic_0) or (in_channels_ch1_empty_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter3_assign_proc : process(out_channels_ch1_full_n, out_channels_ch2_full_n, out_channels_ch3_full_n)
    begin
                ap_block_state4_pp0_stage0_iter3 <= ((out_channels_ch3_full_n = ap_const_logic_0) or (out_channels_ch2_full_n = ap_const_logic_0) or (out_channels_ch1_full_n = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln129_fu_155_p2)
    begin
        if (((icmp_ln129_fu_155_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, indvar_flatten_fu_68, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv32_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_68;
        end if; 
    end process;

    icmp_ln129_fu_155_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = bound) else "0";

    in_channels_ch1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, in_channels_ch1_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_channels_ch1_blk_n <= in_channels_ch1_empty_n;
        else 
            in_channels_ch1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_channels_ch1_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_channels_ch1_read <= ap_const_logic_1;
        else 
            in_channels_ch1_read <= ap_const_logic_0;
        end if; 
    end process;


    in_channels_ch2_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, in_channels_ch2_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_channels_ch2_blk_n <= in_channels_ch2_empty_n;
        else 
            in_channels_ch2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_channels_ch2_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_channels_ch2_read <= ap_const_logic_1;
        else 
            in_channels_ch2_read <= ap_const_logic_0;
        end if; 
    end process;


    in_channels_ch3_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, in_channels_ch3_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_channels_ch3_blk_n <= in_channels_ch3_empty_n;
        else 
            in_channels_ch3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_channels_ch3_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_channels_ch3_read <= ap_const_logic_1;
        else 
            in_channels_ch3_read <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln137_fu_175_p0 <= mul_ln137_fu_175_p00(8 - 1 downto 0);
    mul_ln137_fu_175_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Y_reg_252),15));
    mul_ln137_fu_175_p1 <= zext_ln137_cast_reg_243(8 - 1 downto 0);
    mul_ln138_fu_183_p0 <= mul_ln138_fu_183_p00(8 - 1 downto 0);
    mul_ln138_fu_183_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(U_reg_257),15));
    mul_ln138_fu_183_p1 <= zext_ln138_cast_reg_238(8 - 1 downto 0);
    mul_ln139_fu_191_p0 <= mul_ln139_fu_191_p00(8 - 1 downto 0);
    mul_ln139_fu_191_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(V_reg_262),15));
    mul_ln139_fu_191_p1 <= zext_ln139_cast_reg_233(8 - 1 downto 0);

    out_channels_ch1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, out_channels_ch1_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_channels_ch1_blk_n <= out_channels_ch1_full_n;
        else 
            out_channels_ch1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_channels_ch1_din <= trunc_ln_reg_267;

    out_channels_ch1_write_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_channels_ch1_write <= ap_const_logic_1;
        else 
            out_channels_ch1_write <= ap_const_logic_0;
        end if; 
    end process;


    out_channels_ch2_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, out_channels_ch2_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_channels_ch2_blk_n <= out_channels_ch2_full_n;
        else 
            out_channels_ch2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_channels_ch2_din <= trunc_ln1_reg_272;

    out_channels_ch2_write_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_channels_ch2_write <= ap_const_logic_1;
        else 
            out_channels_ch2_write <= ap_const_logic_0;
        end if; 
    end process;


    out_channels_ch3_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, out_channels_ch3_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_channels_ch3_blk_n <= out_channels_ch3_full_n;
        else 
            out_channels_ch3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_channels_ch3_din <= trunc_ln2_reg_277;

    out_channels_ch3_write_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_channels_ch3_write <= ap_const_logic_1;
        else 
            out_channels_ch3_write <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln137_cast_fu_143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln137),15));
    zext_ln138_cast_fu_139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln138),15));
    zext_ln139_cast_fu_135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln139),15));
end behav;
